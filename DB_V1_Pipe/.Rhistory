dataForet <- dataForet %>% replace_na(list(CA_BT__N__KE = 0, ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown"))
dataForet$STEP <- factor(dataForet$STEP)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON","CA_BT__N__KE",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(CA_BT__N__KE = 0, ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON","CA_BT__N__KE",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(CA_BT__N__KE = 0, ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(CA_BT__N__KE = 0, ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",PROB=0
))
dataForet$STEP <- factor(dataForet$STEP)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON","CA_BT__N__KE",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(CA_BT__N__KE = 0, ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",PROB=0,
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON","CA_BT__N__KE",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(CA_BT__N__KE = 0, ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",PROB=0,
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$COMPTE <- factor(dataForet$COMPTE)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",PROB=0,
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$COMPTE <- factor(dataForet$COMPTE)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:10], dataForet$STEP)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",PROB=0,
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$COMPTE <- factor(dataForet$COMPTE)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:9], dataForet$STEP)
View(dataForet)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"PROB","SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",PROB=0,
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$COMPTE <- factor(dataForet$COMPTE)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
dataForet$PROB <- factor(dataForet$PROB)
pipe.rf <- randomForest(dataForet[,1:9], dataForet$STEP)
View(dataForet)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
dataForet <- pipe[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$COMPTE <- factor(dataForet$COMPTE)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:8], dataForet$STEP)
View(dataForet)
str(dataforest)
str(dataForest)
dataForet
str(dataForet)
colonnes <- c("COMPTE","ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
pp <- pipe %>% filter(WEEK==max(pipe$WEEK))
dataForet <- pp[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$COMPTE <- factor(dataForet$COMPTE)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:8], dataForet$STEP)
str(dataForet)
colonnes <- c("ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
pp <- pipe %>% filter(WEEK==max(pipe$WEEK))
dataForet <- pp[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:8], dataForet$STEP)
print(pipe.rf)
pp <- pilotage_data %>% filter(WEEK==max(pipe$WEEK))
dataForet <- pp[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:8], dataForet$STEP)
print(pipe.rf)
pp <- pilotage_data %>% filter(WEEK==max(pipe$WEEK))
dataForet <- pp[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",
COMPTE= "unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:8], dataForet$STEP)
View(dataForet)
colonnes <- c("ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
pp <- pilotage_data %>% filter(WEEK==max(pipe$WEEK))
dataForet <- pp[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown",
COMPTE= "unknown"
))
colonnes <- c("ENTITE__APPORTEUR","LEAD__RESP","ASSOCIE",
"SELL_ON",
"OFFRE_PRINCIPALE", "SECTEUR", "GROUPE","STEP")
pp <- pilotage_data %>% filter(WEEK==max(pipe$WEEK))
dataForet <- pp[,colonnes]
dataForet <- dataForet %>% replace_na(list(ASSOCIE = "unknown", GROUPE="unknown",
ENTITE__APPORTEUR="unknown",LEAD__RESP="unknown",
SELL_ON ="Non",OFFRE_PRINCIPALE="unknown",SECTEUR="unknown"
))
dataForet$STEP <- factor(dataForet$STEP)
dataForet$ENTITE__APPORTEUR <- factor(dataForet$ENTITE__APPORTEUR)
dataForet$LEAD__RESP <- factor(dataForet$LEAD__RESP)
dataForet$ASSOCIE <- factor(dataForet$ASSOCIE)
dataForet$SELL_ON <- factor(dataForet$SELL_ON)
dataForet$OFFRE_PRINCIPALE <- factor(dataForet$OFFRE_PRINCIPALE)
dataForet$SECTEUR <- factor(dataForet$SECTEUR)
dataForet$GROUPE <- factor(dataForet$GROUPE)
pipe.rf <- randomForest(dataForet[,1:8], dataForet$STEP)
print(pipe.rf)
dataForet[,1:8]
pipe.rf <- randomForest(dataForet[,1:7], dataForet$STEP)
str(dataForet)
library(h2o)
install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1, #Number of threads -1 means use all cores on your machine
max_mem_size = "8G")  #max mem size is the maximum memory to allocate to H2O
loan_csv <- "https://raw.githubusercontent.com/h2oai/app-consumer-loan/master/data/loan.csv"
data <- h2o.importFile(loan_csv)  # 163,987 rows x 15 columns
dim(data)
data$bad_loan <- as.factor(data$bad_loan)
data$bad_loan
h2o.levels(data$bad_loan)
# Partition the data into training, validation and test sets
splits <- h2o.splitFrame(data = data,
ratios = c(0.7, 0.15),  #partition data into 70%, 15%, 15% chunks
seed = 1)  #setting a seed will guarantee reproducibility
train <- splits[[1]]
valid <- splits[[2]]
test <- splits[[3]]
y <- "bad_loan"
setdiff(names(data), c(y, "int_rate"))
names(data)
glm_fit1 <- h2o.glm(x = x,
y = y,
training_frame = train,
model_id = "glm_fit1",
family = "binomial")  #similar to R's glm, h2o.glm has the family argument
y <- "bad_loan"
x <- setdiff(names(data), c(y, "int_rate"))  #remove the interest rate column because it's correlated with the outcome
glm_fit1 <- h2o.glm(x = x,
y = y,
training_frame = train,
model_id = "glm_fit1",
family = "binomial")  #similar to R's glm, h2o.glm has the family argument
glm_fit2 <- h2o.glm(x = x,
y = y,
training_frame = train,
model_id = "glm_fit2",
validation_frame = valid,
family = "binomial",
lambda_search = TRUE)
# Let's compare the performance of the two GLMs
glm_perf1 <- h2o.performance(model = glm_fit1,
newdata = test)
glm_perf2 <- h2o.performance(model = glm_fit2,
newdata = test)
# Print model performance
glm_perf1
glm_perf2
# 2. Random Forest
# H2O's Random Forest (RF) implements a distributed version of the standard
# Random Forest algorithm and variable importance measures.
# First we will train a basic Random Forest model with default parameters.
# The Random Forest model will infer the response distribution from the response encoding.
# A seed is required for reproducibility.
rf_fit1 <- h2o.randomForest(x = x,
y = y,
training_frame = train,
model_id = "rf_fit1",
seed = 1)
# Next we will increase the number of trees used in the forest by setting `ntrees = 100`.
# The default number of trees in an H2O Random Forest is 50, so this RF will be twice as
# big as the default.  Usually increasing the number of trees in a RF will increase
# performance as well.  Unlike Gradient Boosting Machines (GBMs), Random Forests are fairly
# resistant (although not free from) overfitting.
# See the GBM example below for additional guidance on preventing overfitting using H2O's
# early stopping functionality.
rf_fit2 <- h2o.randomForest(x = x,
y = y,
training_frame = train,
model_id = "rf_fit2",
#validation_frame = valid,  #only used if stopping_rounds > 0
ntrees = 100,
seed = 1)
# Let's compare the performance of the two RFs
rf_perf1 <- h2o.performance(model = rf_fit1,
newdata = test)
rf_perf2 <- h2o.performance(model = rf_fit2,
newdata = test)
# Print model performance
rf_perf1
rf_perf2
runApp()
library(d3treeR)
install.packages("d3Tree")
library(d3treeR)
runApp()
library(d3treeR)
runApp()
help(treemap)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?treemap
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(ggplot2)
install.packages("ggplot2")
library(dplyr)
install.packages("dplyr")
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_39b3996a-1e2b-47d8-8575-d8f833be35d7/input_df_71c9c58f-a1cc-4fe1-aa8a-0373d5d95e8b.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
library(ggplot2)
library(dplyr)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
library(dplyr)
install.packages("dplyr")
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_39b3996a-1e2b-47d8-8575-d8f833be35d7/input_df_71c9c58f-a1cc-4fe1-aa8a-0373d5d95e8b.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
library(ggplot2)
library(dplyr)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
library(dplyr)
install.packages("tidyverse")
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_39b3996a-1e2b-47d8-8575-d8f833be35d7/input_df_71c9c58f-a1cc-4fe1-aa8a-0373d5d95e8b.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
library(ggplot2)
library(tidyverse)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(ggplot2)
library(tidyverse)
library(dplyr)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_39b3996a-1e2b-47d8-8575-d8f833be35d7/input_df_71c9c58f-a1cc-4fe1-aa8a-0373d5d95e8b.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
library(ggplot2)
library(tidyverse)
library(dplyr)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_39b3996a-1e2b-47d8-8575-d8f833be35d7/input_df_71c9c58f-a1cc-4fe1-aa8a-0373d5d95e8b.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
library(ggplot2)
suppressWarning()
library(dplyr)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
library(dplyr)
library(ggplot2)
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_39b3996a-1e2b-47d8-8575-d8f833be35d7/input_df_71c9c58f-a1cc-4fe1-aa8a-0373d5d95e8b.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
library(ggplot2)
options(warn=-1)
library(dplyr)
data1 <- dataset %>% filter(STEP =="4 - Gagnée",!is.na(CA_BT__N__KE))
ggplot(data=data1, aes(x=ASSOCIE, y=CA_BT__N__KE)) +
geom_bar(stat = "identity",aes(fill=OFFRE_PRINCIPALE)) + facet_grid(OFFRE_PRINCIPALE~GROUPE)+
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_17a1d275-fdff-42ae-b410-1fbecd32ebe4/input_df_c1a6fdaa-1355-4082-88ee-5514a0bbb9c9.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
ibrary(ggplot2)
ggplot(data=dataset , aes(x=annee, y=ca_entite)) +
geom_bar(stat = "identity",aes(fill=etape)) +
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
View(data1)
View(dataset)
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_2e098c81-ce87-4546-aa47-2f28f6e6181d/input_df_a6f51825-f08f-4e2d-abb6-01d75a5ed5db.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
ibrary(ggplot2)
ggplot(data=dataset , aes(x=annee, y=ca_entite)) +
geom_bar(stat = "identity",aes(fill=etape)) +
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
View(dataset)
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_2e098c81-ce87-4546-aa47-2f28f6e6181d/input_df_a6f51825-f08f-4e2d-abb6-01d75a5ed5db.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
ibrary(ggplot2)
ggplot(data=dataset , aes(x=annee, y=ca_entite)) +
geom_bar(stat = "identity",aes(fill=annee)) +
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_77163175-907f-4925-a59e-54f3dc5abf8a/input_df_ddd6e196-d6d0-45ac-97f9-14f3ebd6bdc6.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
ibrary(ggplot2)
ggplot(data=dataset , aes(x=annee, y=ca_entite)) +
geom_bar(stat = "identity",aes(fill=etape)) +
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/lbe/REditorWrapper_a2cdf569-9aab-4187-b2c0-f23624fa23fa/input_df_1c3e788c-9086-474f-bded-5a48abb6da00.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
ibrary(ggplot2)
ggplot(data=dataset , aes(x=annee, y=ca_entite)) +
geom_bar(stat = "identity",aes(fill=etape)) +
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
ggplot(data=dataset , aes(x=etape, y=ca_entite)) +
geom_bar(stat = "identity",aes(fill=etape)) +
ggtitle("Répartition des missions gagnées par Groupe")+
ylab('CA BT en k€')
devtools::install_github('rstudio/DT')
devtools::install_github("csgillespie/addinmanger")
addinmanager:::addin_manager()
addinmanager:::addin_manager()
colourpicker:::colourPickerAddin()
colourpicker:::plotHelperAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
limoaddin:::hist_addin()
