{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(shinydashboard)\nlibrary(googlesheets) #permet d'acceder à la feuille Google du Staffing\nlibrary(purrr) #pour typer les colonnes\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(stringr) \nlibrary(tidyr)#fonction replace_NA\nlibrary(daff) #PErmet de voir les différences entre deux data frame\nlibrary(ggthemes) #pour les thèmes ggplot\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(DT)\nlibrary(xlsx)\n\n###### Fonctions qui permet de renommer les colonnes importées\nformat_col_names <- function(x) { \n  x <- str_replace_all(x, \"[éèê]\", \"e\")\n  x <- str_replace_all(x, \"û\", \"u\")\n  x <- str_replace_all(x, \" \", \"_\")\n  x <- str_replace_all(x, \"\\\\.\", \"\")\n  x <- str_replace_all(x, \"/\", \"\")\n  x <- str_replace_all(x, \"€\", \"E\")\n  x <- str_replace_all(x, \"\\\\(\", \"_\")\n  x <- str_replace_all(x, \"\\\\)\", \"\")\n  x <- str_replace_all(x, \"\\n\", \"\")\n  x <- str_replace_all(x, \"\\r\", \"\")\n  x <- str_replace_all(x, \"\\\\+1\", \"_PLUS_1_\")\n  x <- str_replace_all(x, \"\\\\-1\", \"_MOINS_1_\")\n  x <- str_to_upper(x)\n  x\n}\n\n#fonction qui remplace dans les colonnes le xx -> yy par yy \nclean_split <- function(x) {\n  split_result <- str_split(x, \"->\")\n  split_result\n}\n\nclean_split_pourcentage <- function(x) {\n  \n  split_result <- str_split(x, \"->\")\n  split_result <- paste(as.character(as.numeric(split_result[[1]]) *100) , \"%\")\n  if (is.na(split_result[2]) ) {\n    split_result <- split_result[1]\n  } else {\n    split_result <- paste(split_result[1],\"->\",split_result[2])\n  }\n  split_result\n}\n\ndf <- data.frame(per=c(\"20%\",\".2->.5\"))\n\n  clean_split_CA <- function(x) {\n    split_result <- str_split(x, \"->\")\n    split_result <- as.character(round(as.numeric(split_result[[1]],digit=0)))\n    split_result <- paste(split_result[1],\"->\",split_result[2])\n    split_result\n  }\n  \n  remplace_Type <- function (x) {\n    #on va remplacer les listes par la valeur\n\n    # 1   Ferme\n    # 2\t\tPrévi\n    # 3\t\tWBT - CONGES\n    # 4\t\tWBT - Formation\n    # 5\t\tWBT - Activités Internes ou à affecter\n    # 6\t\tWBT - Arrêt maladie\n    # 7\t\tWBT - Inactivité\n    typeList <- c(1:7)\n    nomList <- c(\"Ferme\",\"Prévi\",\"WBT - CONGES\",\"WBT - Formation\",\"WBT - Activités Internes\",\"WBT - Arrêt maladie\",\"WBT - Inactivité\")\n    dframe <- data.frame(typeList,nomList)\n    dframe[,2][x]\n    \n  }\n\n  \n  labels <- structure(list(V1 = 1:6, V2 = c(\"LABEL1\", \"LABEL2\", \"LABEL3\", \n                                            \"LABEL4\", \"LABEL5\", \"LABEL6\")), \n                      .Names = c(\"V1\", \"V2\"), class = \"data.frame\", row.names = \n                        c(\"1\",  \"2\", \"3\", \"4\", \"5\", \"6\"))\n                        \n  df <- data.frame(colX= sample(1:6,25, replace=TRUE), colY=rnorm(25))\n  labels[,2][df$colX]\nlast_elem <- function(x) {\n  str_to_title(str_trim(x[length(x)]))\n}\nfisrt_elem <- function(x) {\n  str_to_title(str_trim(x[1]))\n}\n\n#map_chr(clean_split(c(\"AA->BB\", \"TT\")), last_elem)\n\n#Fonction qui va remplacer les , par des . ainsi que les % (cela se produit sur les data Google ramenées)\nremplaceVal <- function (x) {\n  x <- str_replace_all(x,\",\",\".\")\n  x <- str_replace_all(x,\"%\",\".\")\n  x\n}\n#Liste des type de staffing et Pipe pour l'UI\nType_Staffing <- c(1,2,3,4,5,6,7)\nSTEPS <- list(\"0 - A qualifier\"  , \"1 - Qualifiée\" , \"2 - A émettre\" ,\"3 - Emise\", \"4 - Gagnée\", \"5 - No follow\",\"6 - En sommeil\",   \"7 - Perdue\"   )\n\n#Chargement des derniers Dataframe valides\nload(\"data/staffing2017.RData\")\nload(\"data/Pilotage.RData\")\n#Chargement des logs\nload(\"data/LogFichier.RData\")\nload(\"data/LogGoogle.RData\")\n\n\nmois <- as.numeric(format(Sys.Date(), \"%m\"))\nmoisSuiv <- mois +1\nlistMois <- c(\"JAN\",\"FEV\",\"MAR\",\"AVR\",\"MAI\",\"JUIN\",\"JUIL\",\"AOUT\",\"SEPT\",\"OCT\",\"NOV\",\"DEC\")\nselection <- listMois [mois:moisSuiv]\n\nMy_colonnes <- c(\"CONSULTANTS\",\"TYPE\",\"MISSIONS\",\"ID_TOTEM\"  )\nMy_colonnes <- c(My_colonnes, selection)\n##################################### Connexion à Google et récupération du Staffing et du Pipe en ligne #################################################\n\n\n# # Procedure qui permet de stocker son Token pour s'authentifier sur Drive\n# gs_ls()\n# # #On récupère le token\n#  token <- gs_auth(cache = FALSE)\n#  gd_token()\n# # #On le sauve au niveau du drive\n#  saveRDS(token, file = \"googlesheets_token.rds\")\n\n## on utilise le token (de façon transparente) pour se connecter\nsuppressMessages(gs_auth(token = \"googlesheets_token.rds\", verbose = FALSE))\n\n\n# On récupère le lien vers le fichier Pilotage dans R qui contient le staffing\nBT_Pilotage <- gs_title(\"BT - Pilotage 2017\")\n#on charge ensuite le fichier Pipe depuis Google Sheets\nPilotage_Actuel <- gs_read(ss=BT_Pilotage, ws = \"Pipe\", skip=4)\n# On charge la feuille google dans un dataframe (skip permet de passer les 15 premieres lignes)\nStaff_Actuel <- gs_read(ss=BT_Pilotage, ws = \"Staffing\", skip=15)\n\n# Fonction qui supprime les colonnes du staffing en trop et qui transforme les colonnes de char à num \nprepareStaffing1 <- function (df) {\n  #on va suprimer touts les colonnes X en fin de dataframe\n  df <- df [, -c(30:43)]\n\n  #On ajoute la semaine et l'année \n  df <- df %>% mutate(WEEK=week(now())) %>% mutate(YEAR=year(now()))\n  colnames(df) <- format_col_names(colnames(df))\n  df$JANV <- as.numeric(remplaceVal(df$JANV))\n  df$FEV <- as.numeric(remplaceVal(df$FEV))\n  df$MAR <- as.numeric(remplaceVal(df$MAR))\n  df$AVR <- as.numeric(remplaceVal(df$AVR))\n  df$MAI <- as.numeric(remplaceVal(df$MAI))\n  df$JUIN <- as.numeric(remplaceVal(df$JUIN))\n  df$JUIL <- as.numeric(remplaceVal(df$JUIL))\n  df$AOUT <- as.numeric(remplaceVal(df$AOUT))\n  df$SEPT <- as.numeric(remplaceVal(df$SEPT))\n  df$OCT <- as.numeric(remplaceVal(df$OCT))\n  df$NOV <- as.numeric(remplaceVal(df$NOV))\n  df$DEC <- as.numeric(remplaceVal(df$DEC))\n  #df$TOTAL <- as.numeric(remplaceVal(df$TOTAL))\n  \n\n df <- df %>% select(one_of(My_colonnes))\n  df\n}\nprepareStaffing2 <- function (df) {\n  df2 <- df %>% \n    filter(TYPE != 0,CONSULTANTS != \"(ex)\")  %>%\n    select(one_of(My_colonnes))\n  df2\n} \n\n\n# fonction qui compare le Staffing de référence avec la version google en ligne\ncompareStaff <- function(df){\n  df <- df %>% filter(! V2 %in%  c(\"ZZ_NE RIEN AJOUTER SOUS CETTE LIGNE\",NA)) %>%\n    mutate(V1= as.character(V1))%>% \n    replace_na(list(V6=0))%>%\n    mutate(V8= ifelse(grepl(\"->\",V6),as.character(V6),paste(V6,\"->0\"))) %>%\n    mutate(V9= ifelse(grepl(\"->\",V7),as.character(V7),paste(V7,\"->0\"))) %>%\n    \n    filter(V1 %in% c(\"+++\",\"---\",\"->\")) %>% \n    mutate(V1= ifelse(V1==\"->\",\"mod\",V1)) %>% \n    separate(V8, into = c(\"MPrev\",\"M\"), sep = \"->\",convert=TRUE) %>%\n    replace_na(list(M=0,MPrev=0)) %>%\n    separate(V9, into = c(\"M1Prev\",\"M1\"), sep = \"->\",convert=TRUE) %>%\n    mutate(M=ifelse(V1==\"+++\",as.numeric(MPrev),as.numeric(M))) %>%\n    mutate(MPrev= ifelse(V1==\"+++\",0,as.numeric(MPrev)))%>%\n    mutate(M1=ifelse(V1==\"+++\",as.numeric(M1Prev),as.numeric(M1))) %>%\n    mutate(M1Prev= ifelse(V1==\"+++\",0,as.numeric(M1Prev)))%>%\n    \n    mutate(DELTA=ifelse(V1==\"+++\",M,\n                         ifelse(V1==\"---\",-MPrev,M - MPrev))) %>% \n  mutate(DELTA1=ifelse(V1==\"+++\",M1,\n                      ifelse(V1==\"---\",-M1Prev,M1 - M1Prev))) \n  #%>%\n    #mutate(V4= map_chr(clean_split(as.character(V4)), last_elem) ) %>%\n  #   mutate(V5= map_chr(clean_split(as.character(V5)), last_elem) ) %>% filter (V1 %in% c(\"+++\",\"---\") | grepl(\"->\",V6))\n colnames(df)  <-  c('Changement', My_colonnes, \"MPrev\",\"M\",\"M1Pev\",\"M1\",\"DELTA\",\"DELTA1\")\n  df\n}\n\npreparePipe1 <- function (df) {\n  colnames(df) <- format_col_names(colnames(df))\n  #On va supprimer les colonnes non utiles\n  df <- df[, -c(24)]\n  df <- df[, -1]\n  #ON SUPPRIME LA LIGNE 1\n  df <- df[-1, ]\n  #On va renommer les colonnes COMPTE,ASSOCIE, SUJET,STEP,PROB,CODE_TOTEM,TOTAL_CA_VENDU_N__KE)\n  df <- df %>% select(1,5,2,6,9,7,10)\n  colnames(df) <- c(\"COMPTE\",\"ASSOCIE\", \"SUJET\",\"STEP\",\"CODE_TOTEM\",\"PROB\",\"CA_BT__N__KE\")\n  df <- df %>% arrange(COMPTE,SUJET)\n  df$PROB <- as.numeric(remplaceVal(df$PROB))/100\n  df\n}\n\ncomparePipe <- function (df) {\n  comparaisonP <- df %>% filter(! V4 %in%  c(\"ZZ_NE RIEN AJOUTER SOUS CETTE LIGNE\",NA)) %>%\n    mutate(V1= as.character(V1))%>% \n    filter(V1 %in% c(\"+++\",\"---\",\"->\")) %>%\n    mutate(V1= ifelse(V1==\"->\",\"mod\",V1)) %>% \n    filter (V1 == \"+++\"|V1 == \"---\"|(V1==\"mod\" & grepl(\"->\",paste(V5,V6,V8) ))) #%>%\n  \n  colnames(comparaisonP)  <-   c('Changement',\"COMPTE\",\"ASSOCIE\", \"SUJET\",\"STATUT\",\"TOTEM\",\"PROBA\",\"CA_BT__N__KE\")\n  #comparaisonP$PROBA <- clean_split_pourcentage(comparaisonP$PROBA)\n  comparaisonP <-  comparaisonP %>%  mutate(STEP_Prev= map_chr(clean_split(as.character(STATUT)), last_elem) ) %>%  \n    mutate(STEP= map_chr(clean_split(as.character(STATUT)), fisrt_elem) ) %>%\n    mutate(PROB_Prev= map_chr(clean_split(as.character(PROBA)), last_elem) ) %>%  \n    mutate(PROB= map_chr(clean_split(as.character(PROBA)), fisrt_elem) ) %>%\n    mutate(CA= map_chr(clean_split(as.character(CA_BT__N__KE)), last_elem) ) %>%  \n    mutate(CA_Prev= map_chr(clean_split(as.character(CA_BT__N__KE)), fisrt_elem) ) %>%\n    mutate(DELTA=ifelse(Changement==\"mod\",as.numeric(format(as.numeric(CA) - as.numeric(CA_Prev), digits=2, nsmall=2)),\n                        ifelse(Changement==\"+++\",as.numeric(CA),-as.numeric(CA)))) %>%\n    mutate(DELTA = as.numeric(DELTA)) %>%\n  \n    replace_na(list(DELTA=0))\n  \n  comparaisonP\n}\n\n",
    "created" : 1493811617679.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1539279083",
    "id" : "73F15D2E",
    "lastKnownWriteTime" : 1498737020,
    "last_content_update" : 1498737020348,
    "path" : "D:/tmp/Ecarts/Global.R",
    "project_path" : "Global.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}