{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nserver <- function(input, output) {\n  \n  #on met en place une reactiveValues pour permettre la réactivation de DT losrque l'on charge un fichier XLS ou que l'on deande une nouvelle\n  #verion du fichier Google de suivi\n  values <- reactiveValues()\n  #On initialise les différences entre le staffing et google \n\n  Staff_Actuel <- prepareStaffing1(Staff_Actuel)\n  Staff_Actuel2 <- prepareStaffing2(Staff_Actuel)\n   Staffing <- Staffing %>% \n    filter(TYPE != 0)  %>%\n    select(one_of(My_colonnes))\n\n  resultatDiff <- diff_data(Staffing,Staff_Actuel2)\n\n  comparaison <- as.data.frame(resultatDiff$get_matrix())\n  comparaison <- compareStaff(comparaison)\n  \n  ######################## Initialisation pipe\n  #il faut regarder les lignes différentes \n  Pilotage <- Pilotage %>% select(COMPTE,ASSOCIE, SUJET,STEP,CODE_TOTEM,PROB,CA_BT__N__KE)\n  Pilotage_Actuel <- preparePipe1(Pilotage_Actuel)\n  resultatDiff <- diff_data(Pilotage ,Pilotage_Actuel)\n  comparaisonP <- as.data.frame(resultatDiff$get_matrix())\n  comparaisonP <- comparePipe(comparaisonP)\n  \n  values$LogGoogle <- LogGoogle\n  values$LogFichier <- LogFichier\n  values$comparaisonP <- comparaisonP\n  \n  ##################################################\n\n  #Vaues Box sur le Staffing & le Pipe\n  output$Add <- renderValueBox({\n    if (is.null(values$comparaison)){ comp <- comparaison}\n    else {comp <- values$comparaison }\n    Synthese <- comp %>% filter(!is.na(DELTA)) %>% group_by(Changement) %>% summarise(n())\n    valueBox(\n      ifelse(nrow(Synthese[Synthese$Changement==\"+++\",2])==0,0,Synthese[Synthese$Changement==\"+++\",2]),\n      \"Ligne ajoutée\", icon = icon(\"plus\", lib = \"glyphicon\"),\n      color = \"green\"\n    )\n  })\n  output$AddP <- renderValueBox({\n    \n    if (is.null(values$comparaisonP)){ compP <- comparaisonP}\n    else {compP <- values$comparaisonP }\n    SyntheseP <- compP %>% group_by(Changement) %>% summarise(n())\n    valueBox(\n      ifelse(nrow(SyntheseP[SyntheseP$Changement==\"+++\",2])==0,0,SyntheseP[SyntheseP$Changement==\"+++\",2]),\n      \"Ligne ajoutée\", icon = icon(\"plus\", lib = \"glyphicon\"),\n      color = \"green\"\n    )\n  })\n    output$Mod <- renderValueBox({\n      if (is.null(values$comparaison)){ comp <- comparaison}\n      else {comp <- values$comparaison }\n      Synthese <- comp %>% filter(!is.na(DELTA)) %>% group_by(Changement) %>% summarise(n())  \n    valueBox(\n      ifelse(nrow(Synthese[Synthese$Changement==\"mod\",2])==0,0,Synthese[Synthese$Changement==\"mod\",2]),\n      \"Ligne modifiées\", icon = icon(\"pencil\", lib = \"glyphicon\"),\n      color = \"yellow\"\n    )\n  })\n    output$ModP <- renderValueBox({\n      if (is.null(values$comparaisonP)){ compP <- comparaisonP}\n      else {compP <- values$comparaisonP }\n      SyntheseP <- compP %>% group_by(Changement) %>% summarise(n())\n      valueBox(\n        ifelse(nrow(SyntheseP[SyntheseP$Changement==\"mod\",2])==0,0,SyntheseP[SyntheseP$Changement==\"mod\",2]),\n        \"Ligne modifiées\", icon = icon(\"pencil\", lib = \"glyphicon\"),\n        color = \"yellow\"\n      )\n    })\n  output$Del <- renderValueBox({\n    if (is.null(values$comparaison)){ comp <- comparaison}\n    else {comp <- values$comparaison }\n    Synthese <- comp %>% group_by(Changement) %>% summarise(n())\n    valueBox(\n      ifelse(nrow(Synthese[Synthese$Changement==\"---\",2])==0,0,Synthese[Synthese$Changement==\"---\",2]), \n      \"Ligne supprimées\", icon = icon(\"minus\", lib = \"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  output$DelP <- renderValueBox({\n    if (is.null(values$comparaisonP)){ compP <- comparaisonP}\n    else {compP <- values$comparaisonP }\n    SyntheseP <- compP %>% group_by(Changement) %>% summarise(n())\n    valueBox(\n      ifelse(nrow(SyntheseP[SyntheseP$Changement==\"---\",2])==0,0,SyntheseP[SyntheseP$Changement==\"---\",2]), \n      \"Ligne supprimées\", icon = icon(\"minus\", lib = \"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  \n  output$Add_TOTAL <- renderValueBox({\n    if (is.null(values$comparaison)){ comp <- comparaison}\n    else {comp <- values$comparaison }\n    Synthese_TOTAL <- comp  %>% group_by(Changement)  %>%  filter(!is.na(DELTA)) %>% summarise(TOTAL = sum(DELTA,na.rm = TRUE))\n    valueBox(\n      ifelse(nrow(Synthese_TOTAL[Synthese_TOTAL$Changement==\"+++\",2])==0,0,Synthese_TOTAL[Synthese_TOTAL$Changement==\"+++\",2]),\n      \"Jours homme ajoutés\", icon = icon(\"plus\", lib = \"glyphicon\"),\n      color = \"green\"\n    )\n  })\n  output$Add_TOTALP <- renderValueBox({\n\n    if (is.null(values$comparaisonP)){ compP <- comparaisonP}\n    else {compP <- values$comparaisonP }\n    Synthese_TOTALP <- compP  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = FALSE))\n    valueBox(\n      ifelse(nrow(Synthese_TOTALP[Synthese_TOTALP$Changement==\"+++\",2])==0,0,Synthese_TOTALP[Synthese_TOTALP$Changement==\"+++\",2]),\n      \"Jours homme ajoutés\", icon = icon(\"plus\", lib = \"glyphicon\"),\n      color = \"green\"\n    )\n  })\n  output$Mod_TOTAL <- renderValueBox({\n    if (is.null(values$comparaison)){ comp <- comparaison}\n    else {comp <- values$comparaison }\n    Synthese_TOTAL <- comp  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = TRUE))\n    valueBox(ifelse(nrow(Synthese_TOTAL[Synthese_TOTAL$Changement==\"mod\",2])==0,0,Synthese_TOTAL[Synthese_TOTAL$Changement==\"mod\",2]),\n      \"Impacts en jours homme\", icon = icon(\"pencil\", lib = \"glyphicon\"),\n      color = \"yellow\"\n    )\n  })\n  output$Mod_TOTALP <- renderValueBox({\n    if (is.null(values$comparaisonP)){ compP <- comparaisonP}\n    else {compP <- values$comparaisonP }\n    dP <- compP  %>% filter (Changement==\"mod\", grepl(\"->\",CA_BT__N__KE))\n    valueBox(sum(dP$DELTA),\n             \"Impacts en jours homme\", icon = icon(\"pencil\", lib = \"glyphicon\"),\n             color = \"yellow\"\n    )\n  })\n  output$Del_TOTAL <- renderValueBox({\n    if (is.null(values$comparaison)){ comp <- comparaison}\n    else {comp <- values$comparaison }\n    Synthese_TOTAL <- comp  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = TRUE))\n    valueBox(\n      ifelse(nrow(Synthese_TOTAL[Synthese_TOTAL$Changement==\"---\",2])==0,0,Synthese_TOTAL[Synthese_TOTAL$Changement==\"---\",2]), \n      \"Jour/hommme supprimés\", icon = icon(\"minus\", lib = \"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  output$Del_TOTALP <- renderValueBox({\n    if (is.null(values$comparaisonP)){ compP <- comparaisonP}\n    else {compP <- values$comparaisonP }\n    Synthese_TOTALP <- compP  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = FALSE))\n    valueBox(\n      ifelse(nrow(Synthese_TOTALP[Synthese_TOTALP$Changement==\"---\",2])==0,0,Synthese_TOTALP[Synthese_TOTALP$Changement==\"---\",2]), \n      \"Jour/hommme supprimés\", icon = icon(\"minus\", lib = \"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  # Graphes sur les écarts entre la version de référence et le fichier Google\n  output$Staffing_plot <- renderPlot({\n\n    if (is.null(values$Staffing)) {Staff <- Staffing } \n    else {Staff <- values$Staffing }\n    if (is.null(values$Staff_Actuel2)) {Staff2 <- Staff_Actuel2} \n    else {Staff2 <- values$Staff_Actuel2}\n\n    \n    plotOld <- Staff %>% filter(TYPE !=0)  %>% gather(mois, nb,5:6) %>%\n      group_by(TYPE,mois) %>% \n      summarise(DELTA = sum(nb, na.rm = TRUE)) %>%\n      mutate(Semaine = \"Précédente\") \n    \n    plotNew <- Staff2 %>% filter(TYPE !=0) %>% gather(mois, nb,5:6) %>%\n      group_by(TYPE,mois) %>%\n      summarise(DELTA = sum(nb, na.rm = TRUE)) %>%\n      mutate(Semaine = \"Actuelle\") \n\n    plot_final <- left_join(plotOld, plotNew, by = c(\"TYPE\",\"mois\")) %>% \n      mutate(Ecarts = DELTA.y - DELTA.x ) %>% ungroup () %>% mutate(TYPE=factor(TYPE)) \n    #on remplace les 1 à 7 par les bons libellés\n    plot_final$TYPE <- remplace_Type(plot_final$TYPE)\n    plot_final %>%\n    ggplot(aes(x = TYPE,\n               y = Ecarts, fill=TYPE))+\n      geom_bar(stat = \"identity\")+\n      ggtitle(\"Ecarts par type de ligne du staffing\")+\n      scale_x_discrete(name=\"TYPE\") + scale_fill_discrete(name = \"Type de ligne\") + theme(legend.position=\"bottom\") +\n      facet_grid(mois ~ .)\n    \n  })\n  \n  output$Pipe_plot <- renderPlot({\n    \n    if (is.null(values$Pilotage)){ Pil <- Pilotage}\n    else {Pil <- values$Pilotage }\n    plotOld <- Pil %>% \n      group_by(STEP) %>%\n      summarise(TOTAL = sum(CA_BT__N__KE, na.rm = TRUE)) %>%\n      mutate(Semaine = \"Précédente\") \n    if (is.null(values$Pilotage_Actuel)){ PilA <- Pilotage_Actuel}\n    else {PilA <- values$Pilotage_Actuel }\n    plotNew <- PilA %>% mutate(CA_BT__N__KE = as.numeric(CA_BT__N__KE)) %>%\n      group_by(STEP) %>%\n      summarise(TOTAL = sum(CA_BT__N__KE, na.rm = TRUE)) %>%\n      mutate(Semaine = \"Actuelle\") \n    \n    plot_final <- left_join(plotOld, plotNew, by = c(\"STEP\")) %>% \n      mutate(Ecarts = TOTAL.y - TOTAL.x )  \n    \n    plot_final %>%\n      ggplot(aes(x = STEP,\n                 y = Ecarts, fill=STEP))+\n      geom_bar(stat = \"identity\")+\n      ggtitle(\"Ecarts par type de ligne du Pipe\")+\n      scale_x_discrete(name=\"STEP\")+\n      theme_wsj() + scale_fill_discrete(name = \"Type de ligne\") + theme(legend.position=\"bottom\")\n  }) \n  \n   output$contents <- renderTable({\n     values$Staffing\n   })\n  \n  output$contents2 <- renderTable({\n    values$Pilotage\n  })\n  \n  StaffTableau <- reactive ({\n    \n    #on va regarder par personne le nb de jours par mois \n    #si values$Staffing est null cela signifie que l'on pas importé de nouveau Dataframe\n    if (is.null(values$Staffing)) {Staff <- Staffing } \n        else {Staff <- values$Staffing }\n    if (is.null(values$Staff_Actuel2)) {Staff2 <- Staff_Actuel2} \n    else {Staff2 <- values$Staff_Actuel2}\n\n    resultatDiff <- diff_data(Staff,Staff2)\n    comparaison <- as.data.frame(resultatDiff$get_matrix())\n    \n    comparaison <- compareStaff(comparaison)\n   \n    Synthese <- comparaison %>% group_by(Changement) %>% summarise(n())\n    Synthese_TOTAL <- comparaison  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = TRUE))\n    \n    comparaison <- comparaison %>% \n      mutate(TYPE= map_chr(clean_split(as.character(TYPE)), last_elem) ) %>%\n      filter(TYPE %in% input$Staff, Changement %in% input$uiModifEcart, DELTA !=0)\n    \n    # Write the first data set in a new workbook\n    write.xlsx(comparaison, file = \"Staff.xlsx\",\n               sheetName = \"USA-ARRESTS\", append = FALSE)\n   \n    comparaison <-comparaison %>% \n      mutate(MISSIONS=ifelse(grepl(\"->\",MISSIONS),paste(\"<font color=#BC0E1F>\",MISSIONS,\"</font>\"),paste(MISSIONS,\"\"))) %>%\n      mutate(ID_TOTEM=ifelse(grepl(\"->\",ID_TOTEM),paste(\"<font color=#BC0E1F>\",ID_TOTEM,\"</font>\"),paste(ID_TOTEM,\"\")))\n    datatable(comparaison, \n              escape = FALSE, #permet de mettre du HTML\n              rownames = FALSE,\n              options = list(\n                columnDefs = list(list(className = 'dt-center', targets = 5)),\n                pageLength = 50))  %>%\n      formatStyle(\n        'Changement',\n        target = 'row',\n        backgroundColor = styleEqual(c(\"+++\", \"---\",\"mod\"), c('#99E8D8', '#FEB7B2','#E3F2FD'))\n      )\n  }) \n  \n## Permet de dowloader le fichier XLSX\n  \n  output$downloadData <- downloadHandler(\n    filename <- function() {\n      paste(\"staff\", \"xlsx\", sep=\".\")\n    },\n    \n    content <- function(file) {\n      file.copy(\"Staff.xlsx\", file)\n    },\n    contentType = \"application/vnd.ms-excel\"\n  )\n  \n  \n#Ce code controle si on utilise le bouton permettant d'importer un fichier de Staffing, il met a jour la donnée reactivevalue Staffing et stock le nouveau\n# Dataframe au format RData\nobserveEvent(input$Staffing\n               \n               , {\n                 \n                 inFile <- input$Staffing\n                 if (is.null(inFile)) return(NULL)\n                 file.copy(inFile$datapath,\n                           \"Staff.xlsx\",overwrite = TRUE)\n                 Staffing <-read_excel(\"Staff.xlsx\", 1)\n                 colnames(Staffing) <- format_col_names(colnames(Staffing))\n                    Staffing <- Staffing %>% \n                      filter(TYPE != 0)  %>% \n                      select(one_of(My_colonnes))\n                    save(Staffing,file=\"data/staffing2017.RData\")\n                    \n                    resultatDiff <- diff_data(Staffing,Staff_Actuel2)\n                    comparaison <- as.data.frame(resultatDiff$get_matrix())\n                    \n                    comparaison <- compareStaff(comparaison)\n                    Synthese <- comparaison %>% filter(!is.na(DELTA)) %>% group_by(Changement) %>% summarise(n())\n                    #Synthese_TOTAL <- comparaison  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = TRUE))\n                    #d <-  comparaison  %>% filter (V1==\"mod\", grepl(\"->\",V6)) \n                    #colnames(comparaison)  <-  c('Changement', 'Consultant', 'Type', 'Mission', 'TOTEM', 'Total',\"Semaine prev\", 'Semaine','DELTA')\n                   #comparaison <- comparaison %>% filter(Type %in% input$Staff, Changement %in% input$uiModifEcart, DELTA !=0)\n                    \n                    #comparaison <-comparaison %>% \n                      # mutate(Mission=ifelse(grepl(\"->\",Mission),paste(\"<font color=#BC0E1F>\",Mission,\"</font>\"),paste(Mission,\"\"))) %>%\n                      # mutate(TOTEM=ifelse(grepl(\"->\",TOTEM),paste(\"<font color=#BC0E1F>\",TOTEM,\"</font>\"),paste(TOTEM,\"\"))) %>%\n                      # mutate(Total=ifelse(grepl(\"->\",Total),paste(\"<font color=#BC0E1F>\",Total,\"</font>\"),paste(Total,\"\"))) \n                    log <- data.frame(DATE=as.character(Sys.time()),TYPE=\"Staffing\",LIGNE=inFile$name)\n                    LogFichier  <- rbind(LogFichier , log)\n                   \n                    save(LogFichier ,file=\"data/LogFichier.RData\")\n                    values$LogFichier <- LogFichier  \n                 values$comparaison <- comparaison   \n                 values$Staffing <- Staffing\n  })\n\n\nobserveEvent(input$Pipe\n             \n             , {\n               inFile <- input$Pipe\n               if (is.null(inFile)) return(NULL)\n               file.copy(inFile$datapath,\n                         \"Pipe.xlsx\",overwrite = TRUE)\n               Pilotage <-read_excel(\"Pipe.xlsx\", 1)\n               colnames(Pilotage) <- format_col_names(colnames(Pilotage))\n               Pilotage <- Pilotage %>% select(COMPTE,ASSOCIE, SUJET,STEP,CODE_TOTEM,PROB,CA_BT__N__KE)\n               save(Pilotage,file=\"data/Pilotage.RData\")\n               log <- data.frame(DATE=as.character(Sys.time()),TYPE=\"Pipe\",LIGNE=inFile$name)\n               LogFichier  <- rbind(LogFichier , log)\n               #LogGoogle <- data.frame(DATE=character(),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)\n               save(LogFichier ,file=\"data/LogFichier.RData\")\n               values$LogFichier <- LogFichier \n              \n               resultatDiff <- diff_data(Pilotage ,Pilotage_Actuel)\n               comparaisonP <- as.data.frame(resultatDiff$get_matrix())\n               comparaisonP <- comparePipe(comparaisonP)\n               values$comparaisonP <- comparaisonP  \n               values$Pilotage <- Pilotage   \n               \n             })\n\nobserveEvent(input$go\n             \n             , {\n               if (input$go == 0) return(NULL)\n               # Create a Progress object\n               progress <- shiny::Progress$new(style = 'notification')\n               progress$set(message = \"Chargement des données\", value = 0)\n               # On charge la feuille google dans un dataframe (skip permet de passer les 15 premieres lignes)\n               Staff_Actuel <- gs_read(ss=BT_Pilotage, ws = \"Staffing\", skip=15)\n               #on va suprimer touts les colonnes X en fin de dataframe\n               progress$set(message = \"Formatage des données\", value = 30)\n               Sys.sleep(2)\n               \n               #on va comparer les differences entre le staffing et le Staff_Actuel\n               Staffing <- Staffing %>% \n                 filter(TYPE != 0)  %>% \n                 select(CONSULTANTS,TYPE,MISSIONS,ID_TOTEM,TOTAL)\n               Staff_Actuel <- prepareStaffing1(Staff_Actuel)\n               Staff_Actuel2 <- prepareStaffing2(Staff_Actuel)\n               \n               #il faut regarder les lignes différentes \n               progress$set(message = \"Comparaison avec semaine passée\", value = 80)\n               Sys.sleep(0.5)\n               resultatDiff <- diff_data(Staffing,Staff_Actuel2)\n               comparaison <- as.data.frame(resultatDiff$get_matrix())\n               comparaison <- compareStaff(comparaison)\n           \n               #on va compter le nombre de modifs\n               progress$set(message = \"Agrégation des données\", value = 100)\n               Sys.sleep(0.5)\n               \n               progress$set(message = \"Chargement des données Terminé\", value = 100)\n               on.exit(progress$close())\n               HTML(paste(\"hello\", \"Traitement Terminé\",  sep=\"\\n\"))\n              \n               #on ajoute une ligne à la log google\n               log <- data.frame(DATE=as.character(Sys.time()),TYPE=\"Staffing\",LIGNE=paste(\"Nb lignes: \",LIGNE=nrow(Staff_Actuel2)))\n               LogGoogle  <- rbind(LogGoogle , log)\n               #LogGoogle <- data.frame(DATE=character(),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)\n               save(LogGoogle ,file=\"data/LogGoogle.RData\")\n               values$LogGoogle <- LogGoogle  \n\n               values$comparaison <- comparaison   \n               values$Staff_Actuel2 <- Staff_Actuel2\n             })\n\n  #Tableau de comparaison\n  output$DTSTAFF = DT::renderDataTable( StaffTableau())\n  #Tableau qui affiche le staffing contenu dans le fichier Excel\n  output$DTSTAFFING = DT::renderDataTable( values$Staffing )\n  \n  PipeTableau <- reactive ({\n\n    #on va regarder par personne le nb de jours par mois \n    #si values$Staffing est null cela signifie que l'on pas importé de nouveau Dataframe\n    if (is.null(values$Pilotage)){ Pil <- Pilotage}\n      else {Pil <- values$Pilotage }\n    if (is.null(values$Pilotage_Actuel)){Pil_Act <- Pilotage_Actuel}\n      else {Pil_Act <- values$Pilotage_Actuel }\n    \n    #il faut regarder les lignes différentes \n    Pilotage <- Pil %>% select(COMPTE,ASSOCIE, SUJET,STEP,CODE_TOTEM,PROB,CA_BT__N__KE)\n    #Pilotage_Actuel <- preparePipe1(values$Pilotage_Actuel)\n    resultatDiff <- diff_data(Pil ,Pil_Act)\n    comparaisonP <- as.data.frame(resultatDiff$get_matrix())\n    \n    #on conserve les lignes en écarts\n    comparaisonP <- comparePipe(comparaisonP)\n    SyntheseP <- comparaisonP %>% group_by(Changement) %>% summarise(n())\n    \n    comparaisonP <- comparaisonP %>% filter (Changement %in% input$EcartP)\n    #| \n     #                                          (ifelse(abs(as.numeric(DELTA)) >=input$dynamicDELTA[1] & abs(as.numeric(DELTA)) <= input$dynamicDELTA[2]))\n    \n    comparaisonP <- comparaisonP %>% mutate(VariationCA=ifelse(as.numeric(CA),as.numeric(CA)/as.numeric(CA_Prev)-1,0)) %>%\n      mutate(VariationCA = round(VariationCA*100,2))\n    #o\tEvolution des statuts perdus : ne pas prendre en compte les changements si le statut avant ET le statut après sont 5-, 6- ou 7- \n    # ou si création directement en statut 5-, 6-, 7\n    comparaisonP <- comparaisonP %>% filter(!(STEP %in% c(\"5 - No Follow\",\"6 - En Sommeil\",\" 7 - Perdue\")&\n                                              STEP_Prev %in% c(\"5 - No Follow\",\"6 - En Sommeil\",\" 7 - Perdue\"))) %>%\n      \n      mutate(CA = round(as.numeric(CA),1)) %>%\n      mutate(CA_Prev = round(as.numeric(CA_Prev),1)) %>% \n      mutate(DELTA = round(as.numeric(DELTA),1)) %>%\n      mutate(PROBA= map_chr(PROBA,clean_split_pourcentage)) %>%\n      mutate(PROB= map_chr(PROB,clean_split_pourcentage))\n      #on va regarder toutes les lignes \"mod\" qui ont un Detla en valeur absolue supérieur à 1 k€\n    compPMod <- comparaisonP %>% filter(Changement == \"mod\", abs(DELTA) > input$numDELTA)\n    compAutre <- comparaisonP %>% filter(Changement %in% c(\"+++\",\"---\"))\n    comparaisonP <- rbind(compPMod,compAutre)\n    comparaisonP <- comparaisonP %>% arrange(COMPTE,SUJET)\n    \n    \n    datatable(comparaisonP, \n              escape = FALSE, #permet de mettre du HTML\n              rownames = FALSE,\n              options = list(\n                columnDefs = list(list(className = 'dt-center', targets = 5)),\n                pageLength = 50))  %>%\n      formatStyle(\n        'Changement',\n        target = 'row',\n        backgroundColor = styleEqual(c(\"+++\", \"---\",\"mod\"), c('#99E8D8', '#FEB7B2','#E3F2FD'))\n      ) \n        \n  }) \n  \n  output$DTPIPE = DT::renderDataTable( PipeTableau())\n  \n  output$LogPIPE = DT::renderDataTable( \n   \n    if (is.null(values$LogGoogle)){LogGoogle %>% arrange(desc(DATE))} \n    else {values$LogGoogle %>% arrange(desc(DATE))}\n    \n    )\n  \n  output$LogSTAFF = DT::renderDataTable( \n    \n    if (is.null(values$LogFichier)){LogFichier  %>% arrange(desc(DATE))} \n    else {values$LogFichier  %>% arrange(desc(DATE))}\n    \n  )\n  \n  observeEvent(input$goP\n               \n               , {\n                 if (input$goP == 0) return(NULL)\n                 # Create a Progress object\n                 progress <- shiny::Progress$new(style = 'notification')\n                 progress$set(message = \"Chargement des données PIPE Google\", value = 0)\n                \n                 Pilotage_Actuel <- gs_read(ss=BT_Pilotage, ws = \"Pipe\", skip=4)\n                 \n                 progress$set(message = \"Formatage des données\", value = 30)\n                 Sys.sleep(2)\n                 Pilotage_Actuel <- preparePipe1(Pilotage_Actuel)\n                 Pilotage <- Pilotage %>% select(COMPTE,ASSOCIE, SUJET,STEP,CODE_TOTEM,PROB,CA_BT__N__KE) \n                 #il faut regarder les lignes différentes \n                 \n                 #il faut regarder les lignes différentes \n                 progress$set(message = \"Comparaison avec semaine passée\", value = 80)\n                 resultatDiff <- diff_data(Pilotage,Pilotage_Actuel)\n                 comparaisonP <- as.data.frame(resultatDiff$get_matrix())\n                 Sys.sleep(3)\n                 #on conserve les lignes en écarts\n                 progress$set(message = \"Agrégation des données\", value = 100)\n                 Sys.sleep(0.5)\n                 comparaisonP <- comparePipe(comparaisonP)\n                 progress$set(message = \"Chargement des données\", value = 100)\n                 on.exit(progress$close())\n                 #on ajoute une ligne à la log google\n               \n                 log <- data.frame(DATE=as.character(Sys.time()),TYPE=\"Pipe\",LIGNE=paste(\"Nb lignes: \",LIGNE=nrow(Pilotage_Actuel)))\n                 LogGoogle  <- rbind(LogGoogle , log)\n                 #LogGoogle <- data.frame(DATE=character(),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)\n                 print(log)\n                 save(LogGoogle ,file=\"data/LogGoogle.RData\")\n                 values$LogGoogle <- LogGoogle  \n                 values$comparaisonP <- comparaisonP   \n                 values$Pilotage_Actuel <- Pilotage_Actuel\n               })\n  output$ui <- renderUI({\n    \n    minDelta <- round(abs(as.numeric(min(comparaisonP$DELTA,na.rm = TRUE))),0)\n    maxDelta <- round(abs(as.numeric(max(comparaisonP$DELTA,na.rm = TRUE))),0)\n    max <- max(minDelta,maxDelta)\n    sliderInput(\"dynamicDELTA\", \"Filtre sur le Delta\",\n                min = 0, max = max, value=c(0,max))\n    \n  })\n  \n  output$PipeText <- renderUI({\n    \n    if (is.null(values$LogFichier)) {\n\n      str1 <- paste(\"Données de référence importées le : \", tail(LogFichier[LogFichier$TYPE==\"Pipe\",],1)[1,1],\n            \" Fichier:\", tail(LogFichier[LogFichier$TYPE==\"Pipe\",],1)[1,3] )\n    } else {\n\n      str1 <- paste(\"Données de référence importées le : \", tail(values$LogFichier[values$LogFichier$TYPE==\"Pipe\",],1)[1,1],\n            \" Fichier:\", tail(values$LogFichier[values$LogFichier$TYPE==\"Pipe\",],1)[1,3])\n    }\n    if (is.null(values$LogGoogle)) {\n      \n      str2 <- paste(\"Données de référence importées le : \", tail(LogGoogle[LogGoogle$TYPE==\"Pipe\",],1)[1,1],\n                   \" Fichier:\", tail(LogGoogle[LogGoogle$TYPE==\"Pipe\",],1)[1,3] )\n    } else {\n      \n      str2 <- paste(\"Importation Onglet Pipe Google  : \", tail(values$LogGoogle[values$LogGoogle$TYPE==\"Pipe\",],1)[1,1],\n                   \" Fichier:\", tail(values$LogGoogle[values$LogGoogle$TYPE==\"Pipe\",],1)[1,3])\n    }\n    HTML(paste(\"<DIV>\",paste(str1, str2, sep = '<br/>'),\"</DIV>\"))\n    \n    })\n  \n  output$StaffText <- renderUI({\n    if (is.null(values$LogFichier)) {\n      \n      str1 <- paste(\"Données de référence importées le : \", tail(LogFichier[LogFichier$TYPE==\"Staffing\",],1)[1,1],\n                    \" Fichier:\", tail(LogFichier[LogFichier$TYPE==\"Staffing\",],1)[1,3] )\n    } else {\n      \n      str1 <- paste(\"Données de référence importées le : \", tail(values$LogFichier[values$LogFichier$TYPE==\"Staffing\",],1)[1,1],\n                    \" Fichier:\", tail(values$LogFichier[values$LogFichier$TYPE==\"Staffing\",],1)[1,3])\n    }\n    if (is.null(values$LogGoogle)) {\n      \n      str2 <- paste(\"Données de référence importées le : \", tail(LogGoogle[LogGoogle$TYPE==\"Staffing\",],1)[1,1],\n                    \" Fichier:\", tail(LogGoogle[LogGoogle$TYPE==\"Pipe\",],1)[1,3] )\n    } else {\n      \n      str2 <- paste(\"Importation Google de référence  : \", tail(values$LogGoogle[values$LogGoogle$TYPE==\"Staffing\",],1)[1,1],\n                    \" Fichier:\", tail(values$LogGoogle[values$LogGoogle$TYPE==\"Pipe\",],1)[1,3])\n    }\n    HTML(paste(\"<DIV>\",paste(str1, str2, sep = '<br/>'),\"</DIV>\"))\n  })\n}\n",
    "created" : 1493811669073.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "929991855",
    "id" : "E2585B79",
    "lastKnownWriteTime" : 1498737020,
    "last_content_update" : 1498737020457,
    "path" : "D:/tmp/Ecarts/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}