comparaisonP$SPrev <- as.numeric(remplaceVal(comparaisonP$SPrev ))
comparaisonP <- comparaisonP %>%
mutate(S=ifelse(V1=="+++",as.numeric(SPrev),as.numeric(S))) %>%
mutate(S=ifelse(V1=="mod",
ifelse(grepl("->",V8),S,as.numeric(SPrev)),as.numeric(S))) %>%
mutate(SPrev= ifelse(V1=="+++",0,as.numeric(SPrev)))%>%
mutate(DELTA=ifelse(V1=="+++",S,
ifelse(V1=="---",-SPrev,S - SPrev))) %>% filter(abs(DELTA)>0.5)
SyntheseP <- comparaisonP %>% group_by(V1) %>% summarise(n())
comparaisonP <- comparaisonP %>%
mutate(V4= as.character(V4) ) %>%
mutate(V4= ifelse(grepl("->",V4),V4,paste(V4,"->",V4))) %>%
separate(V4, into = c("V4_1","V4_2"), sep = "->",convert=TRUE)
comparaisonP$V4 <- NULL
comparaisonP$V4_1 <- NULL
comparaisonP <- comparaisonP %>% rename(V4= V4_2 )
comparaisonP <- comparaisonP %>%
mutate(V7= as.character(V7) ) %>%
mutate(V7= ifelse(grepl("->",V7),V7,paste(V7,"->",V7))) %>%
separate(V7, into = c("V7_1","V7_2"), sep = "->",convert=TRUE)
comparaisonP$V7 <- NULL
comparaisonP$V7_1 <- NULL
comparaisonP <- comparaisonP %>% rename(V7= V7_2 ) %>%
mutate(V6= ifelse(grepl("->",V6),as.character(V6),paste(V6,"->",V6))) %>%
separate(V6, into = c("V6_1","V6_2"), sep = "->",convert=TRUE)
#Ecarts sur le staffing
Synthese_TOTALP <- comparaisonP  %>% group_by(V1)  %>% summarise(TOTAL = sum(DELTA,na.rm = FALSE))
dP <-  comparaisonP  %>% filter (V1=="mod", grepl("->",V8))
colnames(comparaisonP)  <-   c('Changement',"COMPTE","ASSOCIE", "SUJET","STEP Prev","STEP","PROB prev","PROB",
"TOTEM","TOTAL_CA","Sem. prev", 'Semaine','DELTA')
# <-  map(comparaisonP,SplitColonne (V7))
comparaisonP <- comparaisonP %>% filter(STEP %in% input$STEP, Changement %in% input$EcartP) %>%
mutate(DELTA=sprintf("%0.2f", round(DELTA, digits = 2)))
datatable(comparaisonP,
escape = FALSE, #permet de mettre du HTML
rownames = FALSE,
options = list(
columnDefs = list(list(className = 'dt-center', targets = 5)),
pageLength = 50))  %>%
formatStyle(
'Changement',
target = 'row',
backgroundColor = styleEqual(c("+++", "---","mod"), c('#99E8D8', '#FEB7B2','#E3F2FD'))
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Pilotage_Actuel
Pilotage_Actuel
runApp()
runApp()
runApp()
runApp()
data.frame(Type,Date,Taille)
LogFichier <- data.frame(Date=as.Date(character()),
Fichier=character(),
Type=character())
LogGoogle <- data.frame(Date=as.Date(character()),
Ongler=character(),
Taille=character())
LogFichier
LogGoogle
save(LogFichier,file="data/LogFichier.RData")
save(LogGoogle,file="data/LogGoogle.RData")
suppressMessages(gs_auth(token = "googlesheets_token.rds", verbose = FALSE))
#Permet de connaitre le User authentifié
gs_user()
# On récupère le lien vers le fichier Pilotage dans R
BT_Pilotage <- gs_title("BT - Pilotage 2017")
TEST <- gs_title("PIPE2017")
tt <- gs_read(ss=BT_Pilotage, ws = "Feuille 1")
str(TEST)
tt <- gs_read(ss=TEST, ws = "Feuille 1")
str(tt)
str(TEST)
View(tt)
head(TEST)
TEST
TEST$version
TEST$sheet_title
Staff_Actuel2
nrow(tt)
now()
runApp()
runApp()
load("data/LogGoogle.RData")
log <- c(now(),"Pipe",paste("Nb lignes: ",nrow(Pilotage_Actuel)))
log
now()
c(now(),"Pipe",paste("Nb lignes: ",nrow(Pilotage_Actuel)))
log
Sys.Date()
Sys.time()
c(Sys.time() ,"Pipe",paste("Nb lignes: ",nrow(Pilotage_Actuel)))
c(22 ,"Pipe",paste("Nb lignes: ",nrow(Pilotage_Actuel)))
c(Sys.time() ,"Pipe",paste("Nb lignes: ",nrow(Pilotage_Actuel)))
LogGoogle
str(LogGoogle)
runApp()
runApp()
LogGoogle
LogGoogle
LogGoogle <- as.dataframe(DATE=as.Date(character()),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
data.frame(DATE=as.Date(character()),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
LogGoogle <- data.frame(DATE=as.Date(character()),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
save(LogGoogle,file="data/LogGoogle.RData")
runApp()
LogGoogle <- data.frame(DATE=as.Date(character()),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
save(LogGoogle,file="data/LogGoogle.RData")
runApp()
LogGoogle
log
c(DATE=as.date(Sys.time()) ,TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel))
c(DATE=as.date(Sys.time()) ,TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel))
)
as.date(Sys.time())
as.Date(Sys.time())
as_datetime(Sys.time())
c(DATE=as_datetime(Sys.time()) ,TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel))
)
LogGoogle <- data.frame(DATE=character(),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
save(LogGoogle,file="data/LogGoogle.RData")
runApp()
log
LogGoogle
values$LogGoogle
runApp()
load("data/LogGoogle.RData")
View(LogGoogle)
View(LogGoogle)
runApp()
values$LogGoogle
rbind(values$LogGoogle , log)
log
values$LogGoogle
rbind(values$LogGoogle , log)
merge(values$LogGoogle , log)
values$LogGoogle
log
colnames(values$LogGoogle) <- c("DATE" ,                 "TYPE",                 "LIGNE")
merge(values$LogGoogle , log)
c(DATE=as.character(Sys.time()),TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel)))
log <- c(DATE=as.character(Sys.time()),TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel)))
str(log)
data.frame(log)
values$LogGoogle
LogGoogle <- data.frame(DATE=character(),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
log <- data.frame(DATE=as.character(Sys.time()),TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel)))
rbind(values$LogGoogle , log)
LogGoogle
rbind(LogGoogle , log)
LogGoogle  <- rbind(LogGoogle , log)
LogGoogle  <- rbind(LogGoogle , log)
LogGoogle
runApp()
runApp()
LogGoogle <- data.frame(DATE=character(),TYPE=character(),LIGNE=character(),stringsAsFactors=FALSE)
save(LogGoogle ,file="data/LogGoogle.RData")
runApp()
load("data/LogGoogle.RData")
log <- data.frame(DATE=as.character(Sys.time()),TYPE="Pipe",LIGNE=paste("Nb lignes: ",LIGNE=nrow(Pilotage_Actuel)))
merge(LogGoogle , log)
log
LogGoogle
rbind(LogGoogle , log)
runApp()
print(log)
runApp()
runApp()
runApp()
runApp()
?file.copy
shiny::runApp()
inFile
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
library(nycflights13)
install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
flights
flights %>% arrange(dep_delay)
flights %>% arrange(desc(dep_delay)
)
flights %>% arrange(air_time)
flights %>% arrange(air_time)
flights %>% arrange(distance)
flights %>% arrange(desc(distance))
flights %>% select(distance,distance)
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
flights %>% select(one_of(vars))
flights %>% select(one_of(vars))
flights %>% select(vars)
vars
one_of(vars)
select(flights, contains("TIME"))
colnames(flights)
select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
select(flights, contains("TIME"))
?nycflights13
airports
airports %>% filter(faa=="EWR")
airports %>% filter(faa=="CDG")
airports %>% filter(faa=="CHA")
airports %>% filter(faa=="ORL")
airports %>% filter(faa=="ORY")
airports %>% select(tzone)
airports %>% select(tzone)
diamonds %>%
filter(between(y, 3, 20))
flights %>%
print(n = 10, width = Inf)
flights
mtcars
str(mtcars)
str(flights)
df <- data.frame(abc = 1, xyz = "a")
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
df
df$x
df$y
df$xyz
df <- tibble(abc = 1, xyz = "a")
df
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
tibble::enframe()
tibble::enframe(df)
tibble::enframe(d('4'))
tibble::enframe(c('4'))
tibble::enframe(c('4',4,44))
shiny::runApp()
runApp()
View(LogGoogle)
View(LogGoogle)
LogGoogle %>% arrange(desc(DATE))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Pilotage <- Pilotage %>% select(COMPTE,ASSOCIE, CODE_TOTEM,SUJET,STEP,PROB,TOTAL_CA_VENDU_N__KE)
Pilotage_Actuel <- preparePipe1(Pilotage_Actuel)
resultatDiff <- diff_data(Pilotage ,Pilotage_Actuel)
comparaisonP <- as.data.frame(resultatDiff$get_matrix())
comparaisonP <- comparaisonP %>% filter(! V4 %in%  c("ZZ_NE RIEN AJOUTER SOUS CETTE LIGNE",NA)) %>%
mutate(V1= as.character(V1))%>%
filter(V1 %in% c("+++","---","->")) %>%
mutate(V1= ifelse(V1=="->","mod",V1)) %>%
filter (V1 == "+++"|V1 == "---"|(V1=="mod" & grepl("->",paste(V5,V6,V8) )))
runApp()
runApp()
View(comparaisonP)
View(comparaisonP)
min(c(0,1))
runApp()
runApp()
values$comparaisonP
comparaisonP
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
df <- data.frame(per=c("20%",".2->.5"))
df
df$per
clean_split_pourcentage(df$per)
clean_split_pourcentage <- function(x) {
split_result <- str_split(x, "->")
split_result <- paste(as.character(as.numeric(fisrt_elem(split_result)) *100) , "%")
split_result <- paste(split_result[1],"->",last_elem(split_result))
split_result
# if (str_detect(x,"->")) {
#   split_result
# } else {paste(as.character(as.numeric(x) *100) , "%")}
}
clean_split_pourcentage(df$per)
str_split("->", ".2->.5")
str_split(".2->.5","->")
str_split(df$per,"->")
df$per
clean_split_pourcentage <- function(x) {
split_result <- str_split(x, "->")
split_result <- paste(as.character(as.numeric(split_result[[1]]) *100) , "%")
split_result <- paste(split_result[1],"->",split_result[2])
split_result
# if (str_detect(x,"->")) {
#   split_result
# } else {paste(as.character(as.numeric(x) *100) , "%")}
}
runApp()
runApp()
install.packages("shiny")
install.packages("shiny")
clean_split_pourcentage <- function(x) {
split_result <- str_split(x, "->")
split_result <- paste(as.character(as.numeric(split_result[[1]]) *100) , "%")
split_result <- paste(split_result[1],"->",split_result[2])
split_result
# if (str_detect(x,"->")) {
#   split_result
# } else {paste(as.character(as.numeric(x) *100) , "%")}
}
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("extrafont")
install.packages("hrbrthemes")
# load the prepared geodata and stat data
load("https://ikashnitsky.github.io/doc/misc/map-hacking/map-hacking.Rdata")
load("https://ikashnitsky.github.io/doc/misc/map-hacking/map-hacking.Rdata")
load("http://ikashnitsky.github.io/doc/misc/map-hacking/map-hacking.Rdata")
library(tidyverse) # version 1.1.1
shiny::runApp()
View(Staffing)
View(Staffing)
Staff_Actuel <- gs_read(ss=BT_Pilotage, ws = "Staffing", skip=15)
View(Staff_Actuel)
View(Staff_Actuel)
colnames(Staff_Actuel)
Staff_Actuel %>% select(Type)
runApp()
runApp()
View(df)
View(df)
colonnes
runApp()
runApp()
View(df)
View(df)
colnames(df)
runApp()
runApp()
runApp()
View(Staffing)
load("data/staffing2017.RData")
View(Staffing)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Staffing
Staffing <- df
save(Staffing,file="data/staffing2017.RData")
runApp()
View(Staffing)
View(Staffing)
runApp()
runApp()
View(Staffing)
Staff_Actuel2
Staff_Actuel
Staff_Actuel2
Staff_Actuel2 <- prepareStaffing2(Staff_Actuel)
runApp()
View(Staffing)
view(Staff_Actuel2)
View(Staff_Actuel2)
My_colonnes
runApp()
runApp()
df
df2
View(Staff_Actuel2)
View(Staff_Actuel)
View(Staff_Actuel2)
runApp()
View(Staffing)
runApp()
runApp()
View(Staffing)
runApp()
View(Staffing)
View(Staffing)
runApp()
View(comparaison)
runApp()
Q
runApp()
runApp()
View(comparaison)
c("l",compareStaff)
c("l",compareStaff)
df
runApp()
runApp()
runApp()
View(comparaison)
runApp()
runApp()
comparaison  %>% group_by(Changement)  %>% summarise(TOTAL = sum(DELTA,na.rm = TRUE))
View(Synthese)
View(comparaison)
resultatDiff <- diff_data(Staffing,Staff_Actuel2)
comparaison <- as.data.frame(resultatDiff$get_matrix())
View(comparaison)
runApp()
runApp()
View(comparaison)
runApp()
runApp()
shiny::runApp()
View(df)
View(df)
View(comparaison)
View(comparaison)
View(df)
runApp()
View(df)
runApp()
View(df)
c('Changement', My_colonnes, "A","B")
colnames(df)  <-  c('Changement', My_colonnes, "A","B")
View(df)
runApp()
View(df)
View(df)
runApp()
Veiw(df)
View(df)
str(df)
View(df)
View(df)
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
View(comparaison)
View(comparaison)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinydashboard)
library(googlesheets) #permet d'acceder à la feuille Google du Staffing
library(purrr) #pour typer les colonnes
library(lubridate)
library(dplyr)
library(stringr)
library(tidyr)#fonction replace_NA
library(daff) #PErmet de voir les différences entre deux data frame
library(ggthemes) #pour les thèmes ggplot
library(ggplot2)
library(readxl)
library(DT)
library(xlsx)
runApp()
suppressMessages(gs_auth(token = "googlesheets_token.rds", verbose = FALSE))
BT_Pilotage <- gs_title("BT - Pilotage 2017")
Pilotage_Actuel <- gs_read(ss=BT_Pilotage, ws = "Pipe", skip=4)
runApp()
## on utilise le token (de façon transparente) pour se connecter
suppressMessages(gs_auth(token = "googlesheets_token.rds", verbose = FALSE))
Staff_Actuel <- gs_read(ss=BT_Pilotage, ws = "Staffing", skip=15)
Pilotage_Actuel <- gs_read(ss=BT_Pilotage, ws = "Pipe", skip=4)
BT_Pilotage <- gs_title("BT - Pilotage 2017")
shiny::runApp()
problems(...)
problems()
install.packages("googlesheets")
shiny::runApp()
runApp()
