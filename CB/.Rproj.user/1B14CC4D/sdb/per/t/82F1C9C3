{
    "collab_server" : "",
    "contents" : "# Fichier Global.R\n\n## app.R ##\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(circlize)\nlibrary(D3partitionR) # permet de générer le treemap dynamique\nlibrary(readxl)\nlibrary(ggthemes)\nlibrary(tidyr)\nlibrary(highcharter) # courbe dynamiques 7\nlibrary(RColorBrewer)\n\n\n# X2016 <- read_excel(\"D:/Data/anil/2017.xlsx\",\n#                       col_types = c(\"text\", \"text\", \"date\",\n#                                    \"text\", \"numeric\", \"text\", \"numeric\",\n#                                   \"numeric\",\"text\"))\n# CB_Data <- X2016\n# # liste_Clients <- unique(CB_Data%>% select(Client) %>% arrange(Client))\n#  save(CB_Data,file=\"CB_Data.Rdata\")\n# #On charge les données\nload(\"CB_Data.Rdata\")\n\nliste_Clients <- unique(CB_Data%>% select(Client) %>% arrange(Client))\nCB_Data <- CB_Data %>% mutate(ANNEE =  factor(ANNEE) )%>%\n  mutate(MOIS =  factor(Mois))\nCB_Mean <- CB_Data %>% filter (Type == \"Nourriture\") %>% group_by(ANNEE,MOIS) %>%\n  summarise(Budget= sum(Montant)) %>%mutate(Budget = mean(Budget))\nliste_type <-  sort(unique(CB_Data$Type))\nliste_annee <-  sort(unique(CB_Data$ANNEE))\nClients  <-  sort(unique(CB_Data$Client))\n# # On regarde pour la nourriture la comparaison par année\n# CB_Data %>% filter (Type == \"Nourriture\") %>% group_by(ANNEE,MOIS) %>%\n#   summarise(Budget= sum(Montant)) %>% \n#   # Overlaid histograms\n#   ggplot(aes(x=MOIS, y=Budget)) +\n#   geom_bar(aes( fill=ANNEE),stat=\"identity\",position=\"dodge\") +\n#   geom_line(data=CB_Mean,aes(group=ANNEE, colour=ANNEE),size=1) + scale_fill_manual(values=c(\"#CC6666\", \"#9999CC\"))\n# \n# #On regarde l'évolution des depenses Bio\n# CB_Data %>% filter (Type == \"Nourriture\") %>% \n#   mutate(BIO = factor(ifelse(Client==\"BIOCOOP\",\"BIO\",\"Non BIO\"))) %>%\n#   group_by(ANNEE, MOIS,BIO) %>% summarise(Budget = sum(Montant)) %>%\n#   ggplot(aes(x=MOIS, y=Budget)) +\n#   geom_bar(aes( fill=BIO),stat=\"identity\") + facet_grid(. ~ ANNEE)\n# \n# #On va faire un Graphe Circulaire avec BIO et Pas BIO pour voir la répartion\n# CB_Data_Nourriture <- CB_Data %>% filter (Type == \"Nourriture\") %>% \n#   mutate(BIO = factor(ifelse(Client %in% c(\"BIOCOOP\",\"BIOCBONDAUMESNIL\"),\"BIO\",\"Non BIO\"))) %>% Select(Categorie,Montant)\n# \n# # CB_Data_Nourriture[grep(\"CASINO\", CB_Data_Nourriture$Client), ]$Client <- \"CASINO\"\n# \n# matrice <- xtabs(Montant ~ Categorie + BIO , na.omit(CB_Data_Nourriture))\n# \n# to <- paste(unique(colnames(matrice)),sep = \",\")\n# from <- paste(rownames(matrice),sep = \",\")\n# mat <- matrix(0, nrow = length(unique(from)), ncol = length(unique(to)))\n# col <- matrix(0, nrow = length(unique(from)), ncol = length(unique(to)))\n# \n# rownames(mat) = unique(from)\n# colnames(mat) = unique(to)\n# noms <- c(from,to)\n# group.colors <- c(\"Data\" = \"#60D394\", \"Digital Innovation\" = \"#AAF683\",\"ETM\" =\"#FFD97D\", \"Transformation\" = \"#FF9B85\", \"PocLab\" = \"#ED7D3A\")\n# \n# # names(gripCol) <- noms\n# for (i in 1:length(from)) {\n#   \n#   for (j in 1:length(to)) { \n#     mat[i,j] <- matrice[i,j]\n#     col[,j] <- group.colors[i]\n#     \n#   }\n# }\n# \n# \n# #= = = = = initialize = = = = = #\n# par(mar = c(1, 1, 1, 1))\n# circos.par(gap.degree = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))\n# gripCol <- c(rep(\"#E69F00\",length(unique(from))),rep(\"#56B4E9\",length(unique(to))))\n# # = = = = = plot 'circlize' = = = = = #\n# c <- chordDiagram(mat, annotationTrack = \"grid\", transparency = 0.8,\n#                   preAllocateTracks = list(track.height = 0.1),\n#                   col = matrix(rainbow(nrow(mat)),nrow=nrow(mat),ncol=ncol(mat)),\n#                   \n#                   grid.col=gripCol)\n# \n# # = = = = = add labels = = = = = #\n# circos.trackPlotRegion(track.index = 1,\n#                        panel.fun = function(x, y) {\n#                          xrange = get.cell.meta.data(\"xlim\")\n#                          labels = get.cell.meta.data(\"sector.index\")\n#                          circos.text(mean(xrange), 0,\n#                                      labels = labels, niceFacing = TRUE)\n#                        },\n#                        bg.border = NA)\n# circos.clear()\n# print(c)\n# \n# \n# \n# \n# \n#   CB_Data_Nourriture <- CB_Data %>% filter (Type == \"Nourriture\", ANNEE==\"2016\") %>% \n#     mutate(BIO = factor(ifelse(Client %in% c(\"BIOCOOP\",\"BIOCBONDAUMESNIL\"),\"BIO\",\"Non BIO\"))) %>% select(ANNEE, MOIS, Client,Categorie,Montant, BIO)\n#   seq_Asso <- CB_Data_Nourriture %>% \n#     group_by(ANNEE, MOIS, BIO,Categorie,Client) %>%\n#     summarize(CA = sum(Montant,na.rm=TRUE)) %>% mutate (DEBUT = \"Dépenses 2016\")\n#   \n#   \n#   \n#   nom <- list()\n#   nb_1 <- length(seq_Asso$ANNEE)\n#   \n#   for (i in 1:nb_1) {\n#     nom[[i]] <- c(seq_Asso$DEBUT[i],seq_Asso$Client[i] ,seq_Asso$Categorie[i],as.numeric(as.character(seq_Asso$MOIS[i])),\n#                   paste(seq_Asso$Client[i],seq_Asso$CA[i],sep=\": \"))\n#     \n#     \n#   }\n#   CA_TOTAL <- c(seq_Asso$CA)\n#   combo_output <- list(path = nom, value = CA_TOTAL)\n#   \n#   \n#   D3partitionR( data=list(path=combo_output$path,value=combo_output$value),type=\"treeMap\",\n#                 tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),\n#                 width = 1200,height = 600\n#                 )\n#  \n\n\nchooserInput <- function(inputId, leftLabel, rightLabel, leftChoices, rightChoices,\n                         size = 5, multiple = FALSE) {\n  \n  leftChoices <- lapply(leftChoices, tags$option)\n  rightChoices <- lapply(rightChoices, tags$option)\n  \n  if (multiple)\n    multiple <- \"multiple\"\n  else\n    multiple <- NULL\n  \n  tagList(\n    singleton(tags$head(\n      tags$script(src=\"chooser-binding.js\"),\n      tags$style(type=\"text/css\",\n                 HTML(\".chooser-container { display: inline-block; }\")\n      )\n    )),\n    div(id=inputId, class=\"chooser\",\n        div(class=\"chooser-container chooser-left-container\",\n            tags$select(class=\"left\", size=size, multiple=multiple, leftChoices)\n        ),\n        div(class=\"chooser-container chooser-center-container\",\n            icon(\"arrow-circle-o-right\", \"right-arrow fa-3x\"),\n            tags$br(),\n            icon(\"arrow-circle-o-left\", \"left-arrow fa-3x\")\n        ),\n        div(class=\"chooser-container chooser-right-container\",\n            tags$select(class=\"right\", size=size, multiple=multiple, rightChoices)\n        )\n    )\n  )\n}\n\nregisterInputHandler(\"shinyjsexamples.chooser\", function(data, ...) {\n  if (is.null(data))\n    NULL\n  else\n    list(left=as.character(data$left), right=as.character(data$right))\n}, force = TRUE)\n\n\n\n\n##' Plot flower plot\n##' \n##' @param lengths length of petal outward to extent of circle\n##' @param widths width of petal\n##' @param labels petal label outside of circel\n##' @param disk relative radius of a central donut hole\n##' @param max.length ...\n##' @param center center value\n##' @param main middle value\n##' @param fill.col fill colors\n##' @param plot.outline size of plot outline\n##' @param label.offset label offset\n##' @param xlim formatting\n##' @param ylim formatting\n##' @param uin formatting\n##' @param tol formatting\n##' @param cex size of middle text\n##' @param bty formatting\n##' @param lty line thickness\n##' @param label.col label color\n##' @param label.font label font\n##' @param label.cex size of label text\n##' @return Generate something akin to a rose plot in which the width and\n##' length of each petal are directly specified by the user. Or to put it\n##' differently, this is somewhat like a pie chart in which the radius of each\n##' wedge is allowed to vary (along with the angular width, as pie charts do).\n##' As an additional enhancement, one can specify a central disk of arbitrary\n##' radius (from 0 to 1, assuming that the plot itself is scaled to the unit\n##' circle), in which case the petal heights are always measured from the edge\n##' of the disk rather than the center of the circle; if desired, text can be\n##' added in the center.\n##' \n##' Although this kind of plot may already be well known in some circles (no\n##' pun intended), I haven't seen it clearly defined or labeled anywhere, so\n##' I'm anointing it an 'aster' plot because its component parts are\n##' reminiscent of composite flower morphology.\n##' \n##' The 'lengths' dictates how far out each petal extends, 'widths' dictates\n##' the (angular) width of each petal, and 'disk' gives the relative radius of\n##' a central donut hole. If no widths are provided, all petals will have equal\n##' widths. Additional function arguments can also control whether petals are\n##' labeled, whether the petal lengths are rescaled to the maximum score or to\n##' a user-input score, whether spokes delineating each petal are extended to\n##' an outer circle, and more. I also wrote a quick convenience wrapper for\n##' creating a legend plot.\n##' \n##' Note that the function here is a repurposed and very heavily modified\n##' version of the windrose() function contained in the 'circular' package,\n##' although sufficiently rewritten so as not to depend on any functionality in\n##' that package.\n##' @keywords layers_navigation\n##' @author Created by Jim Regetz. Slight modifications by Darren Hardy and Ben Best.\n##' @examples\n##' \n##' \\dontrun{\n##' # generate some fake data\n##' set.seed(1)\n##' scores <- sample(1:10)\n##' weights <- sample(1:10)\n##' labels <- paste(LETTERS[1:10], \"X\", sep=\"\")\n##' \n##' # do some plots\n##' par(mfrow=c(2,2), xpd=NA)\n##' aster(lengths=scores, widths=weights, disk=0, main=\"Example 1\",\n##'     plot.outline=FALSE)\n##' aster(lengths=scores, widths=weights, labels=labels, main=\"Example 2\",\n##'     lty=2, fill.col=\"gray\", plot.outline=FALSE)\n##' aster.legend(labels=labels, widths=weights)\n##' aster(lengths=scores, widths=weights, disk=0.5, main=\"Example 3\",\n##'     center=\"Hello world\")\n##' }\n##' @import ggplot2\n##' @export\nPlotFlower = function (lengths, widths, labels, disk=0.5, max.length,\n                       center=NULL, main=NULL, fill.col=NULL, plot.outline=TRUE,\n                       label.offset=0.15, xlim=c(-1.2, 1.2), ylim=c(-1.2, 1.2), uin=NULL,\n                       tol=0.04, cex=1, bty=\"n\", lty=1, \n                       label.col='black', label.font=3, label.cex=NULL, ...) {\n  \n  # Custom R function to generate something akin to a rose plot in which\n  # the width and length of each petal are directly specified by the user.\n  # Or to put it differently, this is somewhat like a pie chart in which\n  # the radius of each wedge is allowed to vary (along with the angular\n  # width, as pie charts do). As an additional enhancement, one can\n  # specify a central disk of arbitrary radius (from 0 to 1, assuming that\n  # the plot itself is scaled to the unit circle), in which case the petal\n  # heights are always measured from the edge of the disk rather than the\n  # center of the circle; if desired, text can be added in the center.\n  #\n  # Although this kind of plot may already be well known in some circles\n  # (no pun intended), I haven't seen it clearly defined or labeled\n  # anywhere, so I'm anointing it an 'aster' plot because its component\n  # parts are reminiscent of composite flower morphology.\n  #\n  # As coded below, 'lengths' dictates how far out each petal extends,\n  # 'widths' dictates the (angular) width of each petal, and 'disk' gives\n  # the relative radius of a central donut hole. If no widths are\n  # provided, all petals will have equal widths. Additional function\n  # arguments can also control whether petals are labeled, whether the\n  # petal lengths are rescaled to the maximum score or to a user-input\n  # score, whether spokes delineating each petal are extended to an outer\n  # circle, and more. I also wrote a quick convenience wrapper for\n  # creating a legend plot.\n  #\n  # Note that the function here is a repurposed and very heavily modified\n  # version of the windrose() function contained in the 'circular'\n  # package, although sufficiently rewritten so as not to depend on any\n  # functionality in that package.\n  #\n  # Example invocations appear below.\n  #\n  # Jim Regetz\n  # NCEAS\n  # Created on 13-Sept-2011\n  #\n  # Mods by Ben Best and Darren Hardy\n  # December 2011\n  #  - fix blank hairlines between circles and polygons in pedals\n  #  - accepts more labeling and title options\n  #  - accepts data frames for lengths\n  #\n  # Example plots...\n  #\n  # # generate some fake data\n  # set.seed(1)\n  # scores <- sample(1:10)\n  # weights <- sample(1:10)\n  # labels <- paste(LETTERS[1:10], \"X\", sep=\"\")\n  # \n  # # do some plots\n  # png(file=\"aster-plots.png\", height=600, width=600)\n  # par(mfrow=c(2,2), xpd=NA)\n  # aster(lengths=scores, widths=weights, disk=0, main=\"Example 1\",\n  #     plot.outline=FALSE)\n  # aster(lengths=scores, widths=weights, labels=labels, main=\"Example 2\",\n  #     lty=2, fill.col=\"gray\", plot.outline=FALSE)\n  # aster.legend(labels=labels, widths=weights)\n  # aster(lengths=scores, widths=weights, disk=0.5, main=\"Example 3\",\n  #     center=\"Hello world\")\n  # dev.off()\n  # main aster function definition\n  \n  if (is.data.frame(lengths)) {\n    lengths <- as.numeric(lengths)\n  }\n  n.petals <- length(lengths)\n  if (missing(widths)) {\n    widths <- rep(1, n.petals)\n  }\n  if (missing(max.length)) {\n    max.length <- max(lengths)\n  }\n  if (missing(labels)) {\n    labels <- names(lengths)\n  }\n  if (missing(label.cex)) {\n    label.cex <- 0.7 * cex\n  }  \n  \n  # determine radius of each petal\n  if (disk < 0 || 1 < disk) {\n    stop(\"disk radius must be between 0 and 1\")\n  }\n  radii <- disk + (1-disk) * lengths/max.length\n  \n  # define inner function for drawing circles\n  # (from original windrose function)\n  circles <- function(rad, sector=c(0, 2 * pi), lty=2,\n                      col=\"white\", border=NA, fill=FALSE) {\n    values <- seq(sector[1], sector[2], by=(sector[2] - sector[1])/360)\n    x <- rad * cos(values)\n    y <- rad * sin(values)\n    if (fill) {\n      polygon(x, y, xpd=FALSE, lty=lty, col=col, border=border)\n    }\n    lines(x, y, col=1, lty=lty)\n  }\n  \n  # lots of low-level positional details\n  # (from original windrose function)\n  op <- par(mar=c(1, 1, 2, 1))\n  mai <- par(\"mai\")\n  on.exit(par(op))\n  midx <- 0.5 * (xlim[2] + xlim[1])\n  xlim <- midx + (1 + tol) * 0.5 * c(-1, 1) * (xlim[2] - xlim[1])\n  midy <- 0.5 * (ylim[2] + ylim[1])\n  ylim <- midy + (1 + tol) * 0.5 * c(-1, 1) * (ylim[2] - ylim[1])\n  oldpin <- par(\"pin\") - c(mai[2] + mai[4], mai[1] + mai[3])\n  xuin <- oxuin <- oldpin[1]/diff(xlim)\n  yuin <- oyuin <- oldpin[2]/diff(ylim)\n  if (is.null(uin)) {\n    if (yuin > xuin) {\n      xuin <- yuin\n    } else {\n      yuin <- xuin\n    }\n  } else {\n    if (length(uin) == 1)\n      uin <- uin * c(1, 1)\n    if (any(c(xuin, yuin) < uin))\n      stop(\"uin is too large to fit plot in\")\n    xuin <- uin[1]\n    yuin <- uin[2]\n  }\n  xlim <- midx + oxuin/xuin * c(-1, 1) * diff(xlim) * 0.5\n  ylim <- midy + oyuin/yuin * c(-1, 1) * diff(ylim) * 0.5\n  \n  # generate breaks (petal boundaries) based on the widths\n  breaks <- (2*pi*c(0, cumsum(widths))/sum(widths))[-(n.petals+1)]\n  breaks <- c(breaks, 2 * pi)\n  plot(c(-1.2, 1.2), c(-1.2, 1.2), xlab=\"\", ylab=\"\", main=\"\",\n       xaxt=\"n\", yaxt=\"n\", pch=\" \", xlim=xlim, ylim=ylim,\n       bty=bty, ...)\n  title(main=main, ...)\n  \n  # plot full petal outlines\n  if (plot.outline) {\n    # note: go to n.petals not n.breaks because we the last break is\n    # the same as the first\n    for (i in 1:n.petals) {\n      lines(c(0, cos(breaks[i])), c(0, sin(breaks[i])), lty=lty)\n    }\n    circles(1, lty=lty)\n  }\n  # plot the petals themselves\n  if (is.null(fill.col)) {\n    fill.col <- rainbow(n.petals)\n  }\n  fill.col <- rep(fill.col, length.out=n.petals)\n  for (i in 1:n.petals) {\n    w1 <- breaks[i]\n    w2 <- breaks[i + 1]\n    rad <- radii[i]\n    xx <- rad * c(0, cos(w1), cos(w2), 0)\n    yy <- rad * c(0, sin(w1), sin(w2), 0)\n    polygon(xx, yy, xpd=FALSE, col=fill.col[i], border=fill.col[i])\n    lines(xx[1:2], yy[1:2])\n    lines(xx[3:4], yy[3:4])\n    circles(rad=rad, sector=c(w1, w2), fill=TRUE,\n            lty=1, col=fill.col[i], border=fill.col[i])\n  }\n  # plot petal labels, if given\n  if (!is.null(labels)) {\n    if (plot.outline) {\n      height <- label.offset + rep(1, n.petals)\n    } else {\n      height <- label.offset + radii\n    }\n    mids <- breaks[1:n.petals] + diff(breaks)/2\n    for (i in 1:n.petals) {\n      text(height[i] * cos(mids[i]), height[i] * sin(mids[i]),\n           labels=labels[i], cex=label.cex, \n           font=label.font, col=label.col)\n    }\n  }\n  \n  # add disk, if desired, with optional text in the middle\n  if (0 < disk) {\n    circles(disk, fill=TRUE, lty=1)\n  }\n  if (!is.null(center)) {\n    text(0, 0, labels=center, font=2, cex=2.2*cex)\n  }\n  invisible(NULL)\n}",
    "created" : 1491390156648.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1974380542",
    "id" : "82F1C9C3",
    "lastKnownWriteTime" : 1503314294,
    "last_content_update" : 1503314294475,
    "path" : "D:/tmp/CB/global.R",
    "project_path" : "global.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}