shiny::runApp()
load("D:/tmp/DB_V1_LP/data/pilotage_data.RData")
runApp()
require(visNetwork)
require(shiny)
library(shiny)
library(ggplot2)
library(shinyAce)
library(dplyr)
library(rpart)
runApp()
data <- pilotage_data %>% filter (STEP %in% c("3 - Emise" ), WEEK == max(WEEK) ) %>%
select(COMPTE,SUJET,CA_BT__N__KE, STEP)
View(data)
nbLine <- nrow(data)
nodesMissions <- data.frame(id=1:nrow(data), label = data$SUJET, title=paste(data$SUJET,"<br>",data$CA_BT__N__KE),
group = data$COMPTE)
View(nodesMissions)
nbComptes <- nrow(data %>% distinct(COMPTE))
debut <- nrow(data)+1
fin <- debut + nbComptes -1
grp <- data %>% distinct(COMPTE)
nodesComptes <- data.frame(id=debut:fin,label = grp$COMPTE,title = grp$COMPTE, group=grp$COMPTE)
debut <- nrow(data)+1 + nbComptes
fin <- debut + 1
nodesStep <- data.frame(id=debut:fin,label =  c("2 - A émettre","3 - Emise"),
title=c("2 - A émettre","3 - Emise"),group= c("2 - A émettre", "3 - Emise" ))
#lien entre comptes et Step
nodes <- rbind(nodesMissions,nodesComptes,nodesStep)
data <- data%>% mutate(noeud = ifelse(STEP=="2 - A émettre",nbLine+1,nbLine+2))
View(nodes)
liens <- merge(x = data, y = nodesComptes, by.x=c("COMPTE"),      by.y=c("label"), all.x = TRUE)
View(liens)
data.frame(from = 1:nrow(data),
to = liens$id)
edges <- data.frame(from = 1:nrow(data),
to = liens$id)
fin <- debut + nbComptes -1
grp <- data %>% distinct(COMPTE)
edgesBis <- data.frame(from = debut:fin,
to = liens$id)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
load("D:/tmp/DB_V1_LP/data/pilotage_data.RData")
runApp()
data <- pilotage_data %>% filter (STEP %in% c("3 - Emise" ), WEEK == max(WEEK) ) %>%
select(COMPTE,SUJET,CA_BT__N__KE, STEP)
nbLine <- nrow(data)
nodesMissions <- data.frame(id=1:nrow(data), label = data$SUJET, title=paste(data$SUJET,"<br>",data$CA_BT__N__KE),
group = data$COMPTE)
nbComptes <- nrow(data %>% distinct(COMPTE))
debut <- nrow(data)+1
fin <- debut + nbComptes -1
grp <- data %>% distinct(COMPTE)
nodesComptes <- data.frame(id=debut:fin,label = grp$COMPTE,title = grp$COMPTE, group=grp$COMPTE)
debut <- nrow(data)+1 + nbComptes
fin <- debut + 1
nodesStep <- data.frame(id=debut:fin,label =  c("2 - A émettre","3 - Emise"),
title=c("2 - A émettre","3 - Emise"),group= c("2 - A émettre", "3 - Emise" ))
#lien entre comptes et Step
nodes <- rbind(nodesMissions,nodesComptes,nodesStep)
data <- data%>% mutate(noeud = ifelse(STEP=="2 - A émettre",nbLine+1,nbLine+2))
liens <- merge(x = data, y = nodesComptes, by.x=c("COMPTE"),      by.y=c("label"), all.x = TRUE)
edges <- data.frame(from = 1:nrow(data),
to = liens$id)
library(shiny)
library(ggplot2)
library(shinyAce)
library(dplyr)
library(rpart)
runApp()
data <- pilotage_data %>% filter (STEP %in% c("3 - Emise" ), WEEK == max(WEEK) ) %>%
select(COMPTE,SUJET,CA_BT__N__KE, STEP)
nbLine <- nrow(data)
nodesMissions <- data.frame(id=1:nrow(data), label = data$SUJET, title=paste(data$SUJET,"<br>",data$CA_BT__N__KE),
group = data$COMPTE)
nbComptes <- nrow(data %>% distinct(COMPTE))
debut <- nrow(data)+1
fin <- debut + nbComptes -1
grp <- data %>% distinct(COMPTE)
nodesComptes <- data.frame(id=debut:fin,label = grp$COMPTE,title = grp$COMPTE, group=grp$COMPTE)
debut <- nrow(data)+1 + nbComptes
fin <- debut + 1
nodesStep <- data.frame(id=debut:fin,label =  c("2 - A émettre","3 - Emise"),
title=c("2 - A émettre","3 - Emise"),group= c("2 - A émettre", "3 - Emise" ))
#lien entre comptes et Step
nodes <- rbind(nodesMissions,nodesComptes,nodesStep)
data <- data%>% mutate(noeud = ifelse(STEP=="2 - A émettre",nbLine+1,nbLine+2))
liens <- merge(x = data, y = nodesComptes, by.x=c("COMPTE"),      by.y=c("label"), all.x = TRUE)
edges <- data.frame(from = 1:nrow(data),
to = liens$id)
fin <- debut + nbComptes -1
grp <- data %>% distinct(COMPTE)
runApp()
require(shiny)
require(visNetwork)
server <- function(input, output, session) {
nodes <- data.frame(id = 1:3,
name = c("first", "second", "third"),
extra = c("info1", "info2", "info3"))
edges <- data.frame(from = c(1,2), to = c(1,3), id= 1:2)
output$network_proxy <- renderVisNetwork({
visNetwork(nodes, edges)
})
output$nodes_data_from_shiny <- renderDataTable({
if(!is.null(input$network_proxy_nodes)){
info <- data.frame(matrix(unlist(input$network_proxy_nodes), ncol = dim(nodes)[1],
byrow=T),stringsAsFactors=FALSE)
colnames(info) <- colnames(nodes)
info
}
})
output$edges_data_from_shiny <- renderPrint({
if(!is.null(input$network_proxy_edges)){
input$network_proxy_edges
}
})
observeEvent(input$getNodes,{
visNetworkProxy("network_proxy") %>%
visGetNodes()
})
observeEvent(input$getEdges, {
visNetworkProxy("network_proxy") %>%
visGetEdges()
})
}
ui <- fluidPage(
visNetworkOutput("network_proxy", height = "400px"),
verbatimTextOutput("edges_data_from_shiny"),
dataTableOutput("nodes_data_from_shiny"),
actionButton("getEdges", "Edges"),
actionButton("getNodes", "Nodes")
)
shinyApp(ui = ui, server = server)
runApp()
repeat(1,1)
repeat("1",1)
View(nodes)
View(nodes)
reps(50,20)
rep(50,20)
runApp()
