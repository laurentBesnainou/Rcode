{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the\n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\n\n# Define server logic\nshinyServer(function(input, output, session) {\n  \n  \n  output$hcontainer <- renderHighchart({\n    p2015 <- pilotage_2015  %>% mutate(YEAR=2015) %>%\n      rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                             CA_BT,\n                                             OFFRE_PRINCIPALE,\n                                             WEEK,\n                                             YEAR)\n    p2016 <- pilotage_2016  %>% mutate(YEAR=2016) %>%\n      rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                             CA_BT,\n                                             OFFRE_PRINCIPALE,\n                                             WEEK,\n                                             YEAR)\n    \n    p2017 <- pilotage_2017  %>% mutate(YEAR=2017) %>%\n      rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                             CA_BT,\n                                             OFFRE_PRINCIPALE,\n                                            WEEK,YEAR)\n    p2017_Objectif <- data.frame(WEEK=c(1:52),\n                              CA=objectif_Vente)\n\n    pilotage_tot <- p2017\n    couleur <- c('#57B8FF')\n    if (2015 %in% input$Courbes) {\n      pilotage_tot <- bind_rows(p2015,p2017)\n      couleur <- c('#71A33C', '#57B8FF')\n    }\n    if (2016 %in% input$Courbes) {\n      pilotage_tot <- bind_rows(p2016,p2017)\n      couleur <- c( '#FF5151', '#57B8FF')\n    }\n    if (sum(c(2015,2016) %in% input$Courbes)==2) {\n      pilotage_tot <- bind_rows(p2015,p2016,p2017)\n      couleur <- c( '#71A33C','#FF5151', '#57B8FF')\n    }\n \n    # On va aouter une régression lineaire sur l'année 2017\n    p2017_lm <- p2017  %>% \n      mutate(YEAR = factor(YEAR)) %>% \n      filter(STEP == \"4 - Gagnée\") %>% \n      group_by(YEAR, WEEK) %>% \n      summarise(CA_TOT = sum(CA_BT, na.rm = TRUE)) %>% ungroup() %>% select(WEEK,CA_TOT)\n    \n    # regression lineaire CA en fonction de la semaine ns pour regression polinomyale\n    sim1_mod <- glm(CA_TOT ~ ns(WEEK, 5)  , data = p2017_lm)\n    \n    p2017_lm <- p2017_lm %>% \n      add_residuals(sim1_mod)\n    \n    ggplot(p2017_lm, aes(resid)) + \n      geom_freqpoly(binwidth = 0.5)\n    ggplot(p2017_lm, aes(CA_TOT , resid)) + \n      geom_ref_line(h = 0) +\n      geom_point() \n    \n    grid <- p2017_lm %>%\n      data_grid(WEEK) \n    grid <- data.frame(WEEK=c(1:52))\n    #on ajoute des predictions avec une regression lineaire\n    grid <- grid %>% \n      add_predictions(sim1_mod) \n\n    \n    plot_chat <- pilotage_tot %>% \n      mutate(YEAR = factor(YEAR)) %>% \n      filter(STEP == \"4 - Gagnée\") %>% \n      group_by(YEAR, WEEK) %>% \n      summarise(CA_TOT = sum(CA_BT, na.rm = TRUE))\n    \n    hc <-  highchart() %>% \n      \n      hc_add_series (p2017_Objectif, name = \"Objectif 2017\",lineWidth = 1, type = \"line\", marker = list(enabled = FALSE),\n                     color= 'orange', hcaes(x = WEEK, y = CA) ) %>% \n      hc_add_series (plot_chat, type = \"line\",marker = list(enabled = FALSE),\n                     color= couleur, hcaes(x = WEEK, y = CA_TOT, group = YEAR) ) %>% \n      hc_add_series (grid, name = \"Simulation 2017\",lineWidth = 1, type = \"line\", marker = list(enabled = FALSE),\n                      color= 'red', hcaes(x = WEEK, y = pred) ) %>% \n      hc_subtitle(text = \"Comparaison du CA\") %>%\n      hc_title(text = \"Evolution du CA par semaine\",\n               style = list(fontWeight = \"bold\")) %>% \n      hc_tooltip(crosshairs = TRUE, valueDecimals = 0,\n                 pointFormat = \"Semaine: {point.x} <br> CA e keuros: {point.y}\") %>%\n      hc_credits(enabled = TRUE, \n                 text = \"Sources: COBIZ 2015 - 2017\",\n                 style = list(fontSize = \"10px\")) %>%\n      hc_yAxis(title = list(text = \"Chiffre d'affaire\"),\n               labels = list(format = \"{value}\")) %>% \n      hc_xAxis(title = list(text = \"Numéro de semaine\"),\n               labels = list(format = \"{value}\")) %>% \n      hc_exporting(enabled = TRUE) # enable exporting option\n    \n    # # Determine theme and apply to highchart ------------------------\n    theme <-hc_theme_economist()\n    hc <- hc %>%\n      hc_add_theme(theme)\n    \n    hc\n  })\n  \n  output$hcPie1 <- renderHighchart({ \n  df <- pilotage_data %>% \n    filter(STEP == \"4 - Gagnée\",WEEK==max(pilotage_data$WEEK)) %>% \n    group_by(OFFRE_PRINCIPALE) %>%\n    summarise(Montant= round(sum(TOTAL_CA_VENDU_N__KE,na.rm =TRUE ),digits=0)) %>%\n    select(OFFRE_PRINCIPALE,Montant)\n  Total <- sum(df$Montant)\n  hc <-  highchart() %>% \n    hc_chart(type = \"pie\") %>% \n    hc_add_series_labels_values(name=\"Vente\", labels = df$OFFRE_PRINCIPALE, values = df$Montant) %>%\n   \n    hc_subtitle(text = \"Vente BT en k€\") %>%\n    hc_title(text = paste(\"Situtaiton à date en k€: \",Total,sep=\" \"),\n             style = list(fontWeight = \"bold\")) \n  \n  # # Determine theme and apply to highchart ------------------------\n  theme <-hc_theme_economist()\n  hc <- hc %>%\n    hc_add_theme(theme)\n  \n  hc\n})\n  \n  \n  output$hcPie2 <- renderHighchart({ \n    df <- pilotage_data %>% \n      filter(STEP == \"4 - Gagnée\",WEEK==max(pilotage_data$WEEK)) %>% \n      group_by(OFFRE_PRINCIPALE) %>%\n      summarise(Montant= round(sum(CA_BT_PONDERE__N__KE,na.rm =TRUE ),digits=0)) %>%\n      select(OFFRE_PRINCIPALE,Montant)\n    Total <- sum(df$Montant)\n    hc <-  highchart() %>% \n      hc_chart(type = \"pie\") %>% \n      hc_add_series_labels_values(name=\"Vente\", labels = df$OFFRE_PRINCIPALE, values = df$Montant) %>%\n      \n      hc_subtitle(text = \"Production BT en k€\") %>%\n      hc_title(text = paste(\"Situtaiton à date en k€: \",Total,sep=\" \"),\n               style = list(fontWeight = \"bold\")) \n    \n    # # Determine theme and apply to highchart ------------------------\n    theme <-hc_theme_economist()\n    hc <- hc %>%\n      hc_add_theme(theme)\n    \n    hc\n  })\n  \n  \n  output$hcPie3 <- renderHighchart({ \n    \n    df <- pilotage_data %>% \n      filter(STEP %in% c(\"0 - A qualifier\", \"1 - qualifiée\", \"1 - Qualifiée\", \"2 - A émettre\", \"3 - Emise 4\"),WEEK==max(pilotage_data$WEEK)) %>% \n      group_by(OFFRE_PRINCIPALE) %>%\n      summarise(Montant= round(sum(CA_BT_PONDERE__N__KE,na.rm =TRUE ),digits=0))\n    \n   \n    Total <- sum(df$Montant)\n    hc <-  highchart() %>% \n      hc_chart(type = \"pie\") %>% \n      hc_add_series_labels_values(name=\"Vente\", labels = df$OFFRE_PRINCIPALE, values = df$Montant) %>%\n      \n      hc_subtitle(text = \"Pipe en k€\") %>%\n      hc_title(text = paste(\"Situtaiton à date en k€: \",Total,sep=\" \"),\n               style = list(fontWeight = \"bold\")) \n    \n    # # Determine theme and apply to highchart ------------------------\n    theme <-hc_theme_economist()\n    hc <- hc %>%\n      hc_add_theme(theme)\n    \n    hc\n  })\n  \n  \n  output$myGauge <- renderHighchart({\n    \n    #on va calculer le nb de j pour le mois en cours\n    Mois <- month(today())\n    NomMois <- c(\"JANV\",\"FEV\",\"MAR\",\"AVR\",\"MAI\",\"JUIN\",\"JUIL\",\"AOUT\",\"SEPT\",\"OCT\",\"NOV\",\"DEC\")\n    MoisActuel <- NomMois[Mois]\n    #nombr de jours fermes au global\n    Ferme <- nbFERME %>% filter (MOIS == MoisActuel) %>% summarise(total=sum(nb))\n    FermePrevi  <- nbPREVI %>% filter (MOIS == MoisActuel) %>% summarise(total=sum(nb))\n    #nombre de jours global possible\n    Possible <- nbEffecti %>% filter (MOIS == MoisActuel) %>% summarise(total=sum(volume))\n    #nombre de jours de congès\n    conges <- nbCONGES  %>% filter (MOIS == MoisActuel) %>% summarise(total=sum(nb))\n    #calcul\n    PourcentFerme <- Ferme$total/(Possible$total-conges$total) *100\n    PourcentFermePrevi <- (Ferme$total+FermePrevi$total)/(Possible$total-conges$total) *100\n    highchart() %>% \n      hc_chart(type = \"solidgauge\",backgroundColor = \"#F0F0F0\",marginTop = 40) %>% \n      hc_title(text = paste(\"Taux du mois en cours\", MoisActuel, sep= \": \"),style = list(fontSize = \"24px\")) %>% \n      hc_tooltip(borderWidth = 1,backgroundColor = 'none',shadow = TRUE,style = list(fontSize = '16px'),\n                 pointFormat = '{series.name}<br><span style=\"font-size:2em; color: {point.color}; font-weight: bold\">{point.y}%</span>',\n                 positioner = JS(\"function (labelWidth, labelHeight) {return {x: labelWidth ,y: 180};}\")) %>% \n      hc_pane(startAngle = 0,endAngle = 360,\n              background = list(\n                list(outerRadius = '112%',innerRadius = '88%',backgroundColor = JS(\"Highcharts.Color('#F62366').setOpacity(0.1).get()\"),borderWidth =  0),\n                list(outerRadius = '87%',innerRadius = '63%',backgroundColor = JS(\"Highcharts.Color('#9DFF02').setOpacity(0.1).get()\"),borderWidth = 0),\n                list(outerRadius = '62%',innerRadius =  '20%',backgroundColor = JS(\"Highcharts.Color('#0CCDD6').setOpacity(0.1).get()\"),borderWidth = 0))) %>% \n      hc_yAxis(min = 0,max = 100,lineWidth = 0,tickPositions = list()) %>% \n      hc_plotOptions(solidgauge = list(borderWidth = '25px',dataLabels = list(enabled = FALSE),linecap = 'round',stickyTracking = TRUE)) %>% \n      hc_add_series(name = \"Objectif\",borderColor = \"red\",data = list(list(color = \"red\",radius = \"100%\",innerRadius = \"100%\",y = 80))) %>% \n      hc_add_series(name = \"Ferme + Prévi\",borderColor = \"#4877FE\",data = list(list(color = \"#4877FE\",radius = \"75%\",innerRadius = \"75%\",y = round(PourcentFermePrevi,digits=0)))) %>% \n      hc_add_series(name = \"Ferme\",borderColor = \"#00B2FF\",data = list(list(color =  \"#00B2FF\",radius = \"50%\",innerRadius = \"20%\",y = round(PourcentFerme,digits=0))))\n  })\n  \n  output$CA_plot_Vente <- renderPlot({\n   \n    ## On regarde pour le mois en cours la répartition des dépenses en comparaison avec 2015 et 2016\n    \n    data <- pilotage_data %>% \n      filter(STEP == \"4 - Gagnée\",WEEK==max(pilotage_data$WEEK)) %>% \n      group_by(OFFRE_PRINCIPALE) %>%\n    summarise(Budget= round(sum(TOTAL_CA_VENDU_N__KE,na.rm =TRUE ),digits=0))\n    # PlotFlower(lengths=data$Budget, labels=data$Type,widths=data$Budget, disk=0.3, main=\"Répartition\",\n    #            center=\"Détail\",main=data$Budget, lty=2)\n    couleur <-  brewer.pal(6, 'Spectral')\n    NomCol <- c(\"Data\", \"Digital Innovation\", \"ETM\", \"PocLab\", \"Sécurité\", \"Transformation\"  )\n    couleurP <- data.frame(OFFRE_PRINCIPALE=NomCol,Coul=couleur)\n    #on ajoute la couleur au type\n    data <- merge(x = data, y = couleurP, by = \"OFFRE_PRINCIPALE\", all.x = TRUE)\n    data <- data %>% mutate (Coul= as.character(Coul)) %>% mutate(OFFRE_PRINCIPALE = paste(OFFRE_PRINCIPALE,Budget,sep=\" \"))\n    PlotFlower(lengths=data$Budget, labels=data$OFFRE_PRINCIPALE,widths=data$Budget, fill.col =data$Coul,\n               disk=0.4, label.cex=0.9, label.offset=0.1, cex=1, cex.main=1, center=round(sum(data$Budget),digits=0))\n    \n    #   geom_line(data=CB_Mean,aes(group=ANNEE, colour=ANNEE),size=1) + scale_fill_manual(values=c(\"#CC6666\", \"#9999CC\"))\n    # \n    \n  })\n  \n  output$CA_plot_Prod <- renderPlot({\n    \n    ## On regarde pour le mois en cours la répartition des dépenses en comparaison avec 2015 et 2016\n    \n    data <- pilotage_data %>% \n      filter(STEP == \"4 - Gagnée\",WEEK==max(pilotage_data$WEEK)) %>% \n      group_by(OFFRE_PRINCIPALE) %>%\n      summarise(Budget= round(sum(CA_BT_PONDERE__N__KE,na.rm =TRUE ),digits=0))\n    \n    # PlotFlower(lengths=data$Budget, labels=data$Type,widths=data$Budget, disk=0.3, main=\"Répartition\",\n    #            center=\"Détail\",main=data$Budget, lty=2)\n    couleur <-  brewer.pal(6, 'Spectral')\n    NomCol <- c(\"Data\", \"Digital Innovation\", \"ETM\", \"PocLab\", \"Sécurité\", \"Transformation\"  )\n    couleurP <- data.frame(OFFRE_PRINCIPALE=NomCol,Coul=couleur)\n    #on ajoute la couleur au type\n    data <- merge(x = data, y = couleurP, by = \"OFFRE_PRINCIPALE\", all.x = TRUE)\n    data <- data %>% mutate (Coul= as.character(Coul)) %>% mutate(OFFRE_PRINCIPALE = paste(OFFRE_PRINCIPALE,Budget,sep=\" \"))\n    PlotFlower(lengths=data$Budget, labels=data$OFFRE_PRINCIPALE,widths=data$Budget, fill.col =data$Coul,\n               disk=0.4, label.cex=0.9, label.offset=0.1, cex=1.2, cex.main=1.5, center=round(sum(data$Budget),digits=0))\n    \n    #   geom_line(data=CB_Mean,aes(group=ANNEE, colour=ANNEE),size=1) + scale_fill_manual(values=c(\"#CC6666\", \"#9999CC\"))\n    # \n    \n  })\n  \n  output$CA_plot_Pipe <- renderPlot({\n    #browser()\n    ## On regarde pour le mois en cours la répartition des dépenses en comparaison avec 2015 et 2016\n    \n    data <- pilotage_data %>% \n      filter(STEP %in% c(\"0 - A qualifier\", \"1 - qualifiée\", \"1 - Qualifiée\", \"2 - A émettre\", \"3 - Emise 4\"),WEEK==max(pilotage_data$WEEK)) %>% \n      group_by(OFFRE_PRINCIPALE) %>%\n      summarise(Budget= round(sum(CA_BT_PONDERE__N__KE,na.rm =TRUE ),digits=0))\n    \n    # PlotFlower(lengths=data$Budget, labels=data$Type,widths=data$Budget, disk=0.3, main=\"Répartition\",\n    #            center=\"Détail\",main=data$Budget, lty=2)\n    couleur <-  brewer.pal(6, 'Spectral')\n    NomCol <- c(\"Data\", \"Digital Innovation\", \"ETM\", \"PocLab\", \"Sécurité\", \"Transformation\"  )\n    couleurP <- data.frame(OFFRE_PRINCIPALE=NomCol,Coul=couleur)\n    #on ajoute la couleur au type\n    data <- merge(x = data, y = couleurP, by = \"OFFRE_PRINCIPALE\", all.x = TRUE)\n    data <- data %>% mutate (Coul= as.character(Coul)) %>% mutate(OFFRE_PRINCIPALE = paste(OFFRE_PRINCIPALE,Budget,sep=\" \"))\n    PlotFlower(lengths=data$Budget, labels=data$OFFRE_PRINCIPALE,widths=data$Budget, fill.col =data$Coul,\n               disk=0.4, label.cex=0.9, label.offset=0.1, cex=1.2, cex.main=1.5, center=round(sum(data$Budget),digits=0))\n    \n    #   geom_line(data=CB_Mean,aes(group=ANNEE, colour=ANNEE),size=1) + scale_fill_manual(values=c(\"#CC6666\", \"#9999CC\"))\n    # \n    \n  })\n  output$Residuals_plot <- renderPlot({\n    p2017 <- pilotage_2017  %>% mutate(YEAR=2017) %>%\n      rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                             CA_BT,\n                                             OFFRE_PRINCIPALE,\n                                             WEEK,YEAR)\n\n    p2017_lm <- p2017  %>% \n      mutate(YEAR = factor(YEAR)) %>% \n      filter(STEP == \"4 - Gagnée\") %>% \n      group_by(YEAR, WEEK) %>% \n      summarise(CA_TOT = sum(CA_BT, na.rm = TRUE)) %>% ungroup() %>% select(WEEK,CA_TOT)\n    \n    # regression lineaire CA en fonction de la semaine\n    sim1_mod <- glm(CA_TOT ~ ns(WEEK, 5)  , data = p2017_lm)\n \n    p2017_lm <- p2017_lm %>% \n      add_residuals(sim1_mod) %>% mutate()\n    \n    ggplot(p2017_lm,aes(x=WEEK,y=resid)) + \n      geom_bar(stat = \"identity\",\n               aes(fill = resid > 25 ))+\n      geom_text(aes(x=WEEK,\n                    y=resid + 90 * sign(resid),\n                    label=format(resid, digits=2)),\n                hjust=0.5, \n                size=5) +\n      scale_fill_manual(values = c(\"red\", \"green\"),name= \"Ecart des prédictions\",labels = c(\"Négatif\", \"Positif\"))+\n      theme_economist() + scale_colour_economist() +\n      guides(color=guide_legend(\"my title\"))\n    \n  }) \n  \n  output$Staff_plot <- renderPlot({\n    \n    #Calcul des effectifs moyens sur le mois\n    nbM1 <- Staffing %>% filter (TYPE == 0, !is.na(JANV)) %>% group_by(GRADE) %>% count(GRADE) %>% mutate(MOIS = \"JANV\")\n    nbM2 <- Staffing %>% filter (TYPE == 0, !is.na(FEV)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"FEV\")\n    nbM3 <- Staffing %>% filter (TYPE == 0, !is.na(MAR)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"MAR\")\n    nbM4 <- Staffing %>% filter (TYPE == 0, !is.na(AVR)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"AVR\")\n    nbM5 <- Staffing %>% filter (TYPE == 0, !is.na(MAI)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"MAI\")\n    nbM6 <- Staffing %>% filter (TYPE == 0, !is.na(JUIN)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"JUIN\")\n    nbM7 <- Staffing %>% filter (TYPE == 0, !is.na(JUIL)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"JUIL\")\n    nbM8 <- Staffing %>% filter (TYPE == 0, !is.na(AOUT)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"AOUT\")\n    nbM9 <- Staffing %>% filter (TYPE == 0, !is.na(SEPT)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"SEPT\")\n    nbM10 <- Staffing %>% filter (TYPE == 0, !is.na(OCT)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"OCT\")\n    nbM11 <- Staffing %>% filter (TYPE == 0, !is.na(NOV)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"NOV\")\n    nbM12 <- Staffing %>% filter (TYPE == 0, !is.na(DEC)) %>% group_by(GRADE) %>% count(GRADE)  %>% mutate(MOIS = \"DEC\")\n    #CALCUL DU NOMBRE DE JOURS MAX POSSIBLE\n    nbM1$volume <- nbM1$n * nbJourMois[1] \n    nbM2$volume <- nbM2$n * nbJourMois[2] \n    nbM3$volume <- nbM3$n * nbJourMois[3] \n    nbM4$volume <- nbM4$n * nbJourMois[4] \n    nbM5$volume <- nbM5$n * nbJourMois[5] \n    nbM6$volume <- nbM6$n * nbJourMois[6] \n    nbM7$volume <- nbM7$n * nbJourMois[7] \n    nbM8$volume <- nbM8$n * nbJourMois[8] \n    nbM9$volume <- nbM9$n * nbJourMois[9] \n    nbM10$volume <- nbM10$n * nbJourMois[10] \n    nbM11$volume <- nbM11$n * nbJourMois[11] \n    nbM12$volume <- nbM12$n * nbJourMois[12] \n    \n    \n    nbEffecti <- rbind(nbM1, nbM2, nbM3, nbM4, nbM5, nbM6, nbM7, nbM8, nbM9, nbM10, nbM11, nbM12)\n    \n    #on calcul le nombre de jours vendus par grade et par mois  FERME\n    nbF1 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(JANV,na.rm =TRUE )) %>% mutate(MOIS = \"JANV\")\n    nbF2 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(FEV,na.rm =TRUE )) %>% mutate(MOIS = \"FEV\")\n    nbF3 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(MAR,na.rm =TRUE )) %>% mutate(MOIS = \"MAR\")\n    nbF4 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(AVR,na.rm =TRUE ))  %>% mutate(MOIS = \"AVR\")\n    nbF5 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(MAI,na.rm =TRUE )) %>% mutate(MOIS = \"MAI\")\n    nbF6 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(JUIN,na.rm =TRUE ))  %>% mutate(MOIS = \"JUIN\")\n    nbF7 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(JUIL,na.rm =TRUE ))  %>% mutate(MOIS = \"JUIL\")\n    nbF8 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(AOUT,na.rm =TRUE )) %>% mutate(MOIS = \"AOUT\")\n    nbF9 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(SEPT,na.rm =TRUE )) %>% mutate(MOIS = \"SEPT\")\n    nbF10 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(OCT,na.rm =TRUE )) %>% mutate(MOIS = \"OCT\")\n    nbF11 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(NOV,na.rm =TRUE )) %>% mutate(MOIS = \"NOV\")\n    nbF12 <- Staffing %>% filter (TYPE ==1) %>% group_by(GRADE) %>% summarise(nb = sum(DEC,na.rm =TRUE )) %>% mutate(MOIS = \"DEC\")\n    nbFERME <- rbind(nbF1, nbF2, nbF3, nbF4, nbF5, nbF6, nbF7, nbF8, nbF9, nbF10, nbF11, nbF12)\n    \n    \n    #on calcul le nombre de jours de congès + inactivité par grade et par mois\n    nbC1 <- Staffing %>% filter (TYPE %in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(JANV,na.rm =TRUE )) %>% mutate(MOIS = \"JANV\")\n    nbC2 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(FEV,na.rm =TRUE )) %>% mutate(MOIS = \"FEV\")\n    nbC3 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(MAR,na.rm =TRUE )) %>% mutate(MOIS = \"MAR\")\n    nbC4 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(AVR,na.rm =TRUE ))  %>% mutate(MOIS = \"AVR\")\n    nbC5 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(MAI,na.rm =TRUE )) %>% mutate(MOIS = \"MAI\")\n    nbC6 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(JUIN,na.rm =TRUE ))  %>% mutate(MOIS = \"JUIN\")\n    nbC7 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(JUIL,na.rm =TRUE ))  %>% mutate(MOIS = \"JUIL\")\n    nbC8 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(AOUT,na.rm =TRUE )) %>% mutate(MOIS = \"AOUT\")\n    nbC9<- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(SEPT,na.rm =TRUE )) %>% mutate(MOIS = \"SEPT\")\n    nbC10 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(OCT,na.rm =TRUE )) %>% mutate(MOIS = \"OCT\")\n    nbC11 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(NOV,na.rm =TRUE )) %>% mutate(MOIS = \"NOV\")\n    nbC12 <- Staffing %>% filter (TYPE%in% c(3,7)) %>% group_by(GRADE) %>% summarise(nb = sum(DEC,na.rm =TRUE )) %>% mutate(MOIS = \"DEC\")\n    nbCONGES <- rbind(nbC1, nbC2, nbC3, nbC4, nbC5, nbC6, nbC7, nbC8, nbC9, nbC10, nbC11, nbC12)\n    \n    \n    #on calcul les pourcentages\n    tmp <- merge(nbEffecti,nbCONGES, by=c(\"GRADE\",\"MOIS\"), all.x=TRUE, all.y=FALSE)\n    #on supprime tous les NA du tableau\n    tmp[is.na(tmp)] <- 0\n    \n    tmp <- tmp %>% mutate(Possible = volume - nb) %>% select (GRADE,MOIS,Possible)\n    tmp <- merge(nbFERME,tmp, by=c(\"GRADE\",\"MOIS\"))\n    tmp <- tmp %>% mutate (Pourcentage = nb/Possible)\n    tmpTOTAL <-  tmp %>% group_by(MOIS) %>% summarise(Pourcentage = sum(nb)/sum(Possible)) %>% mutate(GRADE=\"0-Global\")\n    tmp <- tmp %>% select(MOIS,Pourcentage,GRADE)\n    tmp <-rbind(tmp, tmpTOTAL)\n    \n    tmp <- tmp %>% filter(GRADE %in% input$GRADE)\n    # set offset\n    offset <- 0.5\n    # numeric version of the levels to be bound by a box\n    xmin <- \"JANV\"\n    xmax <- \"DEC\"\n    \n    ymin <- \"0-Global\"\n    ymax <- \"0-Global\"\n    ggplot(data = tmp, aes(x=MOIS, y=GRADE, fill=Pourcentage)) + \n      ggtitle(\"Taux de staffing Ferme (congés et inactivité déduits)\") +\n      geom_tile(color = \"white\")+\n      geom_rect(aes(xmin = 1- 0.5, xmax =  12+ 0.5, ymin =  1- 0.5, ymax = 1+ 0.5),\n                fill = \"transparent\", color = \"#00B2FF\", size = 1.5)+\n      geom_text(aes(label = round(Pourcentage, 2)))+\n      scale_fill_gradient2(low = \"red\", high = \"green\", mid = \"green\", \n                           midpoint = 0.8, limit = c(0,1), space = \"Lab\",\n                           name=\"Staffing Ferme\") +\n      xlim(c(\"JANV\",\"FEV\",\"MAR\",\"AVR\",\"MAI\",\"JUIN\",\"JUIL\",\"AOUT\",\"SEPT\",\"OCT\",\"NOV\",\"DEC\")) +\n      theme_minimal()+ \n      theme(axis.text.x = element_text( \n        size = 9))\n  })\n})\n",
    "created" : 1500291211572.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3735161235",
    "id" : "A860A880",
    "lastKnownWriteTime" : 1503678488,
    "last_content_update" : 1503678488352,
    "path" : "D:/tmp/DB_V1_LP/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}