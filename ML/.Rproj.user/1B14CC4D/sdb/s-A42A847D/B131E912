{
    "collab_server" : "",
    "contents" : "library(ggvis)\nlibrary(dplyr)\nlibrary(class)####### KNN algorithm\nlibrary(gmodels)\nlibrary(rpart)\n##########################\n#regression linéaire     # > objectif avoir les coefficients Pente et intercept\n##########################\nlinkedin <- sample(35,21)\n# Create the days vector\ndays <- seq(length(linkedin))\n\n# Fit a linear model called on the linkedin views per day: linkedin_lm\nlinkedin_lm <- lm(linkedin ~ days  )\n\n\n# Predict the number of views for the next three days: linkedin_pred\nfuture_days <- data.frame(days = 22:24)\nlinkedin_pred <- predict(linkedin_lm,future_days)\n\n# Plot historical data and predictions\nplot(linkedin ~ days, xlim = c(1, 24))\npoints(22:24, linkedin_pred, col = \"green\")\n\n#Clustering : diviser les points en k groupes\n# Set random seed. Don't remove this line.\nset.seed(1)\n\n# Chop up iris in my_iris and species\nmy_iris <- iris[-5]\nspecies <- iris$Species\n\n# Perform k-means clustering on my_iris: kmeans_iris\nkmeans_iris <- kmeans(my_iris, 3)\n\n# Compare the actual Species to the clustering using table()\ntable(species, kmeans_iris$cluster)\n\n\n# A decision tree model has been built for you\ntree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,\n              data = iris, method = \"class\")\n\nunseen <- data.frame(Sepal.Length = c(5.3, 7.2),\n                     Sepal.Width = c(2.9, 3.9),\n                     Petal.Length = c(1.7, 5.4),\n                     Petal.Width = c(0.8, 2.3))\n\n# Predict the label of the unseen observations. Print out the result.\npredict(tree,unseen,type=\"class\")\niris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()\nnormalize <- function(x) {\n  num <- x - min(x)\n  denom <- max(x) - min(x)\n  return (num/denom)\n}\nirisNomalized <- iris\nmin(iris$Sepal.Length)\n\nirisNomalized$Sepal.Length <- normalize(iris$Sepal.Length)\nirisNomalized$Sepal.Width <- normalize(iris$Sepal.Width)\nirisNomalized$Petal.Length <- normalize(iris$Petal.Length)\nirisNomalized$Petal.Width <- normalize(iris$Petal.Width)\n\n\n#Constitution du training Set 2/3 training et 1/3 test set\n\n#on definit un nombre aléatoire qui permet d'avoir la meme repartition des echantillons a chaque exécution\n\nset.seed(1234)\n#on constitue es 2 chantillons (on définit les indice du dataset que l'on veut conserver)\nind <- sample(2, nrow(irisNomalized), replace=TRUE, prob=c(0.67, 0.33))\n\n#données a étudier\niris.training <- irisNomalized[ind==1, 1:4]\niris.test <- irisNomalized[ind==2, 1:4]\n\n#données a prédire\niris.trainLabels <- irisNomalized[ind==1, 5]\niris.testLabels <- irisNomalized[ind==2, 5]\n\n\n# KNN  k-Nearest Neighbors (Euclidian distance measure )\n\niris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)\n\n#Evaluation du modèle\nCrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE) \n# ce tableau permet de regarder l'écrart entre prédition et échantillon test\n\n###################### Arbre de décision \n# http://mehdikhaneboubi.free.fr/random_forest_r.html#random-forest-avec-la-library-caret\nlibrary(randomForest)\n\nlycee <- read.csv2(\"https://www.data.gouv.fr/s/resources/indicateurs-de-resultat-des-lycees-denseignement-general-et-technologique/20160401-163749/MEN-DEPP-indicateurs-de-resultats-des-LEGT-2015.csv\", \n                   sep = \";\", header = TRUE, fileEncoding = \"ISO-8859-15\", na.strings = c(\" \",\".\"))\n\nnometab <- paste(lycee$Etablissement, lycee$Code.Etablissement)\nnometab <- gsub(\"LYCEE \", \"\", nometab)\nrow.names(lycee) <- nometab\n\nlycee2 <- select(lycee, Secteur.Public.PU.Privé.PR, Académie, Sructure.pédagogique.en.7.groupes, \n                 Taux.Brut.de.Réussite.Total.séries, Taux.Réussite.Attendu.toutes.séries, \n                 Effectif.de.seconde, Effectif.de.première, Effectif.de.terminale) %>% \n                mutate(Taux.Réussite.Attendu.toutes.séries=as.numeric(Taux.Réussite.Attendu.toutes.séries))\n\nset.seed(123)\n\nfit <- randomForest(Secteur.Public.PU.Privé.PR ~ ., data = lycee2, na.action = na.roughfix)\n\nprint(fit)\n\nvarImpPlot(fit)",
    "created" : 1487687875240.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1090796711",
    "id" : "B131E912",
    "lastKnownWriteTime" : 1487697144,
    "last_content_update" : 1487781088475,
    "path" : "D:/tmp/ML/KNN.R",
    "project_path" : "KNN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}