Ecarts <- Ecarts %>%
mutate(COMPTE=ifelse(grepl("->",COMPTE),paste("<b>",COMPTE,"</b>"),COMPTE))
colnames(Ecarts)  <-  c('Modif',"COMPTE","ASSOCIE", "SUJET","STEP","PROB","CODE_TOTEM","CA_VENDU_KE","Step","StepNew")
Ecarts <- Ecarts %>%
mutate(COMPTE=ifelse(grepl("->",COMPTE),paste("<b>",COMPTE,"</b>"),COMPTE))
Ecarts
Ecarts$COMPTE
runApp()
shiny::runApp()
load("D:/tmp/dashboardBTV2/data/staffingS10.RData")
S10 <- Staffing
StaffingS10 <- S10
save(Staffing,file="data/StaffingS10.RData")
runApp()
View(S10)
View(S10)
View(Staffing)
View(Staffing)
runApp()
setwd("D:/tmp/importDashbardData")
StaffingS10 <- read_excel("input/staffingS10.xlsx")
colnames(StaffingS10) <- format_col_names(colnames(StaffingS10))
save(StaffingS10,file="StaffingS10.RData")
StaffingS10 <- read_excel("input/StaffingS10.xlsx")
colnames(StaffingS10) <- format_col_names(colnames(StaffingS10))
save(StaffingS10,file="StaffingS10.RData")
StaffingS10 <- read_excel("input/StaffingS10.xlsx")
library(readxl)
library(xlsx)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
library(readr)
library(lubridate) # gestion des dates
StaffingS10 <- read_excel("input/StaffingS10.xlsx")
colnames(StaffingS10) <- format_col_names(colnames(StaffingS10))
save(StaffingS10,file="StaffingS10.RData")
format_col_names <- function(x) {
x <- str_replace_all(x, "[éèê]", "e")
x <- str_replace_all(x, " ", "_")
x <- str_replace_all(x, "\\.", "")
x <- str_replace_all(x, "/", "")
x <- str_replace_all(x, "€", "E")
x <- str_replace_all(x, "\\(", "_")
x <- str_replace_all(x, "\\)", "")
x <- str_replace_all(x, "\n", "")
x <- str_replace_all(x, "\r", "")
x <- str_replace_all(x, "\\+1", "_PLUS_1_")
x <- str_replace_all(x, "\\-1", "_MOINS_1_")
x <- str_to_upper(x)
x
}
colnames(StaffingS10) <- format_col_names(colnames(StaffingS10))
save(StaffingS10,file="StaffingS10.RData")
runApp('D:/tmp/dashboardBTV2')
S11 <- Staffing %>%
#filter(TYPE %in% input$Staff)  %>%
select(CONSULTANTS,TYPE,MISSIONS,ID_TOTEM,TOTAL)
S10 <- StaffingS10 %>%
#filter(TYPE %in% input$Staff) %>%
select(CONSULTANTS,TYPE,MISSIONS,ID_TOTEM,TOTAL)
resultatDiff <- diff_data(S10,S11)
ENegatfis <- as.data.frame(resultatDiff$get_matrix())
#on remplace le texte "NA" par 0
ENegatfis[ENegatfis$V6=="NA",6] <- 0
ENegatfis <- ENegatfis %>%
mutate(V1= as.character(V1))%>%
replace_na(list(V6=0))%>%
mutate(V7= ifelse(grepl("->",V6),as.character(V6),paste(V6,"->0"))) %>%
filter(V1 %in% c("+++","---","->"),V3 %in% input$Staff) %>%
mutate(V1= ifelse(V1=="->","mod",V1)) %>%
separate(V7, into = c("SPrev","S"), sep = "->",convert=TRUE) %>%
replace_na(list(S=0,SPrev=0)) %>%
# mutate(S= as.numeric(S)) %>%
mutate(SPrev= as.numeric(SPrev)) %>%
mutate(DELTA=S-SPrev) %>% filter(DELTA!=0)
View(ENegatfis)
View(ENegatfis)
colnames(ENegatfis)  <-  c('Changement', 'Consultant', 'Type', 'Mission', 'TOTEM', 'Total',"Semaine prev", 'Semaine','DELTA')
ENegatfis <-ENegatfis %>%
mutate(Mission=ifelse(grepl("->",Mission),paste("<font color=#BC0E1F>",Mission,"</font>"),paste(Mission,""))) %>%
mutate(TOTEM=ifelse(grepl("->",TOTEM),paste("<font color=#BC0E1F>",TOTEM,"</font>"),paste(TOTEM,""))) %>%
mutate(Total=ifelse(grepl("->",Total),paste("<font color=#BC0E1F>",Total,"</font>"),paste(Total,"")))
ENegatfis <- ENegatfis %>%
mutate(V1= as.character(V1))%>%
replace_na(list(V6=0))%>%
mutate(V7= ifelse(grepl("->",V6),as.character(V6),paste(V6,"->0"))) %>%
filter(V1 %in% c("+++","---","->"),V3 %in% input$Staff) %>%
mutate(V1= ifelse(V1=="->","mod",V1)) %>%
separate(V7, into = c("SPrev","S"), sep = "->",convert=TRUE) %>%
replace_na(list(S=0,SPrev=0)) %>%
# mutate(S= as.numeric(S)) %>%
mutate(SPrev= as.numeric(SPrev)) %>%
mutate(DELTA=S-SPrev) %>% filter(DELTA!=0)
ENegatfis <- ENegatfis %>%
mutate(V1= as.character(V1))%>%
replace_na(list(V6=0))%>%
mutate(V7= ifelse(grepl("->",V6),as.character(V6),paste(V6,"->0"))) %>%
filter(V1 %in% c("+++","---","->")) %>% #,V3 %in% input$Staff) %>%
mutate(V1= ifelse(V1=="->","mod",V1)) %>%
separate(V7, into = c("SPrev","S"), sep = "->",convert=TRUE) %>%
replace_na(list(S=0,SPrev=0)) %>%
# mutate(S= as.numeric(S)) %>%
mutate(SPrev= as.numeric(SPrev)) %>%
mutate(DELTA=S-SPrev) %>% filter(DELTA!=0)
View(ENegatfis)
runApp('D:/tmp/dashboardBTV2')
rsconnect::setAccountInfo(name='comptehome',
token='F46CBC040A066DE064018387C6A0242C',
secret='LtPJI1/aPOGE8IKkam+vE16uOfYfGLLuo6rJEjCs')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
pilotage_data
maxWeek
seq_Asso <- pilotage_data %>% filter (STEP == "4 - Gagnée",WEEK==maxWeek) %>%
group_by(GROUPE, OFFRE_PRINCIPALE,ASSOCIE,SECTEUR,SUJET) %>%
summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = "CA BT")
seq_Asso
seq_Asso$ASSOCIE
length(seq_Asso$ASSOCIE)
nom <- list()
nb_1 <- length(seq_Asso$ASSOCIE)
for (i in 1:nb_1) {
nom[[i]] <- c(seq_Asso$DEBUT[i], seq_Asso$ASSOCIE[i],seq_Asso$OFFRE_PRINCIPALE[i] ,seq_Asso$SECTEUR[i],seq_Asso$GROUPE[i],seq_Asso$SUJET[i])
# } else {
#   nom[[i]] <- c(seq_Asso$DEBUT[i],seq_Asso$ASSOCIE[i],seq_Asso$OFFRE_PRINCIPALE[i] ,seq_Asso$SECTEUR[i],seq_Asso$GROUPE[i])
# }
}
CA_TOTAL <- c(seq_Asso$CA)
combo_output <- list(path = nom, value = CA_TOTAL)
D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type="treeMap",
tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),
legend=list(type="sequential",no_show = FALSE,
color=list("ORE"="#E589B4", "JSO"="#C9C5E5", "OGR" = "#50E5D6",
"BES" = "#99F8FF", "MMO"= "#FF9770", "UHE"="#E9FF70", "Transformation"="#0BA","ETM"="#AA1","Data"="#ECC")), trail = TRUE,
Input=list(enabled=T,Id="D3Part1",clickedStep=T,
currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),
width = 800,height = 600)
)
D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type="treeMap",
tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),
legend=list(type="sequential",no_show = FALSE,
color=list("ORE"="#E589B4", "JSO"="#C9C5E5", "OGR" = "#50E5D6",
"BES" = "#99F8FF", "MMO"= "#FF9770", "UHE"="#E9FF70", "Transformation"="#0BA","ETM"="#AA1","Data"="#ECC")), trail = TRUE,
Input=list(enabled=T,Id="D3Part1",clickedStep=T,
currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),
width = 800,height = 600)
combo_output
D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type="treeMap",
tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),
legend=list(type="sequential",no_show = FALSE,
color=list("ORE"="#E589B4", "JSO"="#C9C5E5", "OGR" = "#50E5D6",
"BES" = "#99F8FF", "MMO"= "#FF9770", "UHE"="#E9FF70", "Transformation"="#0BA","ETM"="#AA1","Data"="#ECC")), trail = TRUE,
Input=list(enabled=T,Id="D3Part1",clickedStep=T,
currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),
width = 800,height = 600)
combo_output()$path
combo_output$path
combo_output <- function(){
# if (input$radio == "Par Offre") {
#   seq_Asso <- pilotage_data %>% filter (STEP == "4 - Gagnée",WEEK==maxWeek) %>%
#   group_by(OFFRE_PRINCIPALE,ASSOCIE,SECTEUR,GROUPE) %>%
#   summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = "CA BT")
#
# } else {
#   if (input$radio == "Par groupe") {
seq_Asso <- pilotage_data %>% filter (STEP == "4 - Gagnée",WEEK==maxWeek) %>%
group_by(GROUPE, OFFRE_PRINCIPALE,ASSOCIE,SECTEUR,SUJET) %>%
summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = "CA BT")
#  } else {
#     seq_Asso <- pilotage_data %>% filter (STEP == "4 - Gagnée",WEEK==maxWeek) %>%
#     group_by(GROUPE, ASSOCIE,OFFRE_PRINCIPALE,SECTEUR) %>%
#     summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = "CA BT")
#
# }
# }
# input$action
nom <- list()
nb_1 <- length(seq_Asso$ASSOCIE)
for (i in 1:nb_1) {
nom[[i]] <- c(seq_Asso$DEBUT[i], seq_Asso$ASSOCIE[i],seq_Asso$OFFRE_PRINCIPALE[i] ,seq_Asso$SECTEUR[i],seq_Asso$GROUPE[i],seq_Asso$SUJET[i])
# } else {
#   nom[[i]] <- c(seq_Asso$DEBUT[i],seq_Asso$ASSOCIE[i],seq_Asso$OFFRE_PRINCIPALE[i] ,seq_Asso$SECTEUR[i],seq_Asso$GROUPE[i])
# }
}
CA_TOTAL <- c(seq_Asso$CA)
combo_output <- list(path = nom, value = CA_TOTAL)
}
D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type="treeMap",
tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),
legend=list(type="sequential",no_show = FALSE,
color=list("ORE"="#E589B4", "JSO"="#C9C5E5", "OGR" = "#50E5D6",
"BES" = "#99F8FF", "MMO"= "#FF9770", "UHE"="#E9FF70", "Transformation"="#0BA","ETM"="#AA1","Data"="#ECC")), trail = TRUE,
Input=list(enabled=T,Id="D3Part1",clickedStep=T,
currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),
width = 800,height = 600)
combo_output()$path
combo_output()$path
D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type="treeMap",
tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),
legend=list(type="sequential",no_show = FALSE,
color=list("ORE"="#E589B4", "JSO"="#C9C5E5", "OGR" = "#50E5D6",
"BES" = "#99F8FF", "MMO"= "#FF9770", "UHE"="#E9FF70", "Transformation"="#0BA","ETM"="#AA1","Data"="#ECC")), trail = TRUE,
Input=list(enabled=T,Id="D3Part1",clickedStep=T,
currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),
width = 800,height = 600)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("leaflet")
library(leaflet)
leaflet(options = leafletOptions(zoomControl = FALSE,
minZoom = 3, maxZoom = 3)) %>%
addTiles()
leaflet(options = leafletOptions(zoomControl = TRUE,
minZoom = 3, maxZoom = 3)) %>%
addTiles()
leaflet(options = leafletOptions(
minZoom = 3, maxZoom = 3)) %>%
addTiles()
install.packages("rgdal")
seq2 <- seq2 %>%  mutate (path= strsplit(as.character(path),"/"))
library(shiny)
library(shinydashboard)
library(flexdashboard)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(RColorBrewer) #coulors pour ggplot
library(stringr)
library(lubridate) # gestion des dates
library(xts) #serie temporelle
library(dygraphs) #affichage de graphe avec affichage dynamique
#library(forcats)
library(DT) # Affichage des tableaux dynamiques
library(purrr) #
library(tidyr)
library(scales)
library(googleVis) # Permet d'utiliser les graphiques >  Google Chart
library(timevis)# Gantt
library(gridExtra) #Pour avoir les 2 graphes dans le meme plot
library(circlize)
library(D3partitionR) # permet de générer le treemap dynamique
library(highcharter) # courbe de comparaison des CA de 2015 à 2017
library(daff) #PErmet de voir les différences entre deux data frame
runApp()
shiny::runApp()
runApp()
tmp
pilotage_2016 %>% select(SUJET, PROB, OFFRE_PRINCIPALE,
GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE,
SECTEUR, LEAD__RESP, WEEK, STEP, DATE_REF)
pilotage_2015 %>% select(SUJET, PROB, OFFRE_PRINCIPALE,
GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE,
SECTEUR, LEAD__RESP, WEEK, STEP, DATE_REF)
pilotage_2017 %>% select(SUJET, PROB, OFFRE_PRINCIPALE,
GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE,
SECTEUR, LEAD__RESP, WEEK, STEP, DATE_REF)
Pilotage <- rbind(tmp, tmp2, tmp3)
View(evol_pipe)
runApp()
View(data_ts)
runApp()
runApp()
runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
myState <- '
{"xAxisOption":"_TIME",
"playDuration":15000,
"showTrails":false,
"orderedByX":false,"xLambda":1,
"colorOption":"_UNIQUE_COLOR"}'
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",state=myState,
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
myState
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("WDI")
source('~/.active-rstudio-document', echo=TRUE)
View(HealthWealth)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("googleVis")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(googleVis)
source('~/.active-rstudio-document', echo=TRUE)
googleVis
co=data.frame(country=c("US", "GB", "BR"),
population=c(15,17,19),
size=c(33,42,22))
CityPopularity
gvisPieChart(CityPopularity)
PieC <- gvisPieChart(CityPopularity)
plot(PieC)
GaugeC <- gvisGauge(CityPopularity)
plot(GaugeC)
options=list(min=0, max=1200, blueFrom=900,blueTo=1200,greenFrom=600,
greenTo=900, yellowFrom=300, yellowTo=600,
redFrom=0, redTo=300, width=400, height=300)
GaugeC <- gvisGauge(CityPopularity)
plot(GaugeC)
GaugeC <- gvisGauge(CityPopularity,options=list(min=0, max=1200, blueFrom=900,blueTo=1200,greenFrom=600,
greenTo=900, yellowFrom=300, yellowTo=600,
redFrom=0, redTo=300, width=400, height=300))
plot(GaugeC)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
co
source('~/.active-rstudio-document', echo=TRUE)
AreaC <- gvisAreaChart(df)
plot(AreaC)
df=data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
AreaC <- gvisAreaChart(df)
plot(AreaC)
SteppedAreaC <- gvisSteppedAreaChart(df, xvar="name",
yvar=c("val1", "val2"),
options=list(isStacked=TRUE))
plot(SteppedAreaC)
SteppedAreaC <- gvisSteppedAreaChart(df, xvar="name",
yvar=c("val1", "val2"),
options=list(isStacked=TRUE))
plot(SteppedAreaC)
SteppedAreaC <- gvisSteppedAreaChart(df, xvar="name",
yvar=c("val1", "val2"),
options=list(isStacked=TRUE))
df
source('~/.active-rstudio-document', echo=TRUE)
devtools::install_github("Appsilon/shiny.collections")
ui <- shinyUI(fluidPage(
titlePanel("Chat app (shiny.collections demo)"),
div(textInput("username_field", "Username", width = "200px")),
uiOutput("chatbox"),
div(style = "display:inline-block",
textInput("message_field", "Your message", width = "500px")),
div(style = "display:inline-block",
actionButton("send", "Send"))
))
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny.collections)
library(shiny)
library(shiny.collections)
ui <- shinyUI(fluidPage(
titlePanel("Chat app (shiny.collections demo)"),
div(textInput("username_field", "Username", width = "200px")),
uiOutput("chatbox"),
div(style = "display:inline-block",
textInput("message_field", "Your message", width = "500px")),
div(style = "display:inline-block",
actionButton("send", "Send"))
))
server <- shinyServer( function(input, output, session) {})
shinyApp(ui = ui, server = server)
connection <- shiny.collections::connect()
chat <- shiny.collections::collection("chat", connection)
library(shiny.collections)
connection <- shiny.collections::connect()
chat <- shiny.collections::collection("chat", connection)
install.packages("rlang")
library(shiny)
library(shiny.collections)
ui <- shinyUI(fluidPage(
titlePanel("Chat app (shiny.collections demo)"),
div(textInput("username_field", "Username", width = "200px")),
uiOutput("chatbox"),
div(style = "display:inline-block",
textInput("message_field", "Your message", width = "500px")),
div(style = "display:inline-block",
actionButton("send", "Send"))
))
server <- shinyServer(function(input, output, session) {
chat <- shiny.collections::collection("chat", connection)
updateTextInput(session, "username_field",
value = get_random_username()
)
observeEvent(input$send, {
new_message <- list(user = input$username_field,
text = input$message_field,
time = Sys.time())
shiny.collections::insert(chat, new_message)
updateTextInput(session, "message_field", value = "")
})
output$chatbox <- renderUI({
if (!is_empty(chat$collection)) {
render_msg_divs(chat$collection)
} else {
tags$span("Empty chat")
}
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("click", "Add one"),
DT::dataTableOutput("cars_data")
))
connection <- shiny.collections::connect()
server <- shinyServer(function(input, output) {
cars <- shiny.collections::collection("cars", connection)
observeEvent(input$click, {
shiny.collections::insert(cars, list(name = "Sample name", value = sample(1:100, 1)))
})
output$cars_data <- DT::renderDataTable(DT::datatable(cars$collection))
})
shinyApp(ui = ui, server = server)
© 2017 GitHub, Inc. Terms Privacy Security Status
#' Shiny Chat example using shiny.collections
library(shiny)
library(purrr)
library(dplyr)
library(purrrlyr)
#' This global variable describes how many recent variables are visible
#' in the chat window.
VISIBLE_MESSAGES <- 40
# Helper Functions
##############################
#' Render divs with messages
#'
#' @param collection Collection of entries from rethinkDB
#'
#' @return div object with formetted entries
render_msg_divs <- function(collection) {
div(class = "ui very relaxed list",
collection %>%
arrange(time) %>%
tail(VISIBLE_MESSAGES) %>%
by_row(~ div(class = "item",
a(class = "header", .$user),
div(class = "description", .$text)
)) %>% {.$.out}
)
}
#' Get random username
#'
#' @return Character "User"+random number 10000<x99999
get_random_username <- function() {
paste0("User", round(runif(1, 10000, 99999)))
}
# User Interface of the Chat
##############################
ui <- shinyUI(fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$script(src = "script.js")
),
titlePanel("Chat app (shiny.collections demo)"),
div(textInput("username_field", "Username", width = "200px")),
uiOutput("chatbox"),
div(style = "display:inline-block",
textInput("message_field", "Your message", width = "500px")),
div(style = "display:inline-block",
actionButton("send", "Send"))
))
# Server with app logic
##############################
#' Before running the server we set up a connection with rethinkDB
connection <- shiny.collections::connect()
server <- shinyServer(function(input, output, session) {
chat <- shiny.collections::collection("chat", connection)
#' By default the username is a big int number.
updateTextInput(session, "username_field",
value = get_random_username()
)
observeEvent(input$send, {
new_message <- list(user = input$username_field,
text = input$message_field,
time = Sys.time())
shiny.collections::insert(chat, new_message)
updateTextInput(session, "message_field", value = "")
})
output$chatbox <- renderUI({
#' We render message boxes (divs) only if collections
#' contains some entries.
if (!is_empty(chat$collection)) {
render_msg_divs(chat$collection)
} else {
tags$span("Empty chat")
}
})
})
shinyApp(ui = ui, server = server)
runApp('D:/tmp/chat')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
