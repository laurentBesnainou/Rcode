{
    "collab_server" : "",
    "contents" : "################################## V2 du dashboard BT ##########################################\"\nObjectif_BT <-14515 #données pour l'année en cours\nObjectif_CA <- 16000\nnbMois <- month(today())\n#palette de couleurs\ngroup.colors <- c(\"Data\" = \"#60D394\", \"Digital Innovation\" = \"#AAF683\",\"ETM\" =\"#FFD97D\", \"Transformation\" = \"#FF9B85\", \"PocLab\" = \"#ED7D3A\")\ngroup.secteurs <- c(\"Banque\" = \"#D8DBE2\",\"Assurance\" = \"#5bc0eb\",\"Energie\" = \"#fde74c\",\"Industrie & services\" = \"#9bc53d\",\"Para-public\" = \"#e55934\",\" Retail\" = \"#fa7921\")\n############################################\n\n#on regarde le nombre de jours ouvrés par mois\nnbjours2016 <- c(20,21,22,21,20,22,20,22,22,21,20,22)\nnbjours2017 <- c(22,20,23,20,21,22,20,22,21,22,20,20)\n\n#Cette fonction permet de basculer sur l'année désirée\nChoixAnnee <- function(Annee){\n  if (Annee==2015) {\n    #effectifs <<- Effectifs2015\n    pilotage_data <<- pilotage_2015 \n    Objectif_BT <<- 11120\n    Objectif_CA <<- 13000}\n  if (Annee==2016) {\n    #effectifs <<- Effectifs2016\n    pilotage_data <<- pilotage_2016\n    Objectif_BT <<-12500\n    Objectif_CA <<- 14500\n    nbjours <<- nbjours2016}\n  if (Annee==2017) {\n    #effectifs <<- Effectifs2017\n    pilotage_data <<- pilotage_2017\n    Objectif_BT <<-13000\n    Objectif_CA <<- 14500\n    nbjours <<- nbjours2017}\n}\n\nserver <- function(input, output, session) {\n  \n  output$mychart <- function() ({\n    dVide1 <-data.frame(WEEK=c(1:52),mnt=rep(0,52))\n    dVide2 <-data.frame(WEEK=c(1:52),mnt=rep(0,52))\n    dVide3 <-data.frame(WEEK=c(1:52),mnt=rep(0,52))\n    \n    pil2017 <- pilotage_2017 %>% filter(OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n      filter (STEP == \"4 - Gagnée\") %>%\n      group_by (WEEK) %>% summarise(mnt=sum(CA_BT_PONDERE__N__KE, na.rm = TRUE))\n    #on constitue un tableau avec les valeurs de 1 à 52 en fonction de ce que l'on a dans pil2017\n    for(i in dVide1$WEEK) if(i %in% pil2017$WEEK) dVide1$mnt[i] <- pil2017$mnt[i]\n    \n    pil2016 <- pilotage_2016 %>% filter(OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n      filter (STEP == \"4 - Gagnée\") %>%\n        group_by (WEEK) %>% summarise(mnt=sum(CA_BT_PONDERE__N__KE, na.rm = TRUE))\n    #on constitue un tableau avec les valeurs de 1 à 52 en fonction de ce que l'on a dans pil2017\n    for(i in dVide2$WEEK) if(i %in% pil2016$WEEK) dVide2$mnt[i] <- pil2016$mnt[i]\n      \n    pil2015 <- pilotage_2015 %>% filter(OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n    filter (STEP == \"4 - Gagnée\") %>%\n      group_by (WEEK) %>% summarise(mnt=sum(CA_BT_PONDERE__N__KE, na.rm = TRUE))\n    #on constitue un tableau avec les valeurs de 1 à 52 en fonction de ce que l'on a dans pil2017\n    for(i in dVide3$WEEK) if(i %in% pil2015$WEEK) dVide3$mnt[i] <- pil2015$mnt[i]\n    \n    data.frame(\n      \"BT 2017\" = dVide1$mnt,\n      \"BT 2016\" = dVide2$mnt,\n      \"BT 2015\" = dVide3$mnt)\n    \n  })\n\n################# Liste des Infobox  \n  caBT <- reactive({\n    ChoixAnnee(input$Annee)\n    \n    pilotage_data %>% filter(STEP == \"4 - Gagnée\", WEEK == input$semaine,\n                             OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n      summarise(CA_BT__N__KE = sum(CA_BT__N__KE, na.rm = TRUE))\n  })  \n  \n  caSemaineTotal  <- function (semaine) {\n    ChoixAnnee(input$Annee)\n    pilotage_data %>% filter(STEP == \"4 - Gagnée\", WEEK == semaine,\n                             OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n      summarise(TOTAL_CA_VENDU_N__KE = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE))\n  }\n  \noutput$ca_box <- renderInfoBox({\n  n <-  sprintf(\"%.1f %%\",caBT()[1]/Objectif_BT*100) \n  infoBox(\"CA BT\", value = str_c(round(caBT()[1], digits = 0),\"k€\",sep = \" \"),\n          \n          subtitle = str_c(str_c(n,\" :\"),\"Semaine\",input$semaine,sep = \" \"),\n          icon = icon(\"eur\"),\n          color = \"aqua\")\n})\n\noutput$ca_production <- renderInfoBox({\n  n <- sprintf(\"%.1f %%\",caSemaineTotal(input$semaine)/Objectif_CA*100)\n  infoBox(\"Vente\", value = str_c(round(caSemaineTotal(input$semaine), digits = 0),\"k€\",sep = \" \"),\n          subtitle = str_c(str_c(\"Semaine\",input$semaine,sep = \" \"),n,sep =\" > \"),\n          icon = icon(\"bar-chart\"),\n          color = \"aqua\")\n})\n\noutput$nbMission <- renderInfoBox({\n  ChoixAnnee(input$Annee)\n  nb <-  pilotage_data %>% filter(STEP == \"4 - Gagnée\", WEEK == input$semaine,OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n    summarize(count = n())\n  infoBox(\"Nb Missions gagnées\", value = nb,\n          subtitle = str_c(\"Semaine\",input$semaine,sep = \" \"),\n          icon = icon(\"info-circle\"),\n          color = \"aqua\")\n})\n\ncaPipe <- reactive ({\n  ChoixAnnee(input$Annee)\n  pilotage_data %>%\n    filter(WEEK == input$semaine,\n           PROB >= input$uiS1[1]/100, PROB <= input$uiS1[2]/100,\n           OFFRE_PRINCIPALE %in% input$uiChk1,\n           STEP %in% input$uiChk2) %>%\n    summarise(TOTAL_CA_VENDU_N__KE = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE))\n}) \n\noutput$pipe_ca <- renderInfoBox({\n  ChoixAnnee(input$Annee)\n  infoBox(\"Pipe CA Total\", value = str_c(round(caPipe()[1], digits = 0),\"k€\",sep = \" \"),\n          subtitle = str_c(\"Semaine\",input$semaine,sep = \" \"),\n          icon = icon(\"eur\"),\n          color= \"aqua\")\n})\n\ncaPipeBT <- reactive ({\n  pilotage_data %>%\n    filter(WEEK == input$semaine,\n           PROB >= input$uiS1[1]/100,PROB <= input$uiS1[2]/100,\n           OFFRE_PRINCIPALE %in% input$uiChk1,\n           STEP %in% input$uiChk2) %>%\n    summarise(CA_BT__N__KE = sum(CA_BT_PONDERE__N__KE, na.rm = TRUE))\n}) \n\noutput$pipe_caBT <- renderInfoBox({\n  infoBox(\"Pipe BT pondéré\", width=2,value = str_c(round(caPipeBT()[1], digits = 0),\"k€\",sep = \" \"),\n          subtitle = str_c(\"Semaine\",input$semaine,sep = \" \"),\n          icon = icon(\"eur\"),\n          color= \"aqua\")\n})\n\nnbPipeBT <- reactive ({\n  ChoixAnnee(input$Annee)\n  pilotage_data %>%\n    filter(WEEK == input$semaine,\n           PROB >= input$uiS1[1]/100,PROB <= input$uiS1[2]/100,\n           OFFRE_PRINCIPALE %in% input$uiChk1,\n           STEP %in% input$uiChk2) %>%\n    summarise(n = n())\n})\n\noutput$pipe_nb <- renderInfoBox({\n  infoBox(\"Nb d'opportunités\", value = round(nbPipeBT()[1], digits = 0),\n          subtitle = str_c(\"Semaine\",input$semaine,sep = \" \"),\n          icon = icon(\"info-circle\"),\n          color= \"aqua\")\n})\n\noutput$pipe1_plot <- renderPlot({\n  pilotage_data %>%\n    filter(\n      WEEK == input$semaine,\n      PROB > input$uiS1[1]/100,\n      PROB <= input$uiS1[2]/100,\n      OFFRE_PRINCIPALE %in% input$uiChk1,\n      STEP %in% input$uiChk2) %>% select (COMPTE,TOTAL_CA_VENDU_N__KE,OFFRE_PRINCIPALE) %>%\n    group_by(COMPTE,OFFRE_PRINCIPALE) %>%\n    summarise(CA_TOT = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE)) %>%\n    ggplot(aes(x = reorder(COMPTE,CA_TOT),\n               y = CA_TOT, fill= OFFRE_PRINCIPALE )) +\n    geom_bar(stat = \"identity\") + coord_flip() +\n    scale_fill_manual(name = \"OFFRE\",values = group.colors)+\n    scale_x_discrete(name=\"Clients\") +\n    scale_y_continuous(name=\"CA TOTAL\") +\n    theme(legend.direction = \"horizontal\", legend.position=\"bottom\", legend.box = \"horizontal\")\n})\n\noutput$ca_plot <- renderPlot({\n  ChoixAnnee(input$Annee)\n  pilotage_data %>%\n    filter(STEP == \"4 - Gagnée\", WEEK == input$semaine,\n           OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n    group_by(GROUPE) %>%\n    summarise(CA_GAGNE = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE)) %>%\n    filter (CA_GAGNE >= input$uiS5[1],CA_GAGNE <= input$uiS5[2]) %>%\n    ggplot(aes(x = reorder(GROUPE, CA_GAGNE), \n               y = CA_GAGNE)) +\n    geom_bar(stat = \"identity\", fill=\"#00A8E8\") +\n    scale_fill_brewer(palette = \"YlOrRd\") + # il y a aussi un scale_color_brewer\n    labs(x = \"Groupe\",\n         y = \"Chiffre d'affaires Total gagné (k€)\",\n         fill = \"\") +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 75, hjust = 1), legend.position=\"bottom\")\n})\n\noutput$compare_plot <- renderPlot({\n  p2015 <- pilotage_2015  %>% mutate(YEAR=2015) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  p2016 <- pilotage_2016  %>% mutate(YEAR=2016) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  \n  p2017 <- pilotage_2017  %>% mutate(YEAR=2017) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,YEAR)\n  pilotage_tot <- bind_rows(p2015, p2016, p2017)\n  \n  format_ca <- function(x) {\n    str_c(format(x, big.mark = \" \"), \" K€\")\n  }\n  \n  max_week_2017 <- maxWeek\n  pilotage_tot %>% \n    mutate(YEAR = factor(YEAR)) %>% \n    filter(STEP == \"4 - Gagnée\") %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE)) %>%\n    ungroup() %>% \n    ggplot(aes(x = WEEK, y = CA_TOT, colour = YEAR)) +\n    geom_line() +\n    geom_vline(xintercept = max_week_2017) +\n    coord_cartesian(ylim = c(1000, 15000)) +\n    scale_y_continuous(labels = format_ca) +\n    labs(x = \"Numéro de semaine\",\n         y = \"CA total BT\") +\n    ggtitle(\"Comparaison des CA BT 2015 à 2017\")+\n    theme_bw()\n})\n\noutput$compare2_plot <- renderPlot({\n  p2015 <- pilotage_2015  %>% mutate(YEAR=2015) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  p2016 <- pilotage_2016  %>% mutate(YEAR=2016) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  \n  p2017 <- pilotage_2017  %>% mutate(YEAR=2017) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,YEAR)\n  pilotage_tot <- bind_rows(p2015, p2016, p2017)\n  \n  format_ca <- function(x) {\n    str_c(format(x, big.mark = \" \"), \" K€\")\n  }\n  \n  p2016 <- pilotage_tot %>% \n    filter(YEAR == 2016) %>% \n    filter(STEP == \"4 - Gagnée\") %>%\n    left_join(effectif_2016, by = c(\"WEEK\", \"YEAR\")) %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE),\n              POIDS_EFFECTIF_TOT = first(POIDS_EFFECTIF_TOT)) %>%\n    mutate(ANNEE=2016)\n  \n  P2015 <- pilotage_tot %>% \n    filter(YEAR == 2015) %>%\n    filter(STEP == \"4 - Gagnée\") %>%\n    left_join(effectif_2015, by = c(\"WEEK\", \"YEAR\")) %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE),\n              POIDS_EFFECTIF_TOT = first(POIDS_EFFECTIF_TOT)) %>%\n    mutate(ANNEE=2015)\n  \n  P2017 <- pilotage_tot %>% \n    filter(YEAR == 2017) %>% \n    filter(STEP == \"4 - Gagnée\") %>%\n    left_join(effectif_2017, by = c(\"WEEK\", \"YEAR\")) %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE),\n              POIDS_EFFECTIF_TOT = first(POIDS_EFFECTIF_TOT)) %>%\n    mutate(ANNEE=2017)\n  \n  p <- rbind(P2015,p2016,P2017)\n  \n  p %>% mutate(ANNEE = factor(ANNEE)) %>%\n    mutate(CA_NORM = CA_TOT / POIDS_EFFECTIF_TOT) %>% \n    ggplot(aes(x = WEEK, y = CA_NORM, colour = ANNEE)) +\n    geom_line() +\n    scale_y_continuous(labels = format_ca) +\n    labs(x = \"Numéro de semaine\",\n         y = \"CA normalisé\") +\n    #facet_wrap(~ OFFRE_PRINCIPALE) +\n    ggtitle(\"Evolution du CA BT pondéré par l'effectif à date\") + \n    theme_bw()\n})\n\nCATableau <- reactive ({\n  #Dans un premier temps on regarde quels sont les Groupes qui ont un CA compris entre 2 valeurs\n  DD <- pilotage_data%>% filter(STEP == \"4 - Gagnée\",\n                                WEEK == input$semaine,\n                                OFFRE_PRINCIPALE %in% input$uiChk1) %>% group_by(GROUPE) %>%\n    summarise(CA_GAGNE = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE)) %>%\n    filter (CA_GAGNE >input$uiS5[1],CA_GAGNE < input$uiS5[2]) %>% select(GROUPE)\n  \n  pilotage_data%>% filter(STEP == \"4 - Gagnée\") %>% filter (GROUPE %in% DD$GROUPE) %>%\n    select (GROUPE, COMPTE, SUJET, OFFRE_PRINCIPALE, CA_BT__N__KE, TOTAL_CA_VENDU_N__KE)\n  \n}) \n\noutput$DTCABT = DT::renderDataTable(rownames = TRUE, \n                                    CATableau()\n)\n\n\nStaffTableau <- reactive ({\n  #on va regarder par personne le nb de jours par mois \n  #Evolution du staffing Ferme entre 2 semaines\n  #on remplace tous les NA par des 0\n  #Semaine 10\n  S11 <- Staffing %>% \n    replace_na(list(JANV=0,FEV=0,MAR=0,AVR=0,MAI=0,JUIN= 0,JUIL= 0,AOUT= 0,SEPT= 0,OCT= 0,NOV= 0,DEC= 0)) %>%\n    #filter(TYPE %in% input$Staff)  %>%\n    group_by(CONSULTANTS) %>% summarize(TotalVendu=sum(JANV+FEV+MAR+AVR+MAI+JUIN+JUIL+AOUT+SEPT+OCT+NOV+DEC))\n  \n  #semaine 11\n  S10 <-  StaffingS10 %>% \n    replace_na(list(JANV=0,FEV=0,MAR=0,AVR=0,MAI=0,JUIN= 0,JUIL= 0,AOUT= 0,SEPT= 0,OCT= 0,NOV= 0,DEC= 0)) %>%\n    #filter(TYPE %in% input$Staff) %>%\n    group_by(CONSULTANTS) %>% summarize(TotalVendu=sum(JANV+FEV+MAR+AVR+MAI+JUIN+JUIL+AOUT+SEPT+OCT+NOV+DEC))\n  \n  #On compare S10 et S11 pour voir les évolutions\n  ecart <- inner_join(S10, S11, by=\"CONSULTANTS\")\n  colnames(ecart) <- c(\"CONSULTANTS\",\"FERME_S1\",\"FERME_S2\")\n  # ecartPositifs <- ecart %>% mutate (DELTA =FERME_S2-FERME_S1 ) %>%\n  #   filter(DELTA >0)\n  \n  ecart <- ecart %>% mutate (DELTA =FERME_S2-FERME_S1 ) %>%\n    filter(DELTA !=0)\n  \n  #on regarde les ecarts entre S11 et S10 sur les personnes en ecarts négatifs\n  \n  S11 <- Staffing %>% \n    #filter(TYPE %in% input$Staff)  %>% \n    select(CONSULTANTS,TYPE,MISSIONS,ID_TOTEM,TOTAL)\n  S10 <- StaffingS10 %>% \n    #filter(TYPE %in% input$Staff) %>% \n    select(CONSULTANTS,TYPE,MISSIONS,ID_TOTEM,TOTAL)\n  \n  \n  #il faut regarder les lignes différentes \n  \n  resultatDiff <- diff_data(S10,S11)\n  #on recupere dans un dataframe le resultat\n  ENegatfis <- as.data.frame(resultatDiff$get_matrix())\n  #on remplace le texte \"NA\" par 0\n  ENegatfis[ENegatfis$V6==\"NA\",6] <- 0\n  ENegatfis <- ENegatfis %>% \n    mutate(V1= as.character(V1))%>% \n    replace_na(list(V6=0))%>%\n    mutate(V7= ifelse(grepl(\"->\",V6),as.character(V6),paste(V6,\"->0\"))) %>%\n    filter(V1 %in% c(\"+++\",\"---\",\"->\")) %>% #,V3 %in% input$Staff) %>%\n    mutate(V1= ifelse(V1==\"->\",\"mod\",V1)) %>% \n    \n    separate(V7, into = c(\"SPrev\",\"S\"), sep = \"->\",convert=TRUE) %>%\n    replace_na(list(S=0,SPrev=0)) %>%\n    # mutate(S= as.numeric(S)) %>% \n    mutate(S=ifelse(V1==\"+++\",SPrev,S))%>%\n    mutate(SPrev= ifelse(V1==\"+++\",0,SPrev))%>%\n    \n    mutate(DELTA=S-SPrev) %>% filter(DELTA!=0)\n  \n  colnames(ENegatfis)  <-  c('Changement', 'Consultant', 'Type', 'Mission', 'TOTEM', 'Total',\"Semaine prev\", 'Semaine','DELTA')\n  ENegatfis <-ENegatfis %>% \n    mutate(Mission=ifelse(grepl(\"->\",Mission),paste(\"<font color=#BC0E1F>\",Mission,\"</font>\"),paste(Mission,\"\"))) %>%\n    mutate(TOTEM=ifelse(grepl(\"->\",TOTEM),paste(\"<font color=#BC0E1F>\",TOTEM,\"</font>\"),paste(TOTEM,\"\"))) %>%\n    mutate(Total=ifelse(grepl(\"->\",Total),paste(\"<font color=#BC0E1F>\",Total,\"</font>\"),paste(Total,\"\"))) \n  \n  datatable(ENegatfis, \n            escape = FALSE, #permet de mettre du HTML\n    rownames = FALSE,\n    options = list(\n      columnDefs = list(list(className = 'dt-center', targets = 5)),\n      pageLength = 50))  %>%\n    formatStyle(\n      'Changement',\n      target = 'row',\n      backgroundColor = styleEqual(c(\"+++\", \"---\",\"mod\"), c('#99E8D8', '#FEB7B2','#E3F2FD'))\n    )\n}) \n\noutput$DTSTAFF = DT::renderDataTable( StaffTableau()\n \n)\n\nPipeTableau <- reactive ({\n  S10 <- pilotage_2017 %>% filter(WEEK==max(pilotage_data$WEEK)-1) %>% \n  select (COMPTE,ASSOCIE, SUJET,STEP,PROB,CODE_TOTEM,TOTAL_CA_VENDU_N__KE)\n  S11 <- pilotage_2017 %>% filter(WEEK==max(pilotage_data$WEEK)) %>% select (COMPTE,ASSOCIE, SUJET,STEP,PROB,CODE_TOTEM,TOTAL_CA_VENDU_N__KE)\n  \n  resultatDiff <- diff_data(S10,S11)\n  \n  my_fun <- function(x){\n    res_X = \n      do(my_fun(x=.$x))\n    return(data.frame(res_x, res_y))\n  }\n  \n\n  \n  #on recupere dans un dataframe le resultat\n  Ecarts <- as.data.frame(resultatDiff$get_matrix())\n  Ecarts <- Ecarts %>% \n    mutate(V1= as.character(V1)) %>% \n    filter(V1 %in% c(\"+++\",\"---\",\"->\")) %>%\n    mutate(V1= ifelse(V1==\"->\",\"mod\",V1)) %>%\n    mutate(V9= ifelse(grepl(\"->\",V5),as.character(V5),paste(V5,\"->\",V5))) %>%\n    separate(V9, into = c(\"Step\",\"StepNew\"), sep = \"->\") %>%\n    mutate(StepNew=trimws(StepNew))\n  \n  Ecarts <- Ecarts %>% filter(V1 %in% input$uiModifEcart, StepNew %in% input$uiStepEcart)\n  colnames(Ecarts)  <-  c('Modif',\"COMPTE\",\"ASSOCIE\", \"SUJET\",\"STEP\",\"PROB\",\"CODE_TOTEM\",\"CA_VENDU_KE\",\"Step\",\"StepNew\")\n  Ecarts <- Ecarts %>%\n    mutate(COMPTE=ifelse(grepl(\"->\",COMPTE),paste(\"<font color=#BC0E1F>\",COMPTE,\"</font>\"),paste(COMPTE,\"\"))) %>%\n    mutate(ASSOCIE=ifelse(grepl(\"->\",ASSOCIE),paste(\"<font color=#BC0E1F>\",ASSOCIE,\"</font>\"),paste(ASSOCIE,\"\"))) %>%\n    mutate(SUJET=ifelse(grepl(\"->\",SUJET),paste(\"<font color=#BC0E1F>\",SUJET,\"</font>\"),paste(SUJET,\"\"))) %>%\n    mutate(STEP=ifelse(grepl(\"->\",STEP),paste(\"<font color=#BC0E1F>\",STEP,\"</font>\"),paste(STEP,\"\"))) %>%\n    mutate(PROB=ifelse(grepl(\"->\",PROB),paste(\"<font color=#BC0E1F>\",PROB,\"</font>\"),paste(PROB,\"\"))) %>%\n    mutate(CODE_TOTEM=ifelse(grepl(\"->\",CODE_TOTEM),paste(\"<font color=#BC0E1F>\",CODE_TOTEM,\"</font>\"),paste(CODE_TOTEM,\"\"))) %>%\n    mutate(CA_VENDU_KE=ifelse(grepl(\"->\",CA_VENDU_KE),paste(\"<font color=#BC0E1F>\",CA_VENDU_KE,\"</font>\"),paste(CA_VENDU_KE,\"\")))\n   \n    \n\n    \n  datatable(Ecarts, escape = FALSE, rownames=FALSE, \n            options = list(autoWidth = TRUE,\n                           columnDefs = list(list(width = '400px', targets = 3),list(width = '300px', targets = 4)))) %>% \n    formatStyle(\n      'Modif',\n      target = 'row',\n      backgroundColor = styleEqual(c(\"+++\", \"---\",\"mod\",\"...\"), c('#99E8D8', '#FEB7B2','#E3F2FD','red'))\n    )\n  \n})\n\noutput$DTPIPEEcarts = DT::renderDataTable( PipeTableau()\n                                      \n)\noutput$chartCABT <- renderGvis({\n  ChoixAnnee(input$Annee)\n\n  tmp <- pilotage_2016 %>% select (SUJET,  PROB, OFFRE_PRINCIPALE, \n                                   GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE, \n                                   SECTEUR, LEAD__RESP, WEEK, STEP,DATE_REF)\n  tmp2 <- pilotage_2015 %>% select (SUJET,  PROB, OFFRE_PRINCIPALE, \n                                    GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE, SECTEUR, \n                                    LEAD__RESP, WEEK, STEP,DATE_REF)\n  tmp3 <- pilotage_2017 %>% select (SUJET,  PROB, OFFRE_PRINCIPALE, \n                                   GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE, \n                                   SECTEUR, LEAD__RESP, WEEK, STEP,DATE_REF)\n  \n  Pilotage <- rbind(tmp, tmp2,tmp3)\n  \n  evol_pipe <- Pilotage %>% \n    filter(STEP == \"4 - Gagnée\",\n           !is.na(TOTAL_CA_VENDU_N__KE)) %>% \n    select (SUJET,  PROB, OFFRE_PRINCIPALE, GROUPE, TOTAL_CA_VENDU_N__KE, CA_BT_PONDERE__N__KE, SECTEUR, LEAD__RESP, WEEK, \n            STEP,DATE_REF)\n  # on regarde le montant ponderee dans le temps par semaine\n  data_ts <- evol_pipe %>% filter(!is.na(GROUPE)) %>% group_by (GROUPE,DATE_REF ) %>% \n    summarise (CA_TOTAL=sum(TOTAL_CA_VENDU_N__KE , na.rm = TRUE)) %>%\n    select(GROUPE,CA_TOTAL,DATE_REF) \n  df <- as_data_frame(data_ts)\n  df <- df %>% mutate(GROUPE=factor(GROUPE))\n  myState <- '\n  {\"xAxisOption\":\"_TIME\",\n  \"playDuration\":15000,\n  \"showTrails\":false,\n  \"orderedByX\":false,\"xLambda\":1,\n  \"colorOption\":\"_UNIQUE_COLOR\"}'\n  ex <- gvisMotionChart(df, idvar=\"GROUPE\", timevar = \"DATE_REF\", \n                  xvar = \"CA_TOTAL\", yvar = \"CA_TOTAL\",\n                  options=list(title=\"Evolution du pipe\", gvis.editor=\"Edit me!\",width=850,\n                               state=myState))  \n})\n\npipeTableau <- reactive ({\n  \n  cpt <- pilotage_data %>%\n    filter(\n      WEEK == input$semaine,\n      PROB > input$uiS1[1]/100,\n      PROB <= input$uiS1[2]/100,\n      OFFRE_PRINCIPALE %in% input$uiChk1,\n      STEP %in% input$uiChk2) %>% select (COMPTE,TOTAL_CA_VENDU_N__KE,OFFRE_PRINCIPALE) %>%\n    group_by(COMPTE,OFFRE_PRINCIPALE) %>%\n    summarise(CA_TOT = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE)) %>%\n    select (COMPTE)\n  \n  d <- pilotage_data %>%\n    filter(COMPTE %in% cpt$COMPTE,\n      WEEK == input$semaine,\n      PROB >= input$uiS1[1]/100,\n      PROB <= input$uiS1[2]/100,\n      OFFRE_PRINCIPALE %in% input$uiChk1,\n      STEP %in% input$uiChk2) %>%\n    \n    select(COMPTE, PROB, SUJET, OFFRE_PRINCIPALE, STEP, CA_BT__N__KE, CA_BT_PONDERE__N__KE, TOTAL_CA_VENDU_N__KE)\n  colnames(d) <- c(\"COMPTE\", \"PROB\", \"SUJET\", \"OFFRE\", \"STEP\", \"CA BT\", \"CA BT PONDERE\", \"TOTAL\")\n  d\n}) \noutput$DTtable = DT::renderDataTable(rownames = FALSE, \n  pipeTableau()\n)\n\noutput$chartPipe3 <- renderGvis({\n  weekChoix <- ifelse(input$uiS6[2]>=maxWeek,maxWeek,input$uiS6[2])\n  ChoixAnnee(input$Annee)\n  PropalDebut <- pilotage_data %>% \n            filter (PROB < 1, WEEK== input$uiS6[1],\n                    OFFRE_PRINCIPALE %in% input$uiChk1,\n                    STEP %in% c(\"0 - A qualifier\", \"1 - Qualifiée\", \"2 - A émettre\", \"3 - Emise\" )\n          ) %>% \n    mutate (link= paste(COMPTE,SUJET,sep=\" > \" )) %>%\n    select (link, PROB,CA_BT__N__KE)\n  colnames(PropalDebut) <- c(\"link\",\"ProbaS2\",\"CAinit\")\n  \n  PropalFin <- pilotage_data %>% \n    mutate (link= paste(COMPTE,SUJET,sep= \" > \")) %>%\n    filter (link %in% PropalDebut$link, WEEK== weekChoix) %>% \n    select (link, PROB, CA_BT__N__KE)\n  demo <- left_join(PropalFin,PropalDebut, by=\"link\")\n  demo <- demo %>% replace_na(list(CAinit = 0, CA_BT__N__KE = 0))\n  \n  datSK <- demo %>% group_by(ProbaS2,PROB) %>% summarise(CA = sum(CA_BT__N__KE)) \n  \n  datSK <- datSK %>%arrange (ProbaS2) %>% rowwise() %>%\n    mutate (From=paste(toString(ProbaS2*100),\".%\")) %>%\n    mutate (To=paste(toString(PROB*100),\"%\")) %>% arrange(From) %>% select (From,To,CA) \n  \n  Sankey <- gvisSankey(datSK, from=\"From\", to=\"To\", weight=\"CA\",\n                       options=list(height=400,width=900,\n                                    \n                                    sankey=\"{\n                                    link: {color: { fill: '#d799ae' },\n                                    colorMode: 'gradient',\n                                    colors: ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n                                    '#cab2d6', '#ffff99', '#1f78b4', '#33a02c' ]\n                                    },\n                                    node: { colors: ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n                                    '#cab2d6', '#ffff99', '#1f78b4', '#33a02c' ],\n                                    label: { color: '#871b47' },\n                                    nodePadding: 20\n                                    }\n}\"))\n\n  })\n\n# output$chartPipe3bis <- renderGvis({\n#   weekChoix <- ifelse(input$uiS6[2]>=maxWeek,maxWeek,input$uiS6[2])\n#   ChoixAnnee(input$Annee)\n#   PropalDebut <- pilotage_data %>% \n#     filter (PROB < 1, WEEK== input$uiS6[1],\n#             OFFRE_PRINCIPALE %in% input$uiChk1,\n#             STEP %in% c(\"0 - A qualifier\", \"1 - Qualifiée\", \"2 - A émettre\", \"3 - Emise\" )\n#     ) %>% group_by(PROB) %>%  summarise(CA = sum(CA_BT__N__KE)) %>%\n#     select (PROB,CA_BT__N__KE)\n#   colnames(PropalDebut) <- c(\"ProbaS2\",\"CAinit\")\n#   \n#   PropalFin <- pilotage_data %>% filter (link %in% PropalDebut$link, WEEK== weekChoix)\n#   %>% group_by(PROB) %>%  summarise(CA = sum(CA_BT__N__KE)) %>%\n#   select ( PROB, CAFin)\n#   demo <- left_join(PropalFin,PropalDebut, by=\"PROB\")\n#   demo <- demo %>% replace_na(list(CAinit = 0, CAFin = 0))\n#   \n#   datSK <- demo %>% group_by(ProbaS2,PROB) %>% summarise(CA = sum(CA_BT__N__KE)) \n#   \n#   datSK <- datSK %>%arrange (ProbaS2) %>% rowwise() %>%\n#     mutate (From=paste(toString(ProbaS2*100),\".%\")) %>%\n#     mutate (To=paste(toString(PROB*100),\"%\")) %>% arrange(From) %>% select (From,To,CA) \n#   \n#   Sankey <- gvisSankey(datSK, from=\"From\", to=\"To\", weight=\"CA\",\n#                        options=list(height=400,width=900,\n#                                     \n#                                     sankey=\"{\n#                                     link: {color: { fill: '#d799ae' },\n#                                     colorMode: 'gradient',\n#                                     colors: ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n#                                     '#cab2d6', '#ffff99', '#1f78b4', '#33a02c' ]\n#                                     },\n#                                     node: { colors: ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n#                                     '#cab2d6', '#ffff99', '#1f78b4', '#33a02c' ],\n#                                     label: { color: '#871b47' },\n#                                     nodePadding: 20\n#                                     }\n# }\"))\n# \n#   })\n\noutput$lost1 <- renderInfoBox({\n  ChoixAnnee(input$Annee)\n  nb <- pilotage_data %>%  filter(STEP %in% input$uiChk3,\n                                  OFFRE_PRINCIPALE %in% input$uiChk1,\n                                  WEEK == input$semaine,\n                                  TOTAL_CA_VENDU_N__KE >input$uiS2[1],\n                                  TOTAL_CA_VENDU_N__KE <= input$uiS2[2]\n  ) %>%\n    summarize(count = n())\n  \n  infoBox(\"nb mission\", value = nb,\n          \n          icon = icon(\"info\"),\n          color = \"orange\")\n})\n\noutput$lost2 <- renderInfoBox({\n  ChoixAnnee(input$Annee)\n  nb <- pilotage_data %>%  filter(STEP %in% input$uiChk3, \n                                  WEEK == input$semaine,\n                                  OFFRE_PRINCIPALE %in% input$uiChk1,\n                                  TOTAL_CA_VENDU_N__KE >input$uiS2[1],\n                                  TOTAL_CA_VENDU_N__KE <= input$uiS2[2]\n  ) %>%\n    summarize(sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE))\n  \n  infoBox(\"Montants perdus\", value = nb,\n          \n          icon = icon(\"eur\"),\n          color = \"orange\")\n}) \n\n\noutput$lost_plot <- renderPlot({\n  ChoixAnnee(input$Annee)\n  pilotage_data %>%\n    filter(STEP %in% input$uiChk3,\n           WEEK == input$semaine,\n           OFFRE_PRINCIPALE %in% input$uiChk1,\n           TOTAL_CA_VENDU_N__KE >input$uiS2[1],\n           TOTAL_CA_VENDU_N__KE <= input$uiS2[2]) %>%\n    select (COMPTE,TOTAL_CA_VENDU_N__KE,OFFRE_PRINCIPALE) %>%\n    group_by(COMPTE,OFFRE_PRINCIPALE) %>%\n    summarise(CA_TOT = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE)) %>%\n    ggplot(aes(x = reorder(COMPTE,CA_TOT),\n               y = CA_TOT, fill= OFFRE_PRINCIPALE )) +\n    scale_fill_manual(name = \"OFFRE_PRINCIPALE\",\n                      values = group.colors)+\n    geom_bar(stat = \"identity\")+theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position=\"bottom\",legend.title = element_blank())\n})\n\nlostTableau <- reactive ({\n  ChoixAnnee(input$Annee)\n  pilotage_data %>%\n    filter(STEP %in% input$uiChk3,\n           WEEK == input$semaine,\n           TOTAL_CA_VENDU_N__KE > input$uiS2[1],\n           TOTAL_CA_VENDU_N__KE <= input$uiS2[2],\n           OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n    select(COMPTE, SUJET, OFFRE_PRINCIPALE, STEP, CA_BT__N__KE, TOTAL_CA_VENDU_N__KE)\n}) \noutput$DTlost = DT::renderDataTable(rownames = FALSE,\n                                    lostTableau()\n)\n\n\noutput$saff1_box <- renderInfoBox({\n  listMois <-  my_cols[input$uiS3[1]:input$uiS3[2]]\n  nb <- staffFerme %>% filter( GRADE %in% input$uiChk4 ) %>% \n    select ( one_of(listMois)) %>%\n    summarise_each(funs(sum)) %>%\n    rowSums()\n  \n  infoBox(\"Jours fermes\", value = nb,\n          subtitle = \"sur la periode séléctionnée\",\n          icon = icon(\"male\"),\n          color = \"aqua\")\n}) \noutput$saff2_box <- renderInfoBox({\n  listMois <-  my_cols[input$uiS3[1]:input$uiS3[2]]\n  nb <- staffProvisiore %>% filter( GRADE %in% input$uiChk4 ) %>% \n    select ( one_of(listMois)) %>%\n    summarise_each(funs(sum)) %>%\n    rowSums()\n  \n  infoBox(\"Jours Prévi.\", value = nb,\n          subtitle = \"sur la periode séléctionnée\",\n          icon = icon(\"search-plus\"),\n          color = \"aqua\")\n})   \n\noutput$saff3_box <- renderInfoBox({\n  listMois <-  my_cols[input$uiS3[1]:input$uiS3[2]]\n  nb <- staffconges %>% filter( GRADE %in% input$uiChk4 ) %>% \n    select ( one_of(listMois)) %>%\n    summarise_each(funs(sum)) %>%\n    rowSums()\n  \n  infoBox(\"Jours de congés\", value = nb,\n          subtitle = \"nb jours sur la periode\",\n          icon = icon(\"plane\"),\n          color = \"aqua\")\n})   \n\nobserveEvent(input$btn1, {\n  updateCheckboxGroupInput(session=session, inputId=\"uiChk4\", selected=c(\"2-C\", \"3-CC\", \"4-CS\"))\n})\n\nobserveEvent(input$btn2, {\n  updateCheckboxGroupInput(session=session, inputId=\"uiChk4\", selected=c(\"5-MNG\", \"6-SM\", \"7-DIR\", \"8-ASS\"))\n})\nobserveEvent(input$btn3, {\n  updateCheckboxGroupInput(session=session, inputId=\"uiChk4\", selected=c(\"A1-AE\", \"A2-AES\"))\n})\n\nobserveEvent(input$btn4, {\n  updateCheckboxGroupInput(session=session, inputId=\"uiChk4\", selected=c(\"D1-DS1\", \"D3-DS3\"))\n})\n\n\n\noutput$staff4_plot <- renderPlot({\n \n  #cumul des jh en incluant les congÃ¨s\n  Staffing %>% \n    filter(TYPE %in% c(1,3), GRADE %in% input$uiChk4) %>% \n    group_by(CONSULTANTS,GRADE)  %>%\n    summarise(Janvier= sum(JANV, na.rm = TRUE),\n              Fevrier= sum(FEV, na.rm = TRUE),\n              Mars= sum(MAR, na.rm = TRUE),\n              Avril= sum(AVR, na.rm = TRUE),\n              Mai= sum(MAI, na.rm = TRUE),\n              Juin= sum(JUIN, na.rm = TRUE),\n              Juillet= sum(JUIL, na.rm = TRUE),\n              Aout= sum(AOUT, na.rm = TRUE),\n              Septembre= sum(SEPT, na.rm = TRUE),\n              Octobre= sum(OCT, na.rm = TRUE),\n              Novembre= sum(NOV, na.rm = TRUE),\n              Decembre= sum(DEC, na.rm = TRUE)) -> staffTemp \n  \n  #on regroupe les données\n  staffTemp %>% \n    gather(key = \"month_staff\", value = \"staff_value\", Janvier, Fevrier, Mars, Avril, \n           Mai, Juin, Juillet, Aout, Septembre, Octobre, Novembre, Decembre) -> staffCumul \n  \n  #on calcule le taux de staffing en fonction des jours ouvrés par mois\n  staffTemp %>% \n    mutate (Jan_Taux = Janvier/nbjours[1],\n            Fev_Taux = Fevrier/nbjours[2],\n            Mar_Taux = Mars/nbjours[3],\n            Avr_Taux = Avril/nbjours[4],\n            Mai_Taux = Mai/nbjours[5],\n            Juin_Taux = Juin/nbjours[6],\n            Juil_Taux = Juillet/nbjours[7],\n            Aou_Taux = Aout/nbjours[8],\n            Sep_Taux = Septembre/nbjours[9],\n            Oct_Taux = Octobre/nbjours[10],\n            Nov_Taux = Novembre/nbjours[11],\n            Dec_Taux = Decembre/nbjours[12]) %>%\n    select (CONSULTANTS,GRADE,Jan_Taux, Fev_Taux, Mar_Taux, Avr_Taux, \n            Mai_Taux, Juin_Taux, Juil_Taux,Aou_Taux, Sep_Taux, Oct_Taux, Nov_Taux, Dec_Taux)-> staffTemp2\n  \n  staffTemp2 %>%\n    gather(key = \"month_staff\", value = \"staff_value\", Jan_Taux, Fev_Taux, Mar_Taux, Avr_Taux, \n           Mai_Taux, Juin_Taux, Juil_Taux,Aou_Taux, Sep_Taux, Oct_Taux, Nov_Taux, Dec_Taux) -> staffTaux \n  mois <- c(\"Jan_Taux\", \"Fev_Taux\", \"Mar_Taux\", \"Avr_Taux\", \n            \"Mai_Taux\", \"Juin_Taux\", \"Juil_Taux\",\"Aou_Taux\", \"Sep_Taux\", \"Oct_Taux\", \"Nov_Taux\", \"Dec_Taux\")\n  nomMois <- mois[nbMois]\n  \n  #on recupere les mois a prendre en compte ainsi que les grades\n  st <-  staffTaux\n  valeurmois <- seq(1, 12, by = 1)\n  moisTaux <- data.frame(mois,valeurmois)\n  \n  st <- left_join(st, moisTaux, by=c(\"month_staff\" = \"mois\"))\n  mois <- mois[input$uiS3[1]:input$uiS3[2]]\n  st <- st %>% filter(month_staff %in% mois) \n  \n  #on ne garde que les personnes présente à date dans le graphe\n  #PErsonnes qui doivent encore partir d'ici la fin de l'année\n  Nom1 <- effectifs %>% filter (!is.na(DATESORTIE)) %>% \n    filter (DATESORTIE>  today()) %>% \n    mutate(NOM=toupper(NOM)) %>%\n    select(NOM)\n  #Pésents à date \n  Nom2 <- effectifs %>% \n    filter (is.na(DATESORTIE)) %>% \n    mutate(NOM=toupper(NOM)) %>%\n    select(NOM)\n  \n  #Personnes ayant changé de grade dans l'année\n  NOM <- c(\"FAIBIS2\",\"GIRARD2\")\n  Nom3 <- data.frame(NOM)\n  Noms <- full_join(Nom1, Nom2)\n  Noms <- full_join(Noms, Nom3)             \n  st <- st %>% filter(toupper(CONSULTANTS) %in% Noms$NOM)  \n  filtreNom <- st %>% filter(valeurmois == nbMois, staff_value <=  input$uiS4)\n  \n  \n  st$valeurmois <- factor(st$valeurmois)\n  \n  #on plot le resultat\n  st %>%  filter(CONSULTANTS %in% filtreNom$CONSULTANTS) %>%\n    ggplot( aes(valeurmois, CONSULTANTS, fill = staff_value)) + \n    geom_tile(colour=\"white\")+\n    scale_fill_gradient(low = \"white\", high = \"#00A8E8\") +\n    ggtitle(\"Taux de staffing \") + \n    geom_text( aes(valeurmois, CONSULTANTS, label = percent(staff_value)),\n               color=\"black\", \n               size=rel(4))+\n    geom_vline(xintercept=nbMois, color = \"red\", alpha = 0.2, size=12) +\n    theme(axis.line = element_line(colour = \"black\"),\n          panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.border = element_blank(),\n          panel.background = element_blank(),\n          legend.direction = \"horizontal\", legend.position=\"bottom\", legend.box = \"horizontal\") \n})\n\n\noutput$timelineGroups <- renderTimevis({\n  Debut <- c(\"2017-01-01\", \"2017-02-01\",\"2017-03-01\",\n             \"2017-04-01\", \"2017-05-01\",\"2017-06-01\",\n             \"2017-07-01\", \"2017-08-01\",\"2017-09-01\",\n             \"2017-10-01\", \"2017-11-01\",\"2017-12-01\",\n             \"2018-01-01\", \"2018-02-01\",\"2018-03-01\")\n  Fin <-  c(\"2017-01-31\", \"2017-02-28\",\"2017-03-31\",\n            \"2017-04-30\", \"2017-05-31\",\"2017-06-30\",\n            \"2017-07-31\", \"2017-08-31\",\"2017-09-30\",\n            \"2017-10-31\", \"2017-11-30\",\"2017-12-31\",\n            \"2017-01-31\", \"2018-02-28\",\"2018-03-31\")\n  \n  Staffing <- mutate(Staffing, id = row_number())\n  staff <- Staffing %>% \n    arrange(CONSULTANTS,MISSIONS) %>% rowwise() %>% \n            mutate(TOT = sum(JANV, FEV, MAR, AVR, MAI, JUIN, JUIL, AOUT, SEPT, OCT, NOV, DEC,\n                                                                 JANV_N_PLUS_1_, FEV_N_PLUS_1_, MAR_N_PLUS_1_, na.rm=TRUE))\n  \n  dataGroups <- staff %>% filter (GRADE %in% input$uiChk4) %>%\n    filter (TYPE %in% c(1,2)) %>% \n    mutate (start = ifelse(! is.na(JANV), Debut[1],\n                           ifelse(! is.na(FEV), Debut[2],\n                                  ifelse(! is.na(MAR), Debut[3],\n                                         ifelse(! is.na(AVR), Debut[4],\n                                                ifelse(! is.na(MAI), Debut[5],\n                                                       ifelse(! is.na(JUIN), Debut[6],\n                                                              ifelse(! is.na(JUIL), Debut[7],\n                                                                     ifelse(! is.na(AOUT), Debut[8],\n                                                                            ifelse(! is.na(SEPT), Debut[9],\n                                                                                   ifelse(! is.na(OCT), Debut[10],\n                                                                                          ifelse(! is.na(NOV), Debut[11],\n                                                                                                 ifelse(! is.na(DEC), Debut[12],\n                                                                                                        ifelse(! is.na(JANV_N_PLUS_1_), Debut[13],\n                                                                                                               ifelse(! is.na(FEV_N_PLUS_1_), Debut[14],\n                                                                                                                      ifelse(! is.na(MAR_N_PLUS_1_), Debut[15],\"\")))))))))))))))) %>%\n    mutate (end = ifelse(! is.na(JANV_N_PLUS_1_), Fin[15],\n                         ifelse(! is.na(FEV_N_PLUS_1_), Fin[14],\n                                ifelse(! is.na(MAR_N_PLUS_1_), Fin[13],\n                                       ifelse(! is.na(DEC), Fin[12],\n                                              ifelse(! is.na(NOV), Fin[11],\n                                                     ifelse(! is.na(OCT), Fin[10],\n                                                            ifelse(! is.na(SEPT), Fin[9],\n                                                                   ifelse(! is.na(AOUT), Fin[8],\n                                                                          ifelse(! is.na(JUIL), Fin[7],\n                                                                                 ifelse(! is.na(JUIN), Fin[6],\n                                                                                        ifelse(! is.na(MAI), Fin[5],\n                                                                                               ifelse(! is.na(AVR), Fin[4],\n                                                                                                      ifelse(! is.na(MAR), Fin[3],\n                                                                                                             ifelse(! is.na(FEV), Fin[2],\n                                                                                                                    ifelse(! is.na(JANV), Fin[1],\"\")))))))))))))))) %>%\n    mutate(content = MISSIONS) %>%\n    mutate(group = CONSULTANTS) %>%\n    mutate(type = \"range\")  %>%\n    mutate(style =  ifelse(TYPE==1, \"color: black; background-color: #39A0ED;\",\"color: black; background-color: #7AC74F;\")) %>%\n    mutate(title = paste (CONSULTANTS,MISSIONS,TOT,\"jh\", sep = \" - \")) %>%\n    filter(start !=\"\", group %in% input$selUI1) %>% \n    select (id, content, start, end, group, type, title,style) \n  groups <- dataGroups %>% distinct(group) %>% mutate (content = group)\n  colnames(groups) <- c(\"id\",\"content\")\n  timevis(data = dataGroups,  group = groups, options = list(selectable=TRUE, showCurrentTime = FALSE, orientation = \"top\"))\n  \n})\n\n\noutput$timelineGroupsTOTEM <- renderTimevis({\n  Debut <- c(\"2016-01-01\", \"2016-02-01\",\"2016-03-01\",\n             \"2016-04-01\", \"2016-05-01\",\"2016-06-01\",\n             \"2016-07-01\", \"2016-08-01\",\"2016-09-01\",\n             \"2016-10-01\", \"2016-11-01\",\"2016-12-01\",\n             \"2017-01-01\", \"2017-02-01\",\"2017-03-01\")\n  Fin <-  c(\"2016-01-31\", \"2016-02-29\",\"2016-03-31\",\n            \"2016-04-30\", \"2016-05-31\",\"2016-06-30\",\n            \"2016-07-31\", \"2016-08-31\",\"2016-09-30\",\n            \"2016-10-31\", \"2016-11-30\",\"2016-12-31\",\n            \"2017-01-31\", \"2017-02-28\",\"2017-03-31\")\n  \n  Staffing <- mutate(Staffing, id = row_number())\n  staff <- Staffing %>% \n    arrange(CONSULTANTS,MISSIONS) %>% rowwise() %>% mutate(TOT = \n                                                             sum(JANV, FEV, MAR, AVR, MAI, JUIN, JUIL, AOUT, SEPT, OCT, NOV, DEC,\n                                                                 JANV_N_PLUS_1_, FEV_N_PLUS_1_, MAR_N_PLUS_1_, na.rm=TRUE))\n  \n  dataGroups <- staff %>% filter (GRADE %in% input$uiChk4) %>%\n    filter (TYPE %in% c(1,2)) %>% \n    mutate (start = ifelse(! is.na(JANV), Debut[1],\n                           ifelse(! is.na(FEV), Debut[2],\n                                  ifelse(! is.na(MAR), Debut[3],\n                                         ifelse(! is.na(AVR), Debut[4],\n                                                ifelse(! is.na(MAI), Debut[5],\n                                                       ifelse(! is.na(JUIN), Debut[6],\n                                                              ifelse(! is.na(JUIL), Debut[7],\n                                                                     ifelse(! is.na(AOUT), Debut[8],\n                                                                            ifelse(! is.na(SEPT), Debut[9],\n                                                                                   ifelse(! is.na(OCT), Debut[10],\n                                                                                          ifelse(! is.na(NOV), Debut[11],\n                                                                                                 ifelse(! is.na(DEC), Debut[12],\n                                                                                                        ifelse(! is.na(JANV_N_PLUS_1_), Debut[13],\n                                                                                                               ifelse(! is.na(FEV_N_PLUS_1_), Debut[14],\n                                                                                                                      ifelse(! is.na(MAR_N_PLUS_1_), Debut[15],\"\")))))))))))))))) %>%\n    mutate (end = ifelse(! is.na(JANV_N_PLUS_1_), Fin[15],\n                         ifelse(! is.na(FEV_N_PLUS_1_), Fin[14],\n                                ifelse(! is.na(MAR_N_PLUS_1_), Fin[13],\n                                       ifelse(! is.na(DEC), Fin[12],\n                                              ifelse(! is.na(NOV), Fin[11],\n                                                     ifelse(! is.na(OCT), Fin[10],\n                                                            ifelse(! is.na(SEPT), Fin[9],\n                                                                   ifelse(! is.na(AOUT), Fin[8],\n                                                                          ifelse(! is.na(JUIL), Fin[7],\n                                                                                 ifelse(! is.na(JUIN), Fin[6],\n                                                                                        ifelse(! is.na(MAI), Fin[5],\n                                                                                               ifelse(! is.na(AVR), Fin[4],\n                                                                                                      ifelse(! is.na(MAR), Fin[3],\n                                                                                                             ifelse(! is.na(FEV), Fin[2],\n                                                                                                                    ifelse(! is.na(JANV), Fin[1],\"\")))))))))))))))) %>%\n    mutate(content = CONSULTANTS) %>%\n    mutate(group = ID_TOTEM) %>%\n    mutate(type = \"range\")  %>%\n    mutate(style =  ifelse(TYPE==1, \"color: black; background-color: #39A0ED;\",\"color: black; background-color: #7AC74F;\")) %>%\n    mutate(title = paste (CONSULTANTS,MISSIONS,TOT,\"jh\", sep = \" - \")) %>%\n    filter(start !=\"\", group %in% input$selUI2) %>% \n    select (id, content, start, end, group, type, title,style) \n  groups <- dataGroups %>% distinct(group) %>% mutate (content = group)\n  colnames(groups) <- c(\"id\",\"content\")\n  timevis(data = dataGroups,  group = groups, options = list(selectable=TRUE, showCurrentTime = FALSE, orientation = \"top\"))\n  \n})\n\n\noutput$dygraph1 <- renderDygraph({\n  ChoixAnnee(input$Annee)\n  selected_pilotage <- pilotage_data %>% filter(STEP == \"4 - Gagnée\",\n                                                OFFRE_PRINCIPALE %in% input$uiChk1) %>%\n    select(WEEK, CA_BT__N__KE, TOTAL_CA_VENDU_N__KE, DATE_REF) %>%\n    group_by(DATE_REF) %>%\n    summarise(CA_TOT = sum(CA_BT__N__KE, na.rm = TRUE), CA_PROD = sum(TOTAL_CA_VENDU_N__KE, na.rm = TRUE)) %>%\n    select(DATE_REF, CA_TOT, CA_PROD)\n  \n  #on construit les 2 séries temporelle pour les afficher dans un graphe dynamique\n  ca_ts <- xts(selected_pilotage$CA_TOT,order.by = selected_pilotage$DATE_REF)\n  prod_ts <- xts(selected_pilotage$CA_PROD,order.by = selected_pilotage$DATE_REF)\n  colnames(ca_ts) <- \"CA BT\"\n  colnames(prod_ts) <- \"Production\"\n  \n  #on fusionne les 2 series temporelles\n  data_ts <- cbind(ca_ts, prod_ts)\n  \n  dygraph(data_ts) %>%\n    dyRangeSelector(height = 20) %>%\n    dyHighlight(highlightCircleSize = 2,\n                highlightSeriesBackgroundAlpha = 0.2,\n                hideOnMouseOut = FALSE) %>%\n    dyOptions( fillGraph = TRUE, fillAlpha = 0.7,colors =c(\"#B2DBBF\",\"#00A8E8\")) %>%\n    dyLegend(labelsDiv = \"legendDivID\", labelsSeparateLines = TRUE) %>%\n    dyLimit(12500, label =\"Objectif vente\",\n            color = \"black\", strokePattern = \"dashed\") %>%\n    dyLimit(12500, label =\"Objectif Prod\",\n            color = \"red\", strokePattern = \"dotdash\")\n})\n #################### RADAR semaine\n\noutput$radar_CA <- renderPlot({\n\npilotage_2016 <- pilotage_2016 %>% mutate(OFFRE = ifelse(OFFRE_PRINCIPALE == \"Data\" | OFFRE_PRINCIPALE ==\"Digital Innovation\"|\n                                                             OFFRE_PRINCIPALE == \"ETM\" | OFFRE_PRINCIPALE ==\"Transformation\", OFFRE_PRINCIPALE,\"Autre\" ))\npilotage_2015 <- pilotage_2015 %>% mutate(OFFRE = ifelse(OFFRE_PRINCIPALE == \"Data\" | OFFRE_PRINCIPALE ==\"Digital Innovation\"|\n                                                           OFFRE_PRINCIPALE == \"ETM\" | OFFRE_PRINCIPALE ==\"Transformation\",OFFRE_PRINCIPALE,\"Autre\" ))\npilotage_2017 <- pilotage_2017 %>% mutate(OFFRE = ifelse(OFFRE_PRINCIPALE == \"Data\" | OFFRE_PRINCIPALE ==\"Digital Innovation\"|\n                                                           OFFRE_PRINCIPALE == \"ETM\" | OFFRE_PRINCIPALE ==\"Transformation\",OFFRE_PRINCIPALE,\"Autre\" ))\n\n  data_2016 <- pilotage_2016 %>% filter(STEP == \"4 - Gagnée\", WEEK==input$semaine, OFFRE !=\"Autre\" ) %>% group_by(OFFRE) %>%\n    summarise(CABT = sum(CA_BT__N__KE, na.rm = TRUE)) %>% \n    mutate(OFFRE = factor(OFFRE)) \n  data_2015 <- pilotage_2015 %>% filter(STEP == \"4 - Gagnée\", WEEK==input$semaine , OFFRE !=\"Autre\") %>% group_by(OFFRE) %>%\n    summarise(CABT = sum(CA_BT__N__KE, na.rm = TRUE)) %>% \n    mutate(OFFRE = factor(OFFRE)) \n  p2107_2016 <- pilotage_2017 %>% filter(STEP == \"4 - Gagnée\", WEEK==input$semaine, OFFRE !=\"Autre\") %>% group_by(OFFRE) %>%\n    summarise(CABT = sum(CA_BT__N__KE, na.rm = TRUE)) %>% \n    mutate(OFFRE = factor(OFFRE)) %>%\n    ggplot(aes(x = OFFRE, y = CABT)) +\n    geom_col(alpha = 0.5, \n             width = 1, show.legend = FALSE, color = \"white\", aes(fill = factor(OFFRE))) +\n    geom_text(aes(label = format(CABT, digits=0)),\n              position = position_stack(vjust = .5)) +\n    geom_col(aes(x = OFFRE, y = CABT), data = data_2016, alpha = 0.2,\n             width = 1, show.legend = FALSE, color = \"blue\") + \n    geom_text(aes(label = format(data_2016$CABT, digits=0)),\n                  position = position_stack(vjust = 1),color = \"blue\")+\n    geom_col(aes(x = OFFRE, y = CABT), data = data_2015, alpha = 0.2,\n             width = 1, show.legend = FALSE, color = \"red\") +\n    \n    \n    coord_polar() +\n    scale_fill_manual(values = group.colors) +\n     \n    labs(x = \"\", y = \"\",\n         title = \"CA BT Par Offre Comparaison avec 2016 (bleu) et 2015 (rouge)\") + \n    theme(\n      panel.background = element_rect(fill = \"#FFFFFF\"),\n      plot.background = element_rect(fill = \"#FFFFFF\"),\n      strip.background = element_rect(fill = \"#FFFFFF\"),\n      strip.text = element_text(size = 15),\n      panel.grid = element_blank(),\n      axis.ticks = element_blank(),\n      axis.text.y = element_blank(),\n      axis.text.x = element_text(size = 8),\n      panel.spacing = grid::unit(2, \"lines\"))\n    \n  p2107_2015 <- pilotage_2017 %>% filter(STEP == \"4 - Gagnée\", WEEK==input$semaine) %>% group_by(OFFRE) %>%\n    summarise(CABT = sum(CA_BT__N__KE, na.rm = TRUE)) %>% \n    mutate(OFFRE = factor(OFFRE)) %>%\n    ggplot(aes(x = OFFRE, y = CABT)) +\n    geom_col(alpha = 0.5, \n             width = 1, show.legend = FALSE, color = \"white\", aes(fill = factor(OFFRE))) +\n    geom_col(aes(x = OFFRE, y = CABT), data = data_2015, alpha = 0.2,\n             width = 1, show.legend = FALSE, color = \"black\") +\n    coord_polar() +\n    scale_fill_manual(values = group.colors) +\n    \n    labs(x = \"\", y = \"\",\n         title = \"CA BT Par Offre Comparaison avec 2015\") + \n    theme(\n      panel.background = element_rect(fill = \"#FFFFFF\"),\n      plot.background = element_rect(fill = \"#FFFFFF\"),\n      strip.background = element_rect(fill = \"#FFFFFF\"),\n      strip.text = element_text(size = 15),\n      panel.grid = element_blank(),\n      axis.ticks = element_blank(),\n      axis.text.y = element_blank(),\n      axis.text.x = element_text(size = 8),\n      panel.spacing = grid::unit(2, \"lines\")) \n  \n   grid.arrange(p2107_2016, p2107_2015,ncol=2, nrow=1)\n})\n\n\n\noutput$plotDiag <- renderPlot ({\n  pilotage_2017 <- pilotage_data\n  tmp <- pilotage_2017 %>% filter( WEEK ==input$semaine, \n                                   PROB >= input$uiS1[1]/100, PROB <= input$uiS1[2]/100,\n                                   STEP %in% input$uiChk2) %>% select(GROUPE,OFFRE_PRINCIPALE,CA_BT__N__KE)\n  \n  \n  matriceConnais <- xtabs(CA_BT__N__KE~ GROUPE + OFFRE_PRINCIPALE, na.omit(tmp))\n  \n  to <- paste(unique(colnames(matriceConnais)),sep = \",\")\n  from <- paste(rownames(matriceConnais),sep = \",\")\n  mat <- matrix(0, nrow = length(unique(from)), ncol = length(unique(to)))\n  col <- matrix(0, nrow = length(unique(from)), ncol = length(unique(to)))\n  \n  rownames(mat) = unique(from)\n  colnames(mat) = unique(to)\n  noms <- c(from,to)\n  group.colors\n  # names(gripCol) <- noms\n  \n  for (i in 1:length(from)) {\n    \n    for (j in 1:length(to)) { \n      mat[i,j] <- matriceConnais[i,j]\n      col[,j] <- group.colors[i]\n      \n    }\n  }\n\n  #= = = = = initialize = = = = = #\n  par(mar = c(1, 1, 1, 1))\n  circos.par(gap.degree = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))\n  gripCol <- c(rep(\"#E69F00\",length(unique(from))),rep(\"#56B4E9\",length(unique(to))))\n  # = = = = = plot 'circlize' = = = = = #\n  c <- chordDiagram(mat, annotationTrack = \"grid\", transparency = 0.8,\n               preAllocateTracks = list(track.height = 0.1),\n               col = matrix(rainbow(nrow(mat)),nrow=nrow(mat),ncol=ncol(mat)),\n               \n               grid.col=gripCol)\n  \n  # = = = = = add labels = = = = = #\n  circos.trackPlotRegion(track.index = 1,\n                         panel.fun = function(x, y) {\n                           xrange = get.cell.meta.data(\"xlim\")\n                           labels = get.cell.meta.data(\"sector.index\")\n                           circos.text(mean(xrange), 0,\n                                       labels = labels, niceFacing = TRUE)\n                         },\n                         bg.border = NA)\n  circos.clear()\n  print(c)\n})\n########### sunburst\ncombo_output <- function(){\n  # if (input$radio == \"Par Offre\") {\n  #   seq_Asso <- pilotage_data %>% filter (STEP == \"4 - Gagnée\",WEEK==maxWeek) %>%\n  #   group_by(OFFRE_PRINCIPALE,ASSOCIE,SECTEUR,GROUPE) %>%\n  #   summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = \"CA BT\")\n  #   \n  # } else {\n  #   if (input$radio == \"Par groupe\") {\n        seq_Asso <- pilotage_data %>% filter (STEP == \"4 - Gagnée\",WEEK==maxWeek) %>%\n        group_by(GROUPE, OFFRE_PRINCIPALE,ASSOCIE,SECTEUR,SUJET) %>%\n      summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = \"CA BT\")\n    \n  #  } else {\n  #     seq_Asso <- pilotage_data %>% filter (STEP == \"4 - Gagnée\",WEEK==maxWeek) %>%\n  #     group_by(GROUPE, ASSOCIE,OFFRE_PRINCIPALE,SECTEUR) %>%\n  #     summarize(CA = sum(CA_BT__N__KE,na.rm=TRUE)) %>% mutate (DEBUT = \"CA BT\")\n  #  \n  # }\n  # }\n        input$action\n        \n\n  nom <- list()\n  nb_1 <- length(seq_Asso$ASSOCIE)\n  \n  for (i in 1:nb_1) {\n      nom[[i]] <- c(seq_Asso$DEBUT[i], seq_Asso$ASSOCIE[i],seq_Asso$OFFRE_PRINCIPALE[i] ,seq_Asso$SECTEUR[i],seq_Asso$GROUPE[i],seq_Asso$SUJET[i])\n    # } else {\n    #   nom[[i]] <- c(seq_Asso$DEBUT[i],seq_Asso$ASSOCIE[i],seq_Asso$OFFRE_PRINCIPALE[i] ,seq_Asso$SECTEUR[i],seq_Asso$GROUPE[i])\n    # }\n    \n  }\n  CA_TOTAL <- c(seq_Asso$CA)\n  combo_output <- list(path = nom, value = CA_TOTAL)\n}\n\n# output$D3Part1 <- renderD3partitionR(\n#   D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type=\"sunburst\", \n#                 tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),\n#                 legend=list(type=\"sequential\",no_show = FALSE, \n#                             color=list(\"ORE\"=\"#E589B4\", \"JSO\"=\"#C9C5E5\", \"OGR\" = \"#50E5D6\", \n#                                        \"BES\" = \"#99F8FF\", \"MMO\"= \"#FF9770\", \"UHE\"=\"#E9FF70\", \"Transformation\"=\"#0BA\",\"ETM\"=\"#AA1\",\"Data\"=\"#ECC\")), trail = TRUE,\n#                 Input=list(enabled=T,Id=\"D3Part1\",clickedStep=T,\n#                            currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),\n#                 \n#                 width = 600,height = 600)\n# )\n\noutput$D3Part2 <- renderD3partitionR(\n  \n  D3partitionR( data=list(path=combo_output()$path,value=combo_output()$value),type=\"treeMap\", \n                tooltipOptions = list(showAbsolutePercent = T, showRelativePercent = T),\n                legend=list(type=\"sequential\",no_show = FALSE, \n                            color=list(\"ORE\"=\"#E589B4\", \"JSO\"=\"#C9C5E5\", \"OGR\" = \"#50E5D6\", \n                                       \"BES\" = \"#99F8FF\", \"MMO\"= \"#FF9770\", \"UHE\"=\"#E9FF70\", \"Transformation\"=\"#0BA\",\"ETM\"=\"#AA1\",\"Data\"=\"#ECC\")), trail = TRUE,\n                Input=list(enabled=T,Id=\"D3Part1\",clickedStep=T,\n                           currentPath=T,visiblePaths=T,visibleLeaf=T,visibleNode=T),\n                \n                width = 1200,height = 600)\n)\n\n\ndiff13 <- reactive({\n  p2015 <- pilotage_2015  %>% mutate(YEAR=2015) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  p2016 <- pilotage_2016  %>% mutate(YEAR=2016) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  \n  p2017 <- pilotage_2017  %>% mutate(YEAR=2017) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,YEAR)\n  pilotage_tot <- bind_rows(p2015, p2016, p2017)\n  \n  \n  \n  max_week_2017 <- maxWeek\n  \n  pilotage_tot %>% \n    mutate(YEAR = factor(YEAR)) %>% \n    filter(STEP == \"4 - Gagnée\") %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE))\n})\n\noutput$hcontainer <- renderHighchart({\n  p2015 <- pilotage_2015  %>% mutate(YEAR=2015) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  p2016 <- pilotage_2016  %>% mutate(YEAR=2016) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,\n                                           YEAR)\n  \n  p2017 <- pilotage_2017  %>% mutate(YEAR=2017) %>%\n    rename(CA_BT = CA_BT__N__KE) %>%select(STEP,\n                                           CA_BT,\n                                           OFFRE_PRINCIPALE,\n                                           WEEK,YEAR)\n  pilotage_tot <- bind_rows(p2015, p2016, p2017)\n  # On va aouter une régression lineaire sur l'année 2017\n  # Fit a linear model called on the linkedin views per day: linkedin_lm\n  p2017_lm <- p2017  %>% \n    mutate(YEAR = factor(YEAR)) %>% \n    filter(STEP == \"4 - Gagnée\") %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE))\n  # regression lineaire CA en fonction de la semaine\n  p2017_lm <- lm(CA_TOT ~ WEEK,  p2017_lm)\n  \n  # on calcule les points en fonction des coefficients obtenus\n  p2017_lm_Graphe <- data.frame(WEEK=c(1:52), CA_TOT = p2017_lm$coefficients[2] * c(1:52) +p2017_lm$coefficients[1])\n  \n  \n  plot_chat <- pilotage_tot %>% \n    mutate(YEAR = factor(YEAR)) %>% \n    filter(STEP == \"4 - Gagnée\") %>% \n    group_by(YEAR, WEEK) %>% \n    summarise(CA_TOT = sum(CA_BT, na.rm = TRUE))\n  \n  hc <-  highchart() %>% \n    \n    hc_add_series (p2017_lm_Graphe, name = \"forecasts 2017\",lineWidth = 1, type = \"line\", marker = list(enabled = FALSE),\n                   color= 'orange', hcaes(x = WEEK, y = CA_TOT) ) %>% \n    hc_add_series (plot_chat, type = \"line\",marker = list(enabled = FALSE), #C ,marker = list(symbol = fa_icon_mark(\"eur\")),\n                   color= c('#E2FF0A', '#FF5151', '#57B8FF'), hcaes(x = WEEK, y = CA_TOT, group = YEAR) ) %>% \n    hc_subtitle(text = \"Comparaison du CA\") %>%\n    hc_title(text = \"Evolution du CA par semaine\",\n             style = list(fontWeight = \"bold\")) %>% \n    hc_tooltip(crosshairs = TRUE, valueDecimals = 0,\n               pointFormat = \"Semaine: {point.x} <br> CA e keuros: {point.y}\") %>%\n    hc_credits(enabled = TRUE, \n               text = \"Sources: COBIZ 2015 - 2017\",\n               style = list(fontSize = \"10px\")) %>%\n    hc_yAxis(title = list(text = \"Chiffre d'affaire\"),\n             labels = list(format = \"{value}\")) %>% \n    hc_xAxis(title = list(text = \"Numéro de semaine\"),\n             labels = list(format = \"{value}\")) %>% \n    hc_exporting(enabled = TRUE) # enable exporting option\n  \n  # # Determine theme and apply to highchart ------------------------\n   \n     theme <- switch(input$hc_theme,\n                    chalk = hc_theme_chalk(),\n                    darkunica = hc_theme_darkunica(),\n                    fivethirtyeight = hc_theme_538(),\n                    gridlight = hc_theme_gridlight(),\n                    handdrawn = hc_theme_handdrawn(),\n                    economist = hc_theme_economist(),\n                    financialTimes =hc_theme_ft(),\n                    Dotabuff=hc_theme_db(),\n                    flat=hc_theme_flat(),\n                    sandsignika = hc_theme_sandsignika()\n     )\n  hc <- hc %>%\n    hc_add_theme(theme)\n  \n  hc\n   })\n  \n \n  \n  output$contents <- renderTable({\n    inFile <- input$file1\n    \n    if(is.null(inFile))\n      return(NULL)\n    file.rename(inFile$datapath,\n                paste(inFile$datapath, \".xlsx\", sep=\"\"))\n    read_excel(paste(inFile$datapath, \".xlsx\", sep=\"\"), 1)\n  })\n  output$contentss <- renderTable({\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, it will be a data frame with 'name',\n    # 'size', 'type', and 'datapath' columns. The 'datapath'\n    # column will contain the local filenames where the data can\n    # be found.\n    inFile <- input$file1\n    \n    if (is.null(inFile))\n      return(NULL)\n    pilotage_data_tmp <- read_excel(inFile$datapath, col_types = c(\n      rep(\"text\", 6),\n      \"numeric\",\n      rep(\"text\", 2),\n      rep(\"numeric\", 6),\n      \"text\",\n      \"date\",\n      rep(\"text\", 3),\n      rep(\"numeric\", 2),\n      rep(\"date\", 5)))\n    nb <- str_sub(fichier,22)\n    fin <- str_locate(nb,\".xlsx\")[1]\n    nb <-  as.numeric(str_sub(nb,1,fin-1))\n    #on ajoute la semaine et aussi la date de début de la semaine\n    date_ref <- data_frame(\n      date_ref = seq(from = dmy(\"01/01/2017\"), to = dmy(\"31/12/2017\"), by = \"weeks\"),\n      week = week(date_ref)\n    \n    )\n    pilotage_data_tmp %>% mutate(week=nb) -> pilotage_data_tmp\n    pilotage_data_tmp %>% \n      inner_join(date_ref, by = \"week\")\n    \n    pilotage_data_tmp\n  })\n  \n  output$cityControls <- renderUI({\n    \n    checkboxGroupInput(\"cities\", \"Choose Cities\", cities)\n  })\n  \n  \n  \n\n}",
    "created" : 1493573907811.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2166532597",
    "id" : "43F7BAE7",
    "lastKnownWriteTime" : 1499168187,
    "last_content_update" : 1499168187221,
    "path" : "D:/tmp/dashboardBTV2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}