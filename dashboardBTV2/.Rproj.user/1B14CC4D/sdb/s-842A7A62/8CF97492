{
    "collab_server" : "",
    "contents" : "\n  library(shiny)\n  library(shinydashboard)\n  library(flexdashboard)\n  library(dplyr)\n  library(ggplot2)\n  library(ggthemes)\n  library(RColorBrewer) #coulors pour ggplot\n  library(stringr)\n  library(lubridate) # gestion des dates\n  library(xts) #serie temporelle\nlibrary(dygraphs) #affichage de graphe avec affichage dynamique\n#library(forcats)\nlibrary(DT) # Affichage des tableaux dynamiques\nlibrary(purrr) # \nlibrary(tidyr)\nlibrary(scales) \nlibrary(googleVis) # Permet d'utiliser les graphiques >  Google Chart \nlibrary(timevis)# Gantt\nlibrary(gridExtra) #Pour avoir les 2 graphes dans le meme plot\nlibrary(circlize)\nlibrary(D3partitionR) # permet de générer le treemap dynamique\nlibrary(highcharter) # courbe de comparaison des CA de 2015 à 2017\nlibrary(daff) #PErmet de voir les différences entre deux data frame\n# library(readxl)\n# library(xlsx)\n# Chargement des données Pipe de 2015 à 2017\n\n#Variables globales pour le dashboard BT de la partie Server.R\n# chargement des données\n#données 2016 et 2015\nload(\"data/pilotage2016_data.RData\")\nload(\"data/pilotage2015_data.RData\")\n\n#données 2017\nload(\"data/pilotage_data.RData\")\npilotage_2017 <- pilotage_data\nload(\"data/staffing2017.RData\")\nload(\"data/StaffingS10.RData\")\n\nload(\"data/Effectif2017.RData\")\nload(\"data/Effectifs2016.RData\")\nload(\"data/Effectif2015.RData\")\n\n\n############################# on va recuperer au niveau des Data la semaine \n#Liste des personnes dans le staffing\npeople <- Staffing %>% arrange(CONSULTANTS) %>% distinct(CONSULTANTS) \n\n## \nType_Staffing <- c(1,2,3,4,5,6,7)\ntotem <- Staffing %>% filter(TYPE == 1) %>% arrange(ID_TOTEM) %>% distinct(ID_TOTEM)\n\n## \nmaxWeek <- as.numeric( format(today(), \"%U\"))\nnbMois <- month(today())\n\n\nmy_cols <- c(\"JANV\",\"FEV\",\"MAR\",\"AVR\",\"MAI\",\"JUIN\",\"JUIL\",\"AOUT\",\"SEPT\",\"OCT\",\"NOV\",\"DEC\")\n#on va calculer le taux de staffing par grade pour les jours staffés\nstaffFerme <- Staffing %>% filter (TYPE == 1) %>%\n  select (GRADE, JANV,FEV,MAR,AVR,MAI,JUIN,JUIL,AOUT,SEPT,OCT,NOV,DEC) %>%\n  group_by(GRADE) %>% summarise_each(funs(sum(., na.rm = TRUE)))\n\n\n#on va calculer le provisiore\nstaffProvisiore <- Staffing %>% filter (TYPE == 2) %>%\n  select (GRADE, JANV,FEV,MAR,AVR,MAI,JUIN,JUIL,AOUT,SEPT,OCT,NOV,DEC) %>%\n  group_by(GRADE) %>% summarise_each(funs(sum(., na.rm = TRUE)))\n\n\n#on va calculer le nombre de jours de congéÂ¨spar grade pour les jours staffés\nstaffconges <- Staffing %>% filter (TYPE == 3) %>%\n  select (GRADE, JANV,FEV,MAR,AVR,MAI,JUIN,JUIL,AOUT,SEPT,OCT,NOV,DEC) %>%\n  group_by(GRADE) %>% summarise_each(funs(sum(., na.rm = TRUE)))\n\n#palette de couleurs\ngroup.colors <- c(\"Data\" = \"#60D394\", \"Digital Innovation\" = \"#AAF683\",\"ETM\" =\"#FFD97D\", \"Transformation\" = \"#FF9B85\", \"PocLab\" = \"#ED7D3A\")\ngroup.secteurs <- c(\"Banque\" = \"#D8DBE2\",\"Assurance\" = \"#5bc0eb\",\"Energie\" = \"#fde74c\",\"Industrie & services\" = \"#9bc53d\",\"Para-public\" = \"#e55934\",\" Retail\" = \"#fa7921\")\n\n#generation d'un dataframe avec une valeur par semaine\nweek_seq15 <- data_frame(\"week_seq\" = seq(dmy(\"01/01/2015\"), dmy(\"31/12/2015\"), by = \"week\"))\nweek_seq16 <- data_frame(\"week_seq\" = seq(dmy(\"01/01/2016\"), dmy(\"31/12/2016\"), by = \"week\"))\nweek_seq17 <- data_frame(\"week_seq\" = seq(dmy(\"01/01/2017\"), dmy(\"31/12/2017\"), by = \"week\"))\n\n\n#on coompte le nombre de personnes présente par semaine sur les 3 années\neffectifs <- Effectifs2017\neffectif_2016 <- Effectifs2016 %>% \n  select(NOM, DATE_ENTREE, DATESORTIE, ETAT, GRADE_2016) %>% \n  crossing(week_seq16) %>% #Crossing permet de constituer pour chaque ligne d'effectif autant de ligne que de semaines \n  mutate(DATE_ENTREE = ymd(DATE_ENTREE),\n         DATESORTIE = ymd(DATESORTIE)) %>% \n  replace_na(list(DATESORTIE = dmy(\"01/01/2018\"))) %>% \n  mutate(present_window = interval(DATE_ENTREE, DATESORTIE)) %>% #on regarde si la personne est presente sur l'intervalle Entree Sortie sur l'année\n  mutate(is_present = week_seq %within% present_window) %>% \n  mutate(poids_effectif = ifelse(GRADE_2016 == \"8-Associé\", 0.5, \n                                 ifelse(GRADE_2016 == \"7-Directeur\", 0.75, 1))) %>% \n  filter(is_present == TRUE) %>% \n  mutate(WEEK = week(week_seq)) %>% \n  group_by(WEEK) %>% \n  summarise(POIDS_EFFECTIF_TOT = sum(poids_effectif)) %>% \n  mutate(YEAR = 2016)\n\n\neffectif_2015 <- Effectifs2015 %>% \n  select(NOM, DATE_ENTREE, DATESORTIE, ETAT, GRADE_2016) %>% \n  crossing(week_seq15) %>% \n  mutate(DATE_ENTREE = ymd(DATE_ENTREE),\n         DATESORTIE = ymd(DATESORTIE)) %>% \n  replace_na(list(DATESORTIE = dmy(\"01/01/2018\"))) %>% \n  mutate(present_window = interval(DATE_ENTREE, DATESORTIE)) %>% \n  mutate(is_present = week_seq %within% present_window) %>% \n  mutate(poids_effectif = ifelse(GRADE_2016 == \"8-Associé\", 0.5, \n                                 ifelse(GRADE_2016 == \"7-Directeur\", 0.75, 1))) %>% \n  filter(is_present == TRUE) %>% \n  mutate(WEEK = week(week_seq)) %>% \n  group_by(WEEK) %>% \n  summarise(POIDS_EFFECTIF_TOT = sum(poids_effectif)) %>% \n  mutate(YEAR = 2015)\n\n\neffectif_2017 <- Effectifs2017 %>% \n  select(NOM, DATE_ENTREE, DATESORTIE, ETAT, GRADE_2016) %>% \n  crossing(week_seq17) %>% \n  mutate(DATE_ENTREE = ymd(DATE_ENTREE),\n         DATESORTIE = ymd(DATESORTIE)) %>% \n  replace_na(list(DATESORTIE = dmy(\"01/01/2018\"))) %>% \n  mutate(present_window = interval(DATE_ENTREE, DATESORTIE)) %>% \n  mutate(is_present = week_seq %within% present_window) %>% \n  mutate(poids_effectif = ifelse(GRADE_2016 == \"8-Associé\", 0.5, \n                                 ifelse(GRADE_2016 == \"7-Directeur\", 0.75, 1))) %>% \n  filter(is_present == TRUE) %>% \n  mutate(WEEK = week(week_seq)) %>% \n  group_by(WEEK) %>% \n  summarise(POIDS_EFFECTIF_TOT = sum(poids_effectif)) %>% \n  mutate(YEAR = 2017)\n\n################################ Fonctions pour le chargement d'une semaine en plus\n\nformat_col_names <- function(x) { \n  x <- str_replace_all(x, \"[éèê]\", \"e\")\n  x <- str_replace_all(x, \" \", \"_\")\n  x <- str_replace_all(x, \"\\\\.\", \"\")\n  x <- str_replace_all(x, \"/\", \"\")\n  x <- str_replace_all(x, \"€\", \"E\")\n  x <- str_replace_all(x, \"\\\\(\", \"_\")\n  x <- str_replace_all(x, \"\\\\)\", \"\")\n  x <- str_replace_all(x, \"\\n\", \"\")\n  x <- str_replace_all(x, \"\\r\", \"\")\n  x <- str_replace_all(x, \"\\\\+1\", \"_PLUS_1_\")\n  x <- str_replace_all(x, \"\\\\-1\", \"_MOINS_1_\")\n  x <- str_to_upper(x)\n  x\n}\n\ntrim <- function (x) gsub(\"^\\\\s+|\\\\s+$\", \"\", x)\n\n\n#on regarde le nombre de jours ouvrés par mois\nnbjours2016 <- c(20,21,22,21,20,22,20,22,22,21,20,22)\n\nnbjours2017 <- c(22,20,23,20,21,22,20,22,21,22,20,20)\n#Cette fonction permet de basculer sur l'année désirée\nChoixAnnee <- function(Annee){\n  if (Annee==2015) {\n    #effectifs <<- Effectifs2015\n    pilotage_data <<- pilotage_2015 \n    Objectif_BT <<- 11120\n    Objectif_CA <<- 13000}\n  if (Annee==2016) {\n    #effectifs <<- Effectifs2016\n    pilotage_data <<- pilotage_2016\n    Objectif_BT <<-12500\n    Objectif_CA <<- 14500\n    nbjours <<- nbjours2016}\n  if (Annee==2017) {\n    #effectifs <<- Effectifs2017\n    pilotage_data <<- pilotage_2017\n    Objectif_BT <<-13000\n    Objectif_CA <<- 14500\n    nbjours <<- nbjours2017}\n}\n",
    "created" : 1494792228194.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1309581303",
    "id" : "8CF97492",
    "lastKnownWriteTime" : 1499339047,
    "last_content_update" : 1499339047886,
    "path" : "D:/tmp/dashboardBTV2/global.R",
    "project_path" : "global.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}