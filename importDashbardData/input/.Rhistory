+                       height=320,
+                       calendar="{yearLabel: { fontName: 'Times-Roman',
+                                fontSize: 32, color: '#1A8763', bold: true},
+                                cellSize: 10,
+                                cellColor: { stroke: 'red', strokeOpacity: 0.2 },
+                                focusedCellColor: {stroke:'red'}}")
+ )
> plot(Cal)
> ## ---- pause ----
> pause()
Press <return> to continue:
> # ---- Timeline ----
> datTL <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)),
+                     Name=c("Washington", "Adams", "Jefferson",
+                            "Adams", "Jefferson", "Burr"),
+                     start=as.Date(x=rep(c("1789-03-29", "1797-02-03",
+                                           "1801-02-03"),2)),
+                     end=as.Date(x=rep(c("1797-02-03", "1801-02-03",
+                                         "1809-02-03"),2)))
> Timeline <- gvisTimeline(data=datTL,
+                          rowlabel="Name",
+                          barlabel="Position",
+                          start="start",
+                          end="end",
+                          options=list(timeline="{groupByRowLabel:false}",
+                                       backgroundColor='#ffd',
+                                       height=350,
+                                       colors="['#cbb69d', '#603913', '#c69c6e']"))
> plot(Timeline)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## ---- Histogram ----
> set.seed(123)
> datHist=data.frame(A=rpois(100, 20),
+                    B=rpois(100, 5),
+                    C=rpois(100, 50))
> Hist <- gvisHistogram(datHist, options=list(
+   legend="{ position: 'top', maxLines: 2 }",
+   colors="['#5C3292', '#1A8763', '#871B47']",
+   width=400, height=360))
> plot(Hist)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## ---- gvisMerge ----
> G <- gvisGeoChart(Exports, "Country", "Profit",
+                   options=list(width=300, height=300))
> T <- gvisTable(Exports,
+                options=list(width=220, height=300))
> GT <- gvisMerge(G,T, horizontal=TRUE)
> plot(GT)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## Flash charts
> ##  ---- GeoMap ----
> Geo=gvisGeoMap(Exports, locationvar="Country", numvar="Profit",
+                options=list(height=350, dataMode='regions'))
> plot(Geo)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## ---- GeoMap ----
> AndrewGeo <- gvisGeoMap(Andrew,
+                         locationvar="LatLong",
+                         numvar="Speed_kt",
+                         hovervar="Category",
+                         options=list(height=350,
+                                      region="US",
+                                      dataMode="markers"))
> plot(AndrewGeo)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## ---- AnnotatedTimeLine ----
> AnnoTimeLine  <- gvisAnnotatedTimeLine(Stock,
+                                        datevar="Date",
+                                        numvar="Value",
+                                        idvar="Device",
+                                        titlevar="Title",
+                                        annotationvar="Annotation",
+                                        options=list(displayAnnotations=TRUE,
+                                                     width="600px", height="350px"))
> plot(AnnoTimeLine)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## ---- MotionChart ----
> Motion=gvisMotionChart(Fruits,
+                        idvar="Fruit",
+                        timevar="Year")
> plot(Motion)
> ## ---- pause ----
> pause()
Press <return> to continue:
> ## You can change some of displaying settings via the browser,
> ## e.g. the level of opacity of non-selected items, or the chart type.
> ## The state string from the 'Advanced' tab can be used to set those
> ## settings via R. Just copy and past the string from the browser into
> ## the argument state of the options list.
> ## Here is an example of a motion chart, with an initial line chart
> ## displayed.
>
> ## ---- MotionChartSettings ----
> myStateSettings <-'
+ {"xZoomedDataMin":1199145600000,"colorOption":"2",
+ "duration":{"timeUnit":"Y","multiplier":1},"yLambda":1,
+ "yAxisOption":"4","sizeOption":"_UNISIZE",
+ "iconKeySettings":[],"xLambda":1,"nonSelectedAlpha":0,
+ "xZoomedDataMax":1262304000000,"iconType":"LINE",
+ "dimensions":{"iconDimensions":["dim0"]},
+ "showTrails":false,"uniColorForNonSelected":false,
+ "xAxisOption":"_TIME","orderedByX":false,"playDuration":15000,
+ "xZoomedIn":false,"time":"2010","yZoomedDataMin":0,
+ "yZoomedIn":false,"orderedByY":false,"yZoomedDataMax":100}
+ '
> M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(state=myStateSettings))
> plot(M)
> ## See demo(package='googleVis') for other available demos.
Warning messages:
1: In gvisGeoMap(Exports, locationvar = "Country", numvar = "Profit",  :
GeoMap (gvisGeoMap) is Flash based, conisder using GeoChart (gvisGeoChart) instead.
For more details visit: goo.gl/tkiEV8
2: In gvisGeoMap(Andrew, locationvar = "LatLong", numvar = "Speed_kt",  :
GeoMap (gvisGeoMap) is Flash based, conisder using GeoChart (gvisGeoChart) instead.
For more details visit: goo.gl/tkiEV8
3: In gvisAnnotatedTimeLine(Stock, datevar = "Date", numvar = "Value",  :
AnnotatedTimeline (gvisAnnotatedTimeLine) is Flash based, conisder using  AnnotationChart (gvisAnnotationChart) instead.
For more details visit: goo.gl/tkiEV8
>
> demo(AnimatedGeoChart)
demo(AnimatedGeoChart)
Type  <Return>	 to start :
> ## Animated Geo Maps based on ideas and code by:
> ## Manoj Ananthapadmanabhan and Anand Ramalingam
>
> ## Here we animate the percentage of vote for president won by the
> ## Democratic candidate in the elections from 1932 - 2008
>
> ## This demo requires the 'pscl' package
> if( !is.element("pscl", installed.packages()[,1]) )
+   install.packages("pscl")
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.3/pscl_1.4.9.zip'
Content type 'application/zip' length 3188916 bytes (3.0 MB)
downloaded 3.0 MB
le package ‘pscl’ a été décompressé et les sommes MD5 ont été vérifiées avec succés
Les packages binaires téléchargés sont dans
C:\Users\lbe\AppData\Local\Temp\RtmpUX29Pl\downloaded_packages
> require(pscl)
Loading required package: pscl
Loading required package: MASS
Attaching package: ‘MASS’
The following object is masked from ‘package:dplyr’:
select
Loading required package: lattice
Classes and Methods for R developed in the
Political Science Computational Laboratory
Department of Political Science
Stanford University
Simon Jackman
hurdle and zeroinfl functions by Achim Zeileis
> data(presidentialElections)
> ## Add min and max values to the data
> df = data.frame(state=rep(c("Min", "Max"),20),
+ 		 		demVote=rep(c(0, 100),20),
+   		 		year=sort(rep(seq(1932,2008,4),2)))
> presidentialElections <- rbind(presidentialElections[,1:3], df)
> ## Create Geo Maps for each election
> gvisData <- by(presidentialElections, list(year=presidentialElections$year), function(x){
+
+ 	year <- x$year[1]
+ 	g <- gvisGeoChart(x, "state", "demVote",
+ 		options=list(region="US", dataMode="regions", resolution="provinces"),
+ 		 chartid=paste("[", year, "]", sep=""))
+ 	.data <- g$html$chart["jsData"]
+ 	.data <-gsub("function ", "", .data)
+ 	.data <- sub("\\] ()", "\\] = function ", .data)
+ 	return(.data)
+ }
+ )
> animation <- "
+ var gvisData = {};
+
+ var Animation = {};
+ Animation.startYear = 1;
+ Animation.endYear = 20;
+ Animation.currentYear = Animation.startYear;
+ Animation.divCharts = {};
+
+ Animation.playAnimation = function() {
+   if (Animation.currentYear > Animation.endYear) {
+    	return;
+   }
+   document.getElementById('chart-header').innerHTML = 'Percent of the vote for president won by the Democratic candidate in year: '+ (1928 + 4*Animation.currentYear);
+   if (Animation.currentYear > Animation.startYear) {
+   	Animation.divCharts[Animation.currentYear-1].style.display = 'none';
+   }
+   Animation.divCharts[Animation.currentYear++].style.visibility = 'visible';
+   setTimeout(Animation.playAnimation, 2000);
+ };
+
+ "
> gvisChart <- '
+
+ // jsDrawChart
+ function drawChart() {
+ 	var chart = {};
+ 	var options ={};
+ 	options["displayMode"] = "regions";
+ 	options["width"] =   600;
+ 	options["region"] = "US";
+ 	options["height"] =  400;
+   options["resolution"] = "provinces"
+ 	options["colors"] = ["red", "blue"];
+
+ 	for (var i = Animation.startYear; i<=Animation.endYear; i++) {
+ 	   Animation.divCharts[i] = document.createElement("div");
+ 	   Animation.divCharts[i].className = "pop-chart";
+ 	   document.body.appendChild(Animation.divCharts[i]);
+ 	   chart[i] = new google.visualization.GeoChart(Animation.divCharts[i]);
+
+ 	   var data = gvisData[(1928+4*i)]();
+ 	   options["title"] = i;
+ 	   chart[i].draw(data,options);
+ 	}
+
+ 	// Animation.playAnimation();
+ 	setTimeout(Animation.playAnimation, 5000);
+ }
+
+
+ // jsDisplayChart
+ function displayChart() {
+   google.load("visualization", "1", { packages:["geochart"] });
+   google.setOnLoadCallback(drawChart);
+ }
+ // jsChart
+ displayChart()
+
+ '
> htmlHead <- '
+
+ <html>
+ <head>
+ <title>US Presidential Election by State: 1932 - 2008</title>
+
+ <script type="text/javascript" src="http://www.google.com/jsapi"></script>
+ <script type="text/javascript">
+
+ '
> htmlFoot <-'
+
+ </script>
+
+ <style>
+ 	.pop-chart {
+ 		position: absolute;
+ 		top: 50;
+ 		left: 10;
+ 		display: block;
+ 		visibility: hidden;
+ 	}
+ </style>
+ </head>
+ <body>
+
+ <div id="chart-header"></div>
+
+ </body>
+ </html>
+
+ '
> page <- structure(
+                   list(type="AnimatedGeoChart",
+                        chartid="presidentialElections",
+                        html=list(
+                          header=htmlHead,
+                          chart=c(animation, gvisData, gvisChart),
+                          caption="",
+                          footer=htmlFoot)
+                        ),
+                   class = c("gvis", "list")
+                   )
> plot(page)
> ## See demo(package='googleVis') for other available demos.
Warning messages:
1: package ‘pscl’ was built under R version 3.3.2
2: package ‘lattice’ was built under R version 3.3.2
> demo(WorldBank)
demo(WorldBank)
Type  <Return>	 to start :
> ## This demo shows how country level data can be accessed from
> ## the World Bank via their API and displayed with a Motion Chart.
> ## Inspired by Google's Public Data Explorer, see
> ## http://www.google.com/publicdata/home
> ##
> ## For the World Bank Data terms of use see:
> ## http://data.worldbank.org/summary-terms-of-use
> ##
> ## To run this demo an internet connection and Flash are required.
> ## This demo is part of the googleVis R package.
> ##
> ## See also: http://lamages.blogspot.com/2011/09/accessing-and-plotting-world-bank-data.html
> ## Markus Gesmann, 24 September 2011
> ##
> ## Thanks to John Maindonald for a simplified version of this
> ## demo using the WDI package.
> ##
> ## Distributed under GPL 2 or later
>
> ## This demo requires the 'WDI' package
> if( !is.element("WDI", installed.packages()[,1]) )
+   install.packages("WDI")
> library(WDI)
Loading required package: RJSONIO
> inds <- c('SP.DYN.TFRT.IN','SP.DYN.LE00.IN', 'SP.POP.TOTL',
+           'NY.GDP.PCAP.CD', 'SE.ADT.1524.LT.FE.ZS')
> indnams <- c("fertility.rate", "life.expectancy", "population",
+              "GDP.per.capita.Current.USD", "15.to.25.yr.female.literacy")
> wdiData <- WDI(country="all", indicator=inds,
+                start=1960, end=format(Sys.Date(), "%Y"), extra=TRUE)
> colnum <- match(inds, names(wdiData))
> names(wdiData)[colnum] <- indnams
Error in names(wdiData)[colnum] <- indnams :
NAs are not allowed in subscripted assignments
In addition: Warning messages:
1: package ‘WDI’ was built under R version 3.3.2
2: In WDI(country = "all", indicator = inds, start = 1960, end = format(Sys.Date(),  :
Unable to download indicators  SP.POP.TOTL ; NY.GDP.PCAP.CD ; SE.ADT.1524.LT.FE.ZS
>
>
>
>
>
>
> demo(Roles)
demo(Roles)
Type  <Return>	 to start :
> # Add the ability to pass columns roles for further
> # processing downstream
> #
> # Thanks to Oliver Gjoneski
> #
> # Role columns must follow column they pertain to.  Proper naming
> # conventions must be be observed.  For example, roles fulfilling tooltip
> # roles and must be called "foo.blah.tooltip".
> #
> # For more details see:
> # https://developers.google.com/chart/interactive/docs/roles
>
> ## ---- Tooltip ----
> df <- data.frame(year=1:11,pop=1:11,
+                  pop.html.tooltip=letters[1:11])
> plot(
+   gvisScatterChart(df)
+ )
> ## ---- TooltipHTML ----
> levels(df$pop.html.tooltip)[1] <-
+   '<a href="http://www.r-project.com"><img src="http://www.r-project.org/Rlogo.jpg" alt="R logo" /></a>'
> plot(
+   gvisScatterChart(df,
+                    options=list(tooltip="{isHtml:'true'}"))
+ )
> ## ---- CertaintyScopeEmphasis ----
> df <- data.frame(year=1:11, x=1:11,
+                  x.scope=c(rep(TRUE, 8), rep(FALSE, 3)),
+                  y=11:1, y.html.tooltip=LETTERS[11:1],
+                  y.certainty=c(rep(TRUE, 5), rep(FALSE, 6)),
+                  y.emphasis=c(rep(FALSE, 4), rep(TRUE, 7)))
> plot(
+   gvisScatterChart(df,options=list(lineWidth=2))
+ )
> ## ---- ColumnChart ----
> dat <- data.frame(Year=2010:2013,
+                   Sales=c(600, 1500, 800, 1000),
+                   Sales.html.tooltip=c('$600K in our first year!',
+                                        'Sunspot activity made this our best year ever!',
+                                        '$800K in 2012.',
+                                        '$1M in sales last year.'),
+                   Sales.certainty=c(TRUE, FALSE, TRUE, FALSE))
> plot(
+   gvisColumnChart(dat, xvar='Year',
+                   yvar=c('Sales', 'Sales.certainty')
+   )
+ )
> ## ---- Interval ----
> df <- data.frame(Year=2013:2014, Sales=c(120, 130),
+                  Sales.interval.1=c(100,110),
+                  Sales.interval.2=c(140, 150),
+                  Sales.interval.3=c(90, 100),
+                  Sales.interval.4=c(150, 170),
+                  Sales.style=c('red', 'gold'),
+                  Sales.annotation=c("North", "South"),
+                  check.names=FALSE)
> plot(
+   gvisBarChart(df, xvar='Year',
+                yvar=c('Sales',
+                       'Sales.interval.1',
+                       'Sales.interval.2',
+                       'Sales.style',
+                       'Sales.annotation')
+   )
+ )
> plot(
+   gvisLineChart(df, xvar='Year',
+                yvar=c('Sales',
+                       'Sales.interval.1',
+                       'Sales.interval.2'),
+                options=list(series="[{color:'purple'}]")
+   )
+ )
> plot(
+   gvisLineChart(df, xvar='Year',
+                 yvar=c('Sales',
+                        'Sales.interval.1',
+                        'Sales.interval.2',
+                        'Sales.interval.3',
+                        'Sales.interval.4'),
+                 options=list(series="[{color:'purple'}]",
+                              lineWidth=4,
+                              interval="{
+             'i1': { 'style':'line', 'color':'#D3362D', 'lineWidth': 0.5 },
+             'i2': { 'style':'line', 'color':'#F1CA3A', 'lineWidth': 1 },
+             'i3': { 'style':'line', 'color':'#5F9654', 'lineWidth': 2 },
+             'i4': { 'style':'line', 'color':'#5F9654', 'lineWidth': 3 }
+         }")
+   )
+ )
> plot(
+   gvisLineChart(df, xvar='Year',
+                 yvar=c('Sales',
+                        'Sales.interval.1',
+                        'Sales.interval.2',
+                        'Sales.interval.3',
+                        'Sales.interval.4'),
+                 options=list(series="[{color:'purple'}]",
+                              lineWidth=4,
+                              intervals="{ 'style':'area' }",
+                              interval="{
+                                'i1': { 'color': '#4374E0', 'style':'bars', 'barWidth':0, 'lineWidth':4, 'pointSize':10, 'fillOpacity':1 },
+                                'i2': { 'color': '#E49307', 'style':'bars', 'barWidth':0, 'lineWidth':4, 'pointSize':10, 'fillOpacity':1 }}"
+                              )
+   )
+ )
> ## ---- TwoLines ----
> df <- data.frame(country=c("US", "GB", "BR"),
+                  val1=c(1,3,4),
+                  val1.emphasis=c(TRUE, TRUE, FALSE),
+                  val2=c(23,12,32))
> plot(
+   gvisLineChart(df, xvar="country",
+                 yvar=c("val1", "val1.emphasis")
+   )
+ )
> plot(
+   gvisLineChart(df, xvar="country",
+                 yvar=c("val1", "val1.emphasis", "val2")
+   )
+ )
> ## ---- VerticalReferenceLine ----
> dat <- data.frame(Year=2010:2013,
+                   Sales=c(600, 1500, 800, 1000),
+                   Sales.annotation=c('First year', NA, NA, 'Last Year'),
+                   Sales.annotationText=c('$600K in our first year!',
+                                        NA,
+                                        NA,
+                                        '$1M in sales last year.'))
> plot(
+   gvisLineChart(dat, xvar='Year',
+                   yvar=c('Sales',
+                          'Sales.annotation',
+                          'Sales.annotationText'),
+                          options=list(annotations = "{style:'line'}")
+   )
+ )
> demo(WorldBank)
demo(WorldBank)
Type  <Return>	 to start :
> ## This demo shows how country level data can be accessed from
> ## the World Bank via their API and displayed with a Motion Chart.
> ## Inspired by Google's Public Data Explorer, see
> ## http://www.google.com/publicdata/home
> ##
> ## For the World Bank Data terms of use see:
> ## http://data.worldbank.org/summary-terms-of-use
> ##
> ## To run this demo an internet connection and Flash are required.
> ## This demo is part of the googleVis R package.
> ##
> ## See also: http://lamages.blogspot.com/2011/09/accessing-and-plotting-world-bank-data.html
> ## Markus Gesmann, 24 September 2011
> ##
> ## Thanks to John Maindonald for a simplified version of this
> ## demo using the WDI package.
> ##
> ## Distributed under GPL 2 or later
>
> ## This demo requires the 'WDI' package
> if( !is.element("WDI", installed.packages()[,1]) )
+   install.packages("WDI")
> library(WDI)
> inds <- c('SP.DYN.TFRT.IN','SP.DYN.LE00.IN', 'SP.POP.TOTL',
+           'NY.GDP.PCAP.CD', 'SE.ADT.1524.LT.FE.ZS')
> indnams <- c("fertility.rate", "life.expectancy", "population",
+              "GDP.per.capita.Current.USD", "15.to.25.yr.female.literacy")
> wdiData <- WDI(country="all", indicator=inds,
+                start=1960, end=format(Sys.Date(), "%Y"), extra=TRUE)
atterChar
runApp('D:/Data/R_Sources/dashboardBT/shinyApp')
install.packages("WDI")
install.packages("WDI")
